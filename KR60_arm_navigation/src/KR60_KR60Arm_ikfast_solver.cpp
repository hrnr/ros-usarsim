/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2013-07-30 15:29:00.089015
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==61);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKcos(j[3]);
x6=IKsin(j[0]);
x7=IKsin(j[3]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=IKcos(j[5]);
x11=IKsin(j[5]);
x12=((IkReal(0.983000000000000))*(x0));
x13=((IkReal(0.169000000000000))*(x3));
x14=((IkReal(1.00000000000000))*(x9));
x15=((IkReal(0.152000000000000))*(x2));
x16=((IkReal(1.00000000000000))*(x8));
x17=((IkReal(0.983000000000000))*(x2));
x18=((IkReal(1.00000000000000))*(x3));
x19=((IkReal(0.00200000000000000))*(x3));
x20=((IkReal(1.00000000000000))*(x2));
x21=((x1)*(x3));
x22=((x0)*(x4));
x23=((x4)*(x6));
x24=((x6)*(x7));
x25=((x2)*(x4));
x26=((x5)*(x9));
x27=((x0)*(x1));
x28=((x0)*(x7));
x29=((x0)*(x5));
x30=((x5)*(x6));
x31=((x3)*(x4));
x32=((x20)*(x4));
x33=((x1)*(x2)*(x6));
x34=((x20)*(x22));
x35=((((IkReal(-1.00000000000000))*(x32)))+(x21));
x36=((((IkReal(-1.00000000000000))*(x1)*(x18)))+(x32));
x37=((((IkReal(-1.00000000000000))*(x18)*(x4)))+(((IkReal(-1.00000000000000))*(x1)*(x20))));
x38=((x35)*(x7));
x39=((x36)*(x5));
x40=((((IkReal(-1.00000000000000))*(x18)*(x27)))+(x34));
x41=((((x20)*(x23)))+(((IkReal(-1.00000000000000))*(x1)*(x18)*(x6))));
x42=((((x18)*(x22)))+(((x20)*(x27))));
x43=((((x18)*(x23)))+(((x1)*(x20)*(x6))));
x44=((x43)*(x5));
x45=((x42)*(x5));
x46=((((IkReal(-1.00000000000000))*(x24)))+(x45));
x47=((((x42)*(x7)))+(x30));
x48=((x44)+(x28));
x49=((((IkReal(1.00000000000000))*(x29)))+(((IkReal(-1.00000000000000))*(x43)*(x7))));
x50=((x48)*(x8));
eerot[0]=((((x46)*(x9)))+(((x8)*(((((IkReal(-1.00000000000000))*(x34)))+(((x0)*(x21))))))));
eerot[1]=((((x10)*(x47)))+(((x11)*(((((IkReal(-1.00000000000000))*(x14)*(x40)))+(((IkReal(-1.00000000000000))*(x16)*(x46))))))));
eerot[2]=((((x11)*(x47)))+(((x10)*(((((x46)*(x8)))+(((x40)*(x9))))))));
IkReal x51=((x2)*(x27));
IkReal x52=((IkReal(1.00000000000000))*(x22));
eetrans[0]=((IkReal(0.0700000000000000))+(((x7)*(((((IkReal(-1.00000000000000))*(x19)*(x52)))+(((IkReal(-0.00200000000000000))*(x51)))))))+(((IkReal(-0.00400000000000000))*(x27)))+(((x8)*(((((IkReal(-1.00000000000000))*(x15)*(x52)))+(((IkReal(0.152000000000000))*(x0)*(x21)))))))+(((IkReal(-1.00000000000000))*(x13)*(x52)))+(((IkReal(-1.00000000000000))*(x12)*(x25)))+(((IkReal(0.424000000000000))*(x0)))+(((IkReal(-0.169000000000000))*(x51)))+(((IkReal(-1.00400000000000))*(x22)))+(((IkReal(0.0120000000000000))*(x6)))+(((IkReal(-0.00200000000000000))*(x30)))+(((x9)*(((((IkReal(-0.152000000000000))*(x24)))+(((IkReal(0.152000000000000))*(x45)))))))+(((x12)*(x21))));
eerot[3]=((((x41)*(x8)))+(((x9)*(((((IkReal(-1.00000000000000))*(x44)))+(((IkReal(-1.00000000000000))*(x28))))))));
eerot[4]=((((x10)*(x49)))+(((x11)*(((((x41)*(x9)))+(x50))))));
eerot[5]=((((x10)*(((((IkReal(-1.00000000000000))*(x14)*(x41)))+(((IkReal(-1.00000000000000))*(x16)*(x48)))))))+(((x11)*(x49))));
IkReal x53=((x21)*(x6));
eetrans[1]=((IkReal(0.0100000000000000))+(((IkReal(0.169000000000000))*(x33)))+(((IkReal(-0.983000000000000))*(x53)))+(((IkReal(-0.00200000000000000))*(x29)))+(((x8)*(((((IkReal(-0.152000000000000))*(x53)))+(((x15)*(x23)))))))+(((x9)*(((((IkReal(-0.152000000000000))*(x28)))+(((IkReal(-0.152000000000000))*(x44)))))))+(((x7)*(((((x19)*(x23)))+(((IkReal(0.00200000000000000))*(x33)))))))+(((IkReal(0.00400000000000000))*(x1)*(x6)))+(((IkReal(0.0120000000000000))*(x0)))+(((x17)*(x23)))+(((IkReal(1.00400000000000))*(x23)))+(((x13)*(x23)))+(((IkReal(-0.424000000000000))*(x6))));
eerot[6]=((((x26)*(x35)))+(((x37)*(x8))));
eerot[7]=((((x11)*(((((x39)*(x8)))+(((x37)*(x9)))))))+(((x10)*(x38))));
eerot[8]=((((x11)*(x38)))+(((x10)*(((((IkReal(-1.00000000000000))*(x14)*(x37)))+(((IkReal(-1.00000000000000))*(x16)*(x39))))))));
IkReal x54=((IkReal(1.00000000000000))*(x15));
IkReal x55=((IkReal(1.00000000000000))*(x1));
eetrans[2]=((IkReal(-0.796000000000000))+(((IkReal(-1.00000000000000))*(x13)*(x55)))+(((IkReal(-1.00000000000000))*(x17)*(x55)))+(((x8)*(((((IkReal(-1.00000000000000))*(x1)*(x54)))+(((IkReal(-0.152000000000000))*(x31)))))))+(((IkReal(0.169000000000000))*(x25)))+(((x26)*(((((IkReal(0.152000000000000))*(x21)))+(((IkReal(-1.00000000000000))*(x4)*(x54)))))))+(((x7)*(((((IkReal(-1.00000000000000))*(x19)*(x55)))+(((IkReal(0.00200000000000000))*(x25)))))))+(((IkReal(-0.983000000000000))*(x31)))+(((IkReal(0.00400000000000000))*(x4)))+(((IkReal(-1.00400000000000))*(x1))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r02;
new_r01=r01;
new_r02=((IkReal(-1.00000000000000))*(r00));
new_px=((IkReal(-0.0700000000000000))+(px)+(((IkReal(-0.152000000000000))*(r00))));
new_r10=((IkReal(-1.00000000000000))*(r12));
new_r11=((IkReal(-1.00000000000000))*(r11));
new_r12=r10;
new_py=((IkReal(0.0100000000000000))+(((IkReal(-1.00000000000000))*(py)))+(((IkReal(0.152000000000000))*(r10))));
new_r20=((IkReal(-1.00000000000000))*(r22));
new_r21=((IkReal(-1.00000000000000))*(r21));
new_r22=r20;
new_pz=((IkReal(-0.796000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(0.152000000000000))*(r20))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((IkReal(-1.00000000000000))*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((IkReal(-1.00000000000000))*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((IkReal(-1.00000000000000))*(pz)*(r01))));
rxp1_2=((((IkReal(-1.00000000000000))*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((IkReal(-1.00000000000000))*(px)*(r12)))+(((py)*(r02))));
IkReal op[72], zeror[48];
int numroots;
IkReal x56=((IkReal(0.00200000000000000))*(r11));
IkReal x57=((IkReal(1.00000000000000))*(py));
IkReal x58=((IkReal(1.94901673217068))*(rxp1_1));
IkReal x59=((IkReal(1.18308019098357))*(npy));
IkReal x60=((IkReal(0.0141969622918028))*(r11));
IkReal x61=((IkReal(0.00400000000000000))*(px));
IkReal x62=((IkReal(0.0240000000000000))*(rxp1_2));
IkReal x63=((IkReal(0.309284881113736))*(r01));
IkReal x64=((IkReal(0.830785539259185))*(r21));
IkReal x65=((IkReal(0.337807120840328))*(r21));
IkReal x66=((IkReal(0.0294113503784490))*(r01));
IkReal x67=((IkReal(0.00400000000000000))*(pz));
IkReal x68=((IkReal(0.000707799213951852))*(r11));
IkReal x69=((IkReal(1.19108019098357))*(rxp1_1));
IkReal x70=((IkReal(0.0589832678293210))*(npy));
IkReal x71=((IkReal(0.0240000000000000))*(rxp1_0));
IkReal x72=((pp)*(r01));
IkReal x73=((IkReal(0.0480000000000000))*(rxp0_0));
IkReal x74=((IkReal(0.00141559842790370))*(r10));
IkReal x75=((IkReal(0.117966535658642))*(npx));
IkReal x76=((IkReal(0.0480000000000000))*(rxp0_2));
IkReal x77=((IkReal(3.89803346434136))*(rxp0_1));
IkReal x78=((pp)*(r21));
IkReal x79=((IkReal(0.0468751188862643))*(r21));
IkReal x80=((IkReal(0.0206064607408152))*(r01));
IkReal x81=((IkReal(0.504919809016435))*(rxp1_1));
IkReal x82=((IkReal(0.0251368791596723))*(r01));
IkReal x83=((IkReal(0.512919809016435))*(npy));
IkReal x84=((IkReal(0.00615503770819722))*(r11));
IkReal x85=((IkReal(0.821980649621551))*(r21));
IkReal x86=((IkReal(2.00000000000000))*(px));
IkReal x87=((IkReal(0.00400000000000000))*(r01));
IkReal x88=((IkReal(0.00800000000000000))*(r00));
IkReal x89=((IkReal(0.00800000000000000))*(py));
IkReal x90=((IkReal(0.618569762227472))*(r11));
IkReal x91=((IkReal(3.89803346434136))*(rxp1_0));
IkReal x92=((IkReal(0.0283939245836056))*(r01));
IkReal x93=((IkReal(0.0480000000000000))*(rxp1_1));
IkReal x94=((IkReal(0.00141559842790370))*(r01));
IkReal x95=((IkReal(0.00283119685580741))*(r00));
IkReal x96=((IkReal(0.0960000000000000))*(rxp0_1));
IkReal x97=((IkReal(7.79606692868272))*(rxp0_0));
IkReal x98=((IkReal(1.00983961803287))*(rxp1_0));
IkReal x99=((IkReal(0.0502737583193446))*(r11));
IkReal x100=((IkReal(0.0123100754163944))*(r01));
IkReal x101=((IkReal(0.00400000000000000))*(r10));
IkReal x102=((IkReal(0.0283939245836056))*(r10));
IkReal x103=((IkReal(1.66157107851837))*(r20));
IkReal x104=((IkReal(0.618569762227472))*(r00));
IkReal x105=((IkReal(2.36616038196713))*(npx));
IkReal x106=((IkReal(0.0588227007568980))*(r00));
IkReal x107=((IkReal(0.675614241680655))*(r20));
IkReal x108=((IkReal(2.38216038196713))*(rxp0_1));
IkReal x109=((IkReal(1.00983961803287))*(rxp0_1));
IkReal x110=((IkReal(0.0412129214816304))*(r00));
IkReal x111=((IkReal(0.0937502377725285))*(r20));
IkReal x112=((IkReal(0.0502737583193446))*(r00));
IkReal x113=((IkReal(1.02583961803287))*(npx));
IkReal x114=((IkReal(1.64396129924310))*(r20));
IkReal x115=((IkReal(0.0123100754163944))*(r10));
IkReal x116=((IkReal(2.00000000000000))*(pp));
IkReal x117=((IkReal(4.00000000000000))*(npx));
IkReal x118=((IkReal(1.00000000000000))*(pp));
IkReal x119=((IkReal(-0.00400000000000000))*(r10));
IkReal x120=((npy)*(x86));
IkReal x121=((IkReal(2.00000000000000))*(npy)*(pz));
IkReal x122=((IkReal(1.00000000000000))*(x78));
IkReal x123=((pz)*(x117));
IkReal x124=((r20)*(x116));
IkReal x125=((r00)*(x116));
IkReal x126=((px)*(x117));
IkReal x127=((IkReal(1.00000000000000))*(x72));
IkReal x128=((x86)+(((IkReal(-1.00000000000000))*(x87))));
IkReal x129=((r11)*(x116));
IkReal x130=((IkReal(4.00000000000000))*(npy)*(py));
IkReal x131=((IkReal(4.00000000000000))*(pp)*(r10));
IkReal x132=((IkReal(8.00000000000000))*(npx)*(py));
IkReal x133=((IkReal(-0.0120000000000000))+(py)+(((IkReal(-1.00000000000000))*(x56))));
IkReal x134=((IkReal(0.00102583961803287))+(x61));
IkReal x135=((IkReal(-0.00236616038196713))+(x64));
IkReal x136=((IkReal(-0.0120000000000000))+(x56));
IkReal x137=((IkReal(-0.000117966535658642))+(x67));
IkReal x138=((IkReal(-0.0120000000000000))+(((IkReal(-1.00000000000000))*(x56)))+(((IkReal(-1.00000000000000))*(x57))));
IkReal x139=((x136)+(((IkReal(-1.00000000000000))*(x57))));
IkReal x140=((x86)+(x87));
IkReal x141=((x136)+(py));
IkReal x142=((x105)+(x76));
IkReal x143=((x72)+(x84));
IkReal x144=((x71)+(x67));
IkReal x145=((x70)+(x69));
IkReal x146=((x80)+(x81));
IkReal x147=((x70)+(x79));
IkReal x148=((x78)+(x68));
IkReal x149=((x59)+(x62));
IkReal x150=((x126)+(x104));
IkReal x151=((x129)+(x91));
IkReal x152=((x121)+(x68));
IkReal x153=((x125)+(x115));
IkReal x154=((x123)+(x75));
IkReal x155=((x127)+(x84));
IkReal x156=((x122)+(x65));
IkReal x157=((IkReal(0.000117966535658642))+(x66)+(x67));
IkReal x158=((x121)+(x70));
IkReal x159=((x120)+(x63));
IkReal x160=((x124)+(x107));
IkReal x161=((((IkReal(2.38216038196713))*(rxp1_0)))+(((IkReal(0.0588227007568980))*(r11)))+(x94));
IkReal x162=((((IkReal(0.0412129214816304))*(r11)))+(x93)+(x94));
IkReal x163=((x72)+(x58)+(x60));
IkReal x164=((x113)+(x114)+(x76));
IkReal x165=((x108)+(x74)+(x73));
IkReal x166=((x62)+(x83)+(x85));
IkReal x167=((x110)+(x109)+(x73));
IkReal x168=((x125)+(x102)+(x77));
IkReal x169=((x130)+(x100)+(x99));
IkReal x170=((x126)+(x112)+(x77));
IkReal x171=((x124)+(x111)+(x75));
IkReal x172=((x127)+(x58)+(x60));
IkReal x173=((x120)+(x58)+(x82));
IkReal x174=((x159)+(x149));
IkReal x175=((x130)+(x91)+(x90)+(x92));
IkReal x176=((x173)+(x166));
op[0]=x138;
op[1]=IkReal(0);
op[2]=x119;
op[3]=IkReal(0);
op[4]=x139;
op[5]=IkReal(0);
op[6]=IkReal(0);
op[7]=x138;
op[8]=IkReal(0);
op[9]=x119;
op[10]=IkReal(0);
op[11]=x139;
op[12]=((((IkReal(-1.00000000000000))*(x149)))+(((IkReal(-1.00000000000000))*(x172)))+(x159)+(x135)+(x61));
op[13]=((IkReal(0.000117966535658642))+(((IkReal(-1.00000000000000))*(x156)))+(x152)+(x144)+(x145)+(((IkReal(-1.00000000000000))*(x66))));
op[14]=((((IkReal(-1.00000000000000))*(x142)))+(((IkReal(-1.00000000000000))*(x168)))+(x150)+(x103));
op[15]=((((IkReal(-1.00000000000000))*(x160)))+(((IkReal(-1.00000000000000))*(x106)))+(x165)+(x154));
op[16]=((IkReal(-0.00236616038196713))+(((IkReal(-1.00000000000000))*(x159)))+(x163)+(x149)+(x61)+(((IkReal(-1.00000000000000))*(x64))));
op[17]=((((IkReal(-1.00000000000000))*(x145)))+(((IkReal(-1.00000000000000))*(x152)))+(((IkReal(-1.00000000000000))*(x71)))+(x157)+(x78)+(x65));
op[18]=((((IkReal(-1.00000000000000))*(x147)))+(((IkReal(-1.00000000000000))*(x122)))+(x146)+(x137)+(x121)+(x71)+(((IkReal(-1.00000000000000))*(x68))));
op[19]=((IkReal(0.00102583961803287))+(((IkReal(-1.00000000000000))*(x173)))+(x166)+(x143)+(((IkReal(-1.00000000000000))*(x61))));
op[20]=((((IkReal(-1.00000000000000))*(x74)))+(((IkReal(-1.00000000000000))*(x171)))+(x167)+(x123));
op[21]=((((IkReal(-1.00000000000000))*(x170)))+(x164)+(x153));
op[22]=((((IkReal(-1.00000000000000))*(x146)))+(((IkReal(-1.00000000000000))*(x71)))+(((IkReal(-1.00000000000000))*(x121)))+(x147)+(x148)+(x137));
op[23]=((IkReal(0.00102583961803287))+(((IkReal(-1.00000000000000))*(x155)))+(((IkReal(-1.00000000000000))*(x166)))+(x173)+(((IkReal(-1.00000000000000))*(x61))));
op[24]=x140;
op[25]=IkReal(0);
op[26]=x88;
op[27]=IkReal(0);
op[28]=x128;
op[29]=IkReal(0);
op[30]=IkReal(0);
op[31]=x140;
op[32]=IkReal(0);
op[33]=x88;
op[34]=IkReal(0);
op[35]=x128;
op[36]=((((IkReal(-1.00000000000000))*(x129)))+(x175)+(x89));
op[37]=((((IkReal(-1.00000000000000))*(x161)))+(x93));
op[38]=((x132)+(((IkReal(-1.00000000000000))*(x131)))+(((IkReal(1.23713952445494))*(r10)))+(x97)+(((IkReal(0.0567878491672111))*(r00))));
op[39]=((((IkReal(-0.117645401513796))*(r10)))+(((IkReal(-4.76432076393426))*(rxp0_0)))+(x96)+(((IkReal(-1.00000000000000))*(x95))));
op[40]=((((IkReal(-1.00000000000000))*(x175)))+(x129)+(x89));
op[41]=((x161)+(((IkReal(-1.00000000000000))*(x93))));
op[42]=((x162)+(((IkReal(-1.00000000000000))*(x98))));
op[43]=((((IkReal(-1.00000000000000))*(x169)))+(x151)+(((IkReal(-1.00000000000000))*(x89))));
op[44]=((x95)+(x96)+(((IkReal(-2.01967923606574))*(rxp0_0)))+(((IkReal(0.0824258429632608))*(r10))));
op[45]=((x131)+(((IkReal(-1.00000000000000))*(x132)))+(x97)+(((IkReal(-0.0246201508327889))*(r00)))+(((IkReal(-0.100547516638689))*(r10))));
op[46]=((((IkReal(-1.00000000000000))*(x162)))+(x98));
op[47]=((((IkReal(-1.00000000000000))*(x151)))+(x169)+(((IkReal(-1.00000000000000))*(x89))));
op[48]=x141;
op[49]=IkReal(0);
op[50]=x101;
op[51]=IkReal(0);
op[52]=x133;
op[53]=IkReal(0);
op[54]=IkReal(0);
op[55]=x141;
op[56]=IkReal(0);
op[57]=x101;
op[58]=IkReal(0);
op[59]=x133;
op[60]=((((IkReal(-1.00000000000000))*(x174)))+(x163)+(x135)+(((IkReal(-1.00000000000000))*(x61))));
op[61]=((((IkReal(-1.00000000000000))*(x156)))+(((IkReal(-1.00000000000000))*(x71)))+(x157)+(x158)+(((IkReal(-1.00000000000000))*(x69)))+(((IkReal(-1.00000000000000))*(x68))));
op[62]=((((IkReal(-1.00000000000000))*(x142)))+(((IkReal(-1.00000000000000))*(x150)))+(x168)+(x103));
op[63]=((((IkReal(-1.00000000000000))*(x165)))+(((IkReal(-1.00000000000000))*(x160)))+(x154)+(x106));
op[64]=((IkReal(-0.00236616038196713))+(((IkReal(-1.00000000000000))*(x172)))+(x174)+(((IkReal(-1.00000000000000))*(x61)))+(((IkReal(-1.00000000000000))*(x64))));
op[65]=((IkReal(0.000117966535658642))+(((IkReal(-1.00000000000000))*(x158)))+(x144)+(x148)+(x65)+(x69)+(((IkReal(-1.00000000000000))*(x66))));
op[66]=((((IkReal(-1.00000000000000))*(x147)))+(((IkReal(-1.00000000000000))*(x146)))+(((IkReal(-1.00000000000000))*(x71)))+(((IkReal(-1.00000000000000))*(x122)))+(x152)+(x137));
op[67]=((((IkReal(-1.00000000000000))*(x155)))+(x176)+(x134));
op[68]=((((IkReal(-1.00000000000000))*(x167)))+(((IkReal(-1.00000000000000))*(x171)))+(x123)+(x74));
op[69]=((((IkReal(-1.00000000000000))*(x153)))+(x170)+(x164));
op[70]=((((IkReal(-1.00000000000000))*(x152)))+(x146)+(x147)+(x137)+(x71)+(x78));
op[71]=((((IkReal(-1.00000000000000))*(x176)))+(x143)+(x134));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j0array[16], cj0array[16], sj0array[16], j5array[16], cj5array[16], sj5array[16], j1array[16], cj1array[16], sj1array[16];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ij0 += 3)
{
IkReal htj0 = zeror[ij0+0], htj5 = zeror[ij0+1], htj1 = zeror[ij0+2];
j0array[numsolutions]=((IkReal(2.00000000000000))*(atan(htj0)));
j5array[numsolutions]=((IkReal(2.00000000000000))*(atan(htj5)));
j1array[numsolutions]=((IkReal(2.00000000000000))*(atan(htj1)));
IkReal x177=(htj0)*(htj0);
IkReal x178=(htj5)*(htj5);
IkReal x179=(htj1)*(htj1);
cj0array[numsolutions]=((((IKabs(((IkReal(1.00000000000000))+(x177))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+(x177)))):(IkReal)1.0e30))*(((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x177))))));
cj5array[numsolutions]=((((IKabs(((IkReal(1.00000000000000))+(x178))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+(x178)))):(IkReal)1.0e30))*(((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x178))))));
cj1array[numsolutions]=((((IKabs(((IkReal(1.00000000000000))+(x179))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+(x179)))):(IkReal)1.0e30))*(((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x179))))));
sj0array[numsolutions]=((IkReal(2.00000000000000))*(htj0)*(((IKabs(((IkReal(1.00000000000000))+((htj0)*(htj0)))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+((htj0)*(htj0))))):(IkReal)1.0e30)));
sj5array[numsolutions]=((IkReal(2.00000000000000))*(htj5)*(((IKabs(((IkReal(1.00000000000000))+((htj5)*(htj5)))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+((htj5)*(htj5))))):(IkReal)1.0e30)));
sj1array[numsolutions]=((IkReal(2.00000000000000))*(htj1)*(((IKabs(((IkReal(1.00000000000000))+((htj1)*(htj1)))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+((htj1)*(htj1))))):(IkReal)1.0e30)));
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j0valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj0 = 16;
_nj5 = 1;
_nj1 = 1;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
_ij5[0] = 0; _ij5[1] = -1;
_ij1[0] = 0; _ij1[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( !j0valid[iij0] ) { continue; }
if( IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(cj5array[ij0]-cj5array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij0]-sj5array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(cj1array[ij0]-cj1array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij0]-sj1array[iij0]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j0valid[iij0]=false; _ij0[1] = iij0; _ij5[1] = 0; _ij1[1] = 0;  break; 
}
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

    j5 = j5array[ij0]; cj5 = cj5array[ij0]; sj5 = sj5array[ij0];

    j1 = j1array[ij0]; cj1 = cj1array[ij0]; sj1 = sj1array[ij0];

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(((((IkReal(-0.994850000000000))*((sj1)*(sj1))))+(((IkReal(-0.994850000000000))*((cj1)*(cj1))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((sj1)*(sj1))))+(((IkReal(-1.00000000000000))*((cj1)*(cj1)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x180=((IkReal(1.00000000000000))*(cj0));
cj3array[0]=((((r00)*(sj0)*(sj5)))+(((IkReal(-1.00000000000000))*(r10)*(sj5)*(x180)))+(((cj5)*(r01)*(sj0)))+(((IkReal(-1.00000000000000))*(cj5)*(r11)*(x180))));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign(((((sj3)*((cj1)*(cj1))))+(((sj3)*((sj1)*(sj1))))));
dummyeval[0]=((((sj3)*((cj1)*(cj1))))+(((sj3)*((sj1)*(sj1)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
IkReal x181=((IkReal(0.983000000000000))*(sj3));
gconst2=IKsign(((((x181)*((cj1)*(cj1))))+(((x181)*((sj1)*(sj1))))));
dummyeval[0]=((((sj3)*((cj1)*(cj1))))+(((sj3)*((sj1)*(sj1)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
IkReal x182=(cj0)*(cj0);
IkReal x183=(cj5)*(cj5);
IkReal x184=(sj0)*(sj0);
IkReal x185=(sj5)*(sj5);
IkReal x186=((IkReal(2.00000000000000))*(r10));
IkReal x187=((cj5)*(sj5));
IkReal x188=((cj0)*(sj0));
IkReal x189=((IkReal(2.00000000000000))*(r01));
gconst3=IKsign(((((r01)*(x186)*(x187)*(x188)))+(((x184)*((r02)*(r02))))+(((x182)*(x183)*((r10)*(r10))))+(((x183)*(x184)*((r00)*(r00))))+(((IkReal(-1.00000000000000))*(r00)*(x184)*(x187)*(x189)))+(((IkReal(-1.00000000000000))*(r00)*(x183)*(x186)*(x188)))+(((x182)*(x185)*((r11)*(r11))))+(((IkReal(-2.00000000000000))*(r02)*(r12)*(x188)))+(((IkReal(-1.00000000000000))*(r11)*(x185)*(x188)*(x189)))+(((IkReal(-1.00000000000000))*(r11)*(x182)*(x186)*(x187)))+(((x182)*((r12)*(r12))))+(((IkReal(2.00000000000000))*(r00)*(r11)*(x187)*(x188)))+(((x184)*(x185)*((r01)*(r01))))));
IkReal x190=(cj0)*(cj0);
IkReal x191=(cj5)*(cj5);
IkReal x192=(sj0)*(sj0);
IkReal x193=(sj5)*(sj5);
IkReal x194=((IkReal(2.00000000000000))*(r10));
IkReal x195=((cj5)*(sj5));
IkReal x196=((cj0)*(sj0));
IkReal x197=((IkReal(2.00000000000000))*(r01));
dummyeval[0]=((((x191)*(x192)*((r00)*(r00))))+(((x190)*((r12)*(r12))))+(((x190)*(x191)*((r10)*(r10))))+(((IkReal(-1.00000000000000))*(r11)*(x193)*(x196)*(x197)))+(((x192)*((r02)*(r02))))+(((x192)*(x193)*((r01)*(r01))))+(((IkReal(-1.00000000000000))*(r11)*(x190)*(x194)*(x195)))+(((x190)*(x193)*((r11)*(r11))))+(((IkReal(-2.00000000000000))*(r02)*(r12)*(x196)))+(((r01)*(x194)*(x195)*(x196)))+(((IkReal(-1.00000000000000))*(r00)*(x192)*(x195)*(x197)))+(((IkReal(2.00000000000000))*(r00)*(r11)*(x195)*(x196)))+(((IkReal(-1.00000000000000))*(r00)*(x191)*(x194)*(x196))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x198=((IkReal(1.00000000000000))*(cj5));
IkReal x199=((IkReal(0.00200000000000000))*(cj0));
IkReal x200=((cj5)*(r11));
IkReal x201=((r10)*(sj5));
IkReal x202=((r01)*(sj0));
IkReal x203=((IkReal(1.00000000000000))*(sj5));
IkReal x204=((sj0)*(x203));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r20)*(x203)))+(((IkReal(-1.00000000000000))*(r21)*(x198))));
evalcond[2]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x198)*(x202)))+(((cj0)*(x200)))+(((cj0)*(x201)))+(((IkReal(-1.00000000000000))*(r00)*(x204))));
evalcond[3]=((IkReal(0.0120000000000000))+(((IkReal(-0.00200000000000000))*(r00)*(sj0)*(sj5)))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py)))+(((x199)*(x201)))+(((x199)*(x200)))+(((IkReal(-0.00200000000000000))*(cj5)*(x202))));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj0)*(r01)*(x198)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x203)))+(((IkReal(-1.00000000000000))*(r11)*(sj0)*(x198)))+(((IkReal(-1.00000000000000))*(sj0)*(x201))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst16;
gconst16=IKsign(((((IkReal(-0.994850000000000))*((sj1)*(sj1))))+(((IkReal(-0.994850000000000))*((cj1)*(cj1))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((sj1)*(sj1))))+(((IkReal(-1.00000000000000))*((cj1)*(cj1)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x205=((IkReal(1.00000000000000))*(cj0));
if( IKabs(((((IkReal(-1.00000000000000))*(r12)*(x205)))+(((r02)*(sj0))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj5)*(r00)*(sj0)))+(((cj0)*(r11)*(sj5)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(sj5)))+(((IkReal(-1.00000000000000))*(cj5)*(r10)*(x205))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x206=IKatan2(((((IkReal(-1.00000000000000))*(r12)*(x205)))+(((r02)*(sj0)))), ((((cj5)*(r00)*(sj0)))+(((cj0)*(r11)*(sj5)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(sj5)))+(((IkReal(-1.00000000000000))*(cj5)*(r10)*(x205)))));
j4array[0]=((IkReal(-1.00000000000000))*(x206));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x206))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x207=IKcos(j4);
IkReal x208=IKsin(j4);
IkReal x209=((IkReal(1.00000000000000))*(x207));
evalcond[0]=((((cj5)*(r00)*(sj0)*(x207)))+(((cj0)*(r11)*(sj5)*(x207)))+(((cj0)*(r12)*(x208)))+(((IkReal(-1.00000000000000))*(r02)*(sj0)*(x208)))+(((IkReal(-1.00000000000000))*(cj0)*(cj5)*(r10)*(x209)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(sj5)*(x209))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst17;
gconst17=IKsign((((sj1)*(sj1))+((cj1)*(cj1))));
dummyeval[0]=(((sj1)*(sj1))+((cj1)*(cj1)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst18;
gconst18=IKsign(((((IkReal(0.169000000000000))*((cj1)*(cj1))))+(((IkReal(0.169000000000000))*((sj1)*(sj1))))));
dummyeval[0]=(((sj1)*(sj1))+((cj1)*(cj1)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x210=((cj1)*(sj1));
IkReal x211=((IkReal(0.00200000000000000))*(sj1));
IkReal x212=((r20)*(sj5));
IkReal x213=((cj5)*(r21));
IkReal x214=((IkReal(0.00200000000000000))*(cj1));
IkReal x215=((IkReal(0.983000000000000))*(sj1));
IkReal x216=((cj4)*(r22));
IkReal x217=((IkReal(0.983000000000000))*(cj1));
IkReal x218=((IkReal(0.169000000000000))*(sj1));
IkReal x219=((IkReal(0.169000000000000))*(cj1));
IkReal x220=((cj1)*(x216));
IkReal x221=((cj5)*(r20)*(sj4));
IkReal x222=((r21)*(sj4)*(sj5));
IkReal x223=((sj1)*(x222));
if( IKabs(((gconst18)*(((((IkReal(-1.00000000000000))*(x215)*(x221)))+(((x215)*(x222)))+(((IkReal(-1.00000000000000))*(x219)*(x221)))+(((x219)*(x222)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)))+(((IkReal(-1.00000000000000))*(x211)*(x212)))+(((IkReal(-1.00000000000000))*(x211)*(x213)))+(((IkReal(-1.00000000000000))*(x216)*(x219)))+(((IkReal(1.00400000000000))*(x210)))+(((IkReal(-0.00400000000000000))*((sj1)*(sj1))))+(((IkReal(-1.00000000000000))*(x215)*(x216))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst18)*(((((x213)*(x214)))+(((x216)*(x217)))+(((cj1)*(pz)))+(((IkReal(-1.00400000000000))*((cj1)*(cj1))))+(((x212)*(x214)))+(((IkReal(-1.00000000000000))*(x218)*(x221)))+(((x218)*(x222)))+(((x217)*(x221)))+(((IkReal(-1.00000000000000))*(x217)*(x222)))+(((IkReal(-1.00000000000000))*(x216)*(x218)))+(((IkReal(0.00400000000000000))*(x210))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst18)*(((((IkReal(-1.00000000000000))*(x215)*(x221)))+(((x215)*(x222)))+(((IkReal(-1.00000000000000))*(x219)*(x221)))+(((x219)*(x222)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)))+(((IkReal(-1.00000000000000))*(x211)*(x212)))+(((IkReal(-1.00000000000000))*(x211)*(x213)))+(((IkReal(-1.00000000000000))*(x216)*(x219)))+(((IkReal(1.00400000000000))*(x210)))+(((IkReal(-0.00400000000000000))*((sj1)*(sj1))))+(((IkReal(-1.00000000000000))*(x215)*(x216)))))), ((gconst18)*(((((x213)*(x214)))+(((x216)*(x217)))+(((cj1)*(pz)))+(((IkReal(-1.00400000000000))*((cj1)*(cj1))))+(((x212)*(x214)))+(((IkReal(-1.00000000000000))*(x218)*(x221)))+(((x218)*(x222)))+(((x217)*(x221)))+(((IkReal(-1.00000000000000))*(x217)*(x222)))+(((IkReal(-1.00000000000000))*(x216)*(x218)))+(((IkReal(0.00400000000000000))*(x210)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x224=IKcos(j2);
IkReal x225=IKsin(j2);
IkReal x226=((cj0)*(r00));
IkReal x227=((IkReal(0.00200000000000000))*(sj5));
IkReal x228=((cj4)*(cj5));
IkReal x229=((IkReal(1.00000000000000))*(sj5));
IkReal x230=((r11)*(sj0));
IkReal x231=((cj0)*(r01));
IkReal x232=((cj5)*(sj4));
IkReal x233=((IkReal(0.00200000000000000))*(cj5));
IkReal x234=((r10)*(sj0));
IkReal x235=((IkReal(1.00000000000000))*(sj4));
IkReal x236=((r12)*(sj0));
IkReal x237=((cj0)*(r02));
IkReal x238=((cj1)*(x224));
IkReal x239=((sj1)*(x224));
IkReal x240=((cj1)*(x225));
IkReal x241=((sj1)*(x225));
IkReal x242=((IkReal(1.00000000000000))*(x241));
evalcond[0]=((((cj4)*(r22)))+(x239)+(x240)+(((r20)*(x232)))+(((IkReal(-1.00000000000000))*(r21)*(sj4)*(x229))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r22)*(x235)))+(((r20)*(x228)))+(x238)+(((IkReal(-1.00000000000000))*(cj4)*(r21)*(x229)))+(((IkReal(-1.00000000000000))*(x242))));
evalcond[2]=((((IkReal(1.00400000000000))*(cj1)))+(((IkReal(0.169000000000000))*(x238)))+(((IkReal(0.983000000000000))*(x239)))+(((IkReal(-1.00000000000000))*(r20)*(x227)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(0.983000000000000))*(x240)))+(((IkReal(-1.00000000000000))*(r21)*(x233)))+(((IkReal(-0.169000000000000))*(x241)))+(((IkReal(-0.00400000000000000))*(sj1))));
evalcond[3]=((((x232)*(x234)))+(((IkReal(-1.00000000000000))*(sj4)*(x229)*(x231)))+(((IkReal(-1.00000000000000))*(sj4)*(x229)*(x230)))+(((x226)*(x232)))+(x238)+(((cj4)*(x237)))+(((cj4)*(x236)))+(((IkReal(-1.00000000000000))*(x242))));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj4)*(x229)*(x231)))+(((IkReal(-1.00000000000000))*(cj4)*(x229)*(x230)))+(((IkReal(-1.00000000000000))*(x240)))+(((IkReal(-1.00000000000000))*(x235)*(x236)))+(((IkReal(-1.00000000000000))*(x235)*(x237)))+(((x228)*(x234)))+(((x226)*(x228)))+(((IkReal(-1.00000000000000))*(x239))));
evalcond[5]=((IkReal(0.424000000000000))+(((IkReal(-1.00000000000000))*(x230)*(x233)))+(((IkReal(-1.00000000000000))*(x227)*(x234)))+(((IkReal(-1.00400000000000))*(sj1)))+(((IkReal(0.983000000000000))*(x238)))+(((IkReal(-0.00400000000000000))*(cj1)))+(((IkReal(-0.983000000000000))*(x241)))+(((IkReal(-1.00000000000000))*(x231)*(x233)))+(((IkReal(-0.169000000000000))*(x240)))+(((IkReal(-1.00000000000000))*(py)*(sj0)))+(((IkReal(-1.00000000000000))*(x226)*(x227)))+(((IkReal(-0.169000000000000))*(x239)))+(((IkReal(-1.00000000000000))*(cj0)*(px))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x243=((cj1)*(cj4));
IkReal x244=((IkReal(1.00000000000000))*(r22));
IkReal x245=((r21)*(sj5));
IkReal x246=((sj1)*(sj4));
IkReal x247=((cj5)*(r20));
IkReal x248=((cj4)*(sj1));
IkReal x249=((cj1)*(sj4));
if( IKabs(((gconst17)*(((((IkReal(-1.00000000000000))*(x247)*(x249)))+(((IkReal(-1.00000000000000))*(x243)*(x244)))+(((x245)*(x249)))+(((x247)*(x248)))+(((IkReal(-1.00000000000000))*(x245)*(x248)))+(((IkReal(-1.00000000000000))*(x244)*(x246))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst17)*(((((r22)*(x249)))+(((IkReal(-1.00000000000000))*(x246)*(x247)))+(((IkReal(-1.00000000000000))*(x243)*(x247)))+(((x245)*(x246)))+(((x243)*(x245)))+(((IkReal(-1.00000000000000))*(x244)*(x248))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst17)*(((((IkReal(-1.00000000000000))*(x247)*(x249)))+(((IkReal(-1.00000000000000))*(x243)*(x244)))+(((x245)*(x249)))+(((x247)*(x248)))+(((IkReal(-1.00000000000000))*(x245)*(x248)))+(((IkReal(-1.00000000000000))*(x244)*(x246)))))), ((gconst17)*(((((r22)*(x249)))+(((IkReal(-1.00000000000000))*(x246)*(x247)))+(((IkReal(-1.00000000000000))*(x243)*(x247)))+(((x245)*(x246)))+(((x243)*(x245)))+(((IkReal(-1.00000000000000))*(x244)*(x248)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x250=IKcos(j2);
IkReal x251=IKsin(j2);
IkReal x252=((cj0)*(r00));
IkReal x253=((IkReal(0.00200000000000000))*(sj5));
IkReal x254=((cj4)*(cj5));
IkReal x255=((IkReal(1.00000000000000))*(sj5));
IkReal x256=((r11)*(sj0));
IkReal x257=((cj0)*(r01));
IkReal x258=((cj5)*(sj4));
IkReal x259=((IkReal(0.00200000000000000))*(cj5));
IkReal x260=((r10)*(sj0));
IkReal x261=((IkReal(1.00000000000000))*(sj4));
IkReal x262=((r12)*(sj0));
IkReal x263=((cj0)*(r02));
IkReal x264=((cj1)*(x250));
IkReal x265=((sj1)*(x250));
IkReal x266=((cj1)*(x251));
IkReal x267=((sj1)*(x251));
IkReal x268=((IkReal(1.00000000000000))*(x267));
evalcond[0]=((((cj4)*(r22)))+(((r20)*(x258)))+(x265)+(x266)+(((IkReal(-1.00000000000000))*(r21)*(sj4)*(x255))));
evalcond[1]=((((r20)*(x254)))+(x264)+(((IkReal(-1.00000000000000))*(r22)*(x261)))+(((IkReal(-1.00000000000000))*(x268)))+(((IkReal(-1.00000000000000))*(cj4)*(r21)*(x255))));
evalcond[2]=((((IkReal(0.169000000000000))*(x264)))+(((IkReal(1.00400000000000))*(cj1)))+(((IkReal(-1.00000000000000))*(r20)*(x253)))+(((IkReal(-1.00000000000000))*(r21)*(x259)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-0.169000000000000))*(x267)))+(((IkReal(0.983000000000000))*(x266)))+(((IkReal(0.983000000000000))*(x265)))+(((IkReal(-0.00400000000000000))*(sj1))));
evalcond[3]=((((x258)*(x260)))+(((IkReal(-1.00000000000000))*(sj4)*(x255)*(x257)))+(((IkReal(-1.00000000000000))*(sj4)*(x255)*(x256)))+(((cj4)*(x262)))+(((cj4)*(x263)))+(x264)+(((x252)*(x258)))+(((IkReal(-1.00000000000000))*(x268))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x266)))+(((IkReal(-1.00000000000000))*(x265)))+(((IkReal(-1.00000000000000))*(cj4)*(x255)*(x256)))+(((IkReal(-1.00000000000000))*(cj4)*(x255)*(x257)))+(((x254)*(x260)))+(((IkReal(-1.00000000000000))*(x261)*(x263)))+(((IkReal(-1.00000000000000))*(x261)*(x262)))+(((x252)*(x254))));
evalcond[5]=((IkReal(0.424000000000000))+(((IkReal(-1.00000000000000))*(x252)*(x253)))+(((IkReal(-1.00400000000000))*(sj1)))+(((IkReal(-1.00000000000000))*(x256)*(x259)))+(((IkReal(-1.00000000000000))*(x257)*(x259)))+(((IkReal(-1.00000000000000))*(x253)*(x260)))+(((IkReal(-0.00400000000000000))*(cj1)))+(((IkReal(-0.983000000000000))*(x267)))+(((IkReal(-0.169000000000000))*(x266)))+(((IkReal(-0.169000000000000))*(x265)))+(((IkReal(0.983000000000000))*(x264)))+(((IkReal(-1.00000000000000))*(py)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(px))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x269=(sj1)*(sj1);
IkReal x270=(cj1)*(cj1);
IkReal x271=((IkReal(0.000338000000000000))*(sj1));
IkReal x272=((r20)*(sj5));
IkReal x273=((IkReal(0.983000000000000))*(cj1));
IkReal x274=((py)*(sj0));
IkReal x275=((cj0)*(px));
IkReal x276=((IkReal(0.983000000000000))*(sj1));
IkReal x277=((r11)*(sj0));
IkReal x278=((IkReal(0.169000000000000))*(cj1));
IkReal x279=((cj0)*(r01));
IkReal x280=((IkReal(0.169000000000000))*(sj1));
IkReal x281=((IkReal(0.000338000000000000))*(cj1));
IkReal x282=((IkReal(0.00196600000000000))*(cj1));
IkReal x283=((IkReal(0.00196600000000000))*(sj1));
IkReal x284=((cj5)*(x281));
IkReal x285=((cj5)*(x283));
IkReal x286=((cj0)*(r00)*(sj5));
IkReal x287=((r10)*(sj0)*(sj5));
IkReal x288=((cj5)*(x282));
IkReal x289=((IkReal(0.00196600000000000))*(x287));
if( IKabs(((gconst16)*(((((IkReal(-1.00000000000000))*(pz)*(x273)))+(((x275)*(x278)))+(((x275)*(x276)))+(((x271)*(x272)))+(((x279)*(x285)))+(((x279)*(x284)))+(((IkReal(-1.00000000000000))*(r21)*(x288)))+(((x274)*(x278)))+(((x274)*(x276)))+(((IkReal(0.987608000000000))*(x270)))+(((IkReal(0.987608000000000))*(x269)))+(((IkReal(-0.416792000000000))*(sj1)))+(((cj5)*(r21)*(x271)))+(((IkReal(-1.00000000000000))*(x272)*(x282)))+(((x277)*(x284)))+(((x277)*(x285)))+(((x281)*(x287)))+(((x281)*(x286)))+(((IkReal(-0.0716560000000000))*(cj1)))+(((pz)*(x280)))+(((x283)*(x286)))+(((x283)*(x287))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst16)*(((((IkReal(0.416792000000000))*(cj1)))+(((IkReal(-1.00000000000000))*(pz)*(x278)))+(((IkReal(-1.00000000000000))*(pz)*(x276)))+(((IkReal(-1.00000000000000))*(x273)*(x274)))+(((IkReal(-1.00000000000000))*(x273)*(x275)))+(((IkReal(-1.00000000000000))*(x277)*(x288)))+(((cj5)*(x271)*(x279)))+(((cj5)*(x271)*(x277)))+(((IkReal(-1.00000000000000))*(r21)*(x285)))+(((IkReal(-1.00000000000000))*(r21)*(x284)))+(((x274)*(x280)))+(((x271)*(x286)))+(((x271)*(x287)))+(((IkReal(0.165744000000000))*(x269)))+(((IkReal(-1.00000000000000))*(x282)*(x286)))+(((IkReal(-1.00000000000000))*(x282)*(x287)))+(((IkReal(0.165744000000000))*(x270)))+(((x275)*(x280)))+(((IkReal(-1.00000000000000))*(x272)*(x281)))+(((IkReal(-1.00000000000000))*(x272)*(x283)))+(((IkReal(-1.00000000000000))*(x279)*(x288)))+(((IkReal(-0.0716560000000000))*(sj1))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst16)*(((((IkReal(-1.00000000000000))*(pz)*(x273)))+(((x275)*(x278)))+(((x275)*(x276)))+(((x271)*(x272)))+(((x279)*(x285)))+(((x279)*(x284)))+(((IkReal(-1.00000000000000))*(r21)*(x288)))+(((x274)*(x278)))+(((x274)*(x276)))+(((IkReal(0.987608000000000))*(x270)))+(((IkReal(0.987608000000000))*(x269)))+(((IkReal(-0.416792000000000))*(sj1)))+(((cj5)*(r21)*(x271)))+(((IkReal(-1.00000000000000))*(x272)*(x282)))+(((x277)*(x284)))+(((x277)*(x285)))+(((x281)*(x287)))+(((x281)*(x286)))+(((IkReal(-0.0716560000000000))*(cj1)))+(((pz)*(x280)))+(((x283)*(x286)))+(((x283)*(x287)))))), ((gconst16)*(((((IkReal(0.416792000000000))*(cj1)))+(((IkReal(-1.00000000000000))*(pz)*(x278)))+(((IkReal(-1.00000000000000))*(pz)*(x276)))+(((IkReal(-1.00000000000000))*(x273)*(x274)))+(((IkReal(-1.00000000000000))*(x273)*(x275)))+(((IkReal(-1.00000000000000))*(x277)*(x288)))+(((cj5)*(x271)*(x279)))+(((cj5)*(x271)*(x277)))+(((IkReal(-1.00000000000000))*(r21)*(x285)))+(((IkReal(-1.00000000000000))*(r21)*(x284)))+(((x274)*(x280)))+(((x271)*(x286)))+(((x271)*(x287)))+(((IkReal(0.165744000000000))*(x269)))+(((IkReal(-1.00000000000000))*(x282)*(x286)))+(((IkReal(-1.00000000000000))*(x282)*(x287)))+(((IkReal(0.165744000000000))*(x270)))+(((x275)*(x280)))+(((IkReal(-1.00000000000000))*(x272)*(x281)))+(((IkReal(-1.00000000000000))*(x272)*(x283)))+(((IkReal(-1.00000000000000))*(x279)*(x288)))+(((IkReal(-0.0716560000000000))*(sj1)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
IkReal x290=IKcos(j2);
IkReal x291=IKsin(j2);
IkReal x292=((IkReal(0.169000000000000))*(cj1));
IkReal x293=((IkReal(0.00200000000000000))*(cj0));
IkReal x294=((IkReal(0.00200000000000000))*(cj5));
IkReal x295=((IkReal(0.00200000000000000))*(sj5));
IkReal x296=((IkReal(0.169000000000000))*(sj1));
IkReal x297=((IkReal(0.983000000000000))*(x291));
IkReal x298=((IkReal(0.983000000000000))*(x290));
evalcond[0]=((((x290)*(x292)))+(((IkReal(-1.00000000000000))*(x291)*(x296)))+(((IkReal(1.00400000000000))*(cj1)))+(((cj1)*(x297)))+(((sj1)*(x298)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(r21)*(x294)))+(((IkReal(-1.00000000000000))*(r20)*(x295)))+(((IkReal(-0.00400000000000000))*(sj1))));
evalcond[1]=((IkReal(0.424000000000000))+(((IkReal(-1.00000000000000))*(x291)*(x292)))+(((IkReal(-1.00000000000000))*(x290)*(x296)))+(((cj1)*(x298)))+(((IkReal(-1.00400000000000))*(sj1)))+(((IkReal(-1.00000000000000))*(cj5)*(r01)*(x293)))+(((IkReal(-0.00400000000000000))*(cj1)))+(((IkReal(-1.00000000000000))*(sj1)*(x297)))+(((IkReal(-1.00000000000000))*(r10)*(sj0)*(x295)))+(((IkReal(-1.00000000000000))*(py)*(sj0)))+(((IkReal(-1.00000000000000))*(r11)*(sj0)*(x294)))+(((IkReal(-1.00000000000000))*(r00)*(sj5)*(x293)))+(((IkReal(-1.00000000000000))*(cj0)*(px))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst19;
gconst19=IKsign((((r22)*(r22))+((((cj5)*(cj5))*((r20)*(r20))))+(((IkReal(-2.00000000000000))*(cj5)*(r20)*(r21)*(sj5)))+((((r21)*(r21))*((sj5)*(sj5))))));
dummyeval[0]=(((r22)*(r22))+((((cj5)*(cj5))*((r20)*(r20))))+(((IkReal(-2.00000000000000))*(cj5)*(r20)*(r21)*(sj5)))+((((r21)*(r21))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst20;
IkReal x299=((cj0)*(sj5));
IkReal x300=((sj0)*(sj5));
IkReal x301=((IkReal(1.00000000000000))*(r22));
IkReal x302=((cj0)*(cj5));
IkReal x303=((cj5)*(sj0));
gconst20=IKsign(((((r12)*(r20)*(x302)))+(((IkReal(-1.00000000000000))*(r12)*(r21)*(x299)))+(((r00)*(r22)*(x303)))+(((r02)*(r21)*(x300)))+(((IkReal(-1.00000000000000))*(r01)*(x300)*(x301)))+(((IkReal(-1.00000000000000))*(r10)*(x301)*(x302)))+(((r11)*(r22)*(x299)))+(((IkReal(-1.00000000000000))*(r02)*(r20)*(x303)))));
IkReal x304=((cj0)*(sj5));
IkReal x305=((sj0)*(sj5));
IkReal x306=((IkReal(1.00000000000000))*(r22));
IkReal x307=((cj0)*(cj5));
IkReal x308=((cj5)*(sj0));
dummyeval[0]=((((r12)*(r20)*(x307)))+(((r00)*(r22)*(x308)))+(((r02)*(r21)*(x305)))+(((IkReal(-1.00000000000000))*(r12)*(r21)*(x304)))+(((r11)*(r22)*(x304)))+(((IkReal(-1.00000000000000))*(r01)*(x305)*(x306)))+(((IkReal(-1.00000000000000))*(r02)*(r20)*(x308)))+(((IkReal(-1.00000000000000))*(r10)*(x306)*(x307))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x309=((r02)*(sj0));
IkReal x310=((cj2)*(sj1));
IkReal x311=((cj1)*(sj2));
IkReal x312=((IkReal(1.00000000000000))*(cj0));
IkReal x313=((r11)*(sj5));
IkReal x314=((cj0)*(cj5)*(r10));
IkReal x315=((r01)*(sj0)*(sj5));
IkReal x316=((IkReal(1.00000000000000))*(cj5)*(r00)*(sj0));
if( IKabs(((gconst20)*(((((IkReal(-1.00000000000000))*(r12)*(x311)*(x312)))+(((x309)*(x311)))+(((x309)*(x310)))+(((IkReal(-1.00000000000000))*(r12)*(x310)*(x312))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst20)*(((((IkReal(-1.00000000000000))*(x311)*(x312)*(x313)))+(((IkReal(-1.00000000000000))*(x310)*(x312)*(x313)))+(((x310)*(x314)))+(((x310)*(x315)))+(((IkReal(-1.00000000000000))*(x310)*(x316)))+(((x311)*(x314)))+(((x311)*(x315)))+(((IkReal(-1.00000000000000))*(x311)*(x316))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst20)*(((((IkReal(-1.00000000000000))*(r12)*(x311)*(x312)))+(((x309)*(x311)))+(((x309)*(x310)))+(((IkReal(-1.00000000000000))*(r12)*(x310)*(x312)))))), ((gconst20)*(((((IkReal(-1.00000000000000))*(x311)*(x312)*(x313)))+(((IkReal(-1.00000000000000))*(x310)*(x312)*(x313)))+(((x310)*(x314)))+(((x310)*(x315)))+(((IkReal(-1.00000000000000))*(x310)*(x316)))+(((x311)*(x314)))+(((x311)*(x315)))+(((IkReal(-1.00000000000000))*(x311)*(x316)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x317=IKsin(j4);
IkReal x318=IKcos(j4);
IkReal x319=((cj1)*(cj2));
IkReal x320=((r12)*(sj0));
IkReal x321=((r01)*(sj5));
IkReal x322=((IkReal(1.00000000000000))*(sj2));
IkReal x323=((r02)*(sj0));
IkReal x324=((cj2)*(sj1));
IkReal x325=((r21)*(sj5));
IkReal x326=((cj5)*(r10));
IkReal x327=((r11)*(sj5));
IkReal x328=((r00)*(sj0));
IkReal x329=((sj1)*(x322));
IkReal x330=((IkReal(1.00000000000000))*(x317));
IkReal x331=((cj0)*(x318));
IkReal x332=((cj5)*(x317));
IkReal x333=((IkReal(1.00000000000000))*(x318));
IkReal x334=((cj0)*(x317));
IkReal x335=((cj5)*(x318));
evalcond[0]=((((cj1)*(sj2)))+(x324)+(((r20)*(x332)))+(((IkReal(-1.00000000000000))*(x325)*(x330)))+(((r22)*(x318))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x329)))+(x319)+(((r20)*(x335)))+(((IkReal(-1.00000000000000))*(x325)*(x333)))+(((IkReal(-1.00000000000000))*(r22)*(x330))));
evalcond[2]=((((x318)*(x323)))+(((IkReal(-1.00000000000000))*(sj0)*(x321)*(x330)))+(((IkReal(-1.00000000000000))*(cj0)*(x326)*(x330)))+(((IkReal(-1.00000000000000))*(r12)*(x331)))+(((x327)*(x334)))+(((x328)*(x332))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj0)*(x321)*(x333)))+(((r12)*(x334)))+(((x327)*(x331)))+(((x328)*(x335)))+(((IkReal(-1.00000000000000))*(x323)*(x330)))+(((IkReal(-1.00000000000000))*(x326)*(x331))));
evalcond[4]=((((x318)*(x320)))+(((IkReal(-1.00000000000000))*(cj0)*(x321)*(x330)))+(((cj0)*(r00)*(x332)))+(((r02)*(x331)))+(((IkReal(-1.00000000000000))*(x329)))+(((sj0)*(x317)*(x326)))+(x319)+(((IkReal(-1.00000000000000))*(sj0)*(x327)*(x330))));
evalcond[5]=((((cj5)*(r00)*(x331)))+(((sj0)*(x318)*(x326)))+(((IkReal(-1.00000000000000))*(cj1)*(x322)))+(((IkReal(-1.00000000000000))*(x324)))+(((IkReal(-1.00000000000000))*(x321)*(x331)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x330)))+(((IkReal(-1.00000000000000))*(x320)*(x330)))+(((IkReal(-1.00000000000000))*(sj0)*(x327)*(x333))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x336=((cj2)*(sj1));
IkReal x337=((cj1)*(sj2));
IkReal x338=((IkReal(1.00000000000000))*(r22));
IkReal x339=((sj1)*(sj2));
IkReal x340=((r21)*(sj5));
IkReal x341=((cj1)*(cj2));
IkReal x342=((IkReal(1.00000000000000))*(cj5)*(r20));
if( IKabs(((gconst19)*(((((x336)*(x340)))+(((x337)*(x340)))+(((IkReal(-1.00000000000000))*(x336)*(x342)))+(((IkReal(-1.00000000000000))*(x337)*(x342)))+(((IkReal(-1.00000000000000))*(x338)*(x339)))+(((r22)*(x341))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst19)*(((((IkReal(-1.00000000000000))*(x337)*(x338)))+(((IkReal(-1.00000000000000))*(x339)*(x340)))+(((IkReal(-1.00000000000000))*(x341)*(x342)))+(((x340)*(x341)))+(((cj5)*(r20)*(x339)))+(((IkReal(-1.00000000000000))*(x336)*(x338))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst19)*(((((x336)*(x340)))+(((x337)*(x340)))+(((IkReal(-1.00000000000000))*(x336)*(x342)))+(((IkReal(-1.00000000000000))*(x337)*(x342)))+(((IkReal(-1.00000000000000))*(x338)*(x339)))+(((r22)*(x341)))))), ((gconst19)*(((((IkReal(-1.00000000000000))*(x337)*(x338)))+(((IkReal(-1.00000000000000))*(x339)*(x340)))+(((IkReal(-1.00000000000000))*(x341)*(x342)))+(((x340)*(x341)))+(((cj5)*(r20)*(x339)))+(((IkReal(-1.00000000000000))*(x336)*(x338)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x343=IKsin(j4);
IkReal x344=IKcos(j4);
IkReal x345=((cj1)*(cj2));
IkReal x346=((r12)*(sj0));
IkReal x347=((r01)*(sj5));
IkReal x348=((IkReal(1.00000000000000))*(sj2));
IkReal x349=((r02)*(sj0));
IkReal x350=((cj2)*(sj1));
IkReal x351=((r21)*(sj5));
IkReal x352=((cj5)*(r10));
IkReal x353=((r11)*(sj5));
IkReal x354=((r00)*(sj0));
IkReal x355=((sj1)*(x348));
IkReal x356=((IkReal(1.00000000000000))*(x343));
IkReal x357=((cj0)*(x344));
IkReal x358=((cj5)*(x343));
IkReal x359=((IkReal(1.00000000000000))*(x344));
IkReal x360=((cj0)*(x343));
IkReal x361=((cj5)*(x344));
evalcond[0]=((((cj1)*(sj2)))+(((r22)*(x344)))+(x350)+(((IkReal(-1.00000000000000))*(x351)*(x356)))+(((r20)*(x358))));
evalcond[1]=((((r20)*(x361)))+(((IkReal(-1.00000000000000))*(r22)*(x356)))+(((IkReal(-1.00000000000000))*(x355)))+(x345)+(((IkReal(-1.00000000000000))*(x351)*(x359))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r12)*(x357)))+(((x353)*(x360)))+(((x354)*(x358)))+(((x344)*(x349)))+(((IkReal(-1.00000000000000))*(cj0)*(x352)*(x356)))+(((IkReal(-1.00000000000000))*(sj0)*(x347)*(x356))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x352)*(x357)))+(((x353)*(x357)))+(((IkReal(-1.00000000000000))*(x349)*(x356)))+(((r12)*(x360)))+(((x354)*(x361)))+(((IkReal(-1.00000000000000))*(sj0)*(x347)*(x359))));
evalcond[4]=((((IkReal(-1.00000000000000))*(sj0)*(x353)*(x356)))+(((IkReal(-1.00000000000000))*(x355)))+(((IkReal(-1.00000000000000))*(cj0)*(x347)*(x356)))+(x345)+(((x344)*(x346)))+(((sj0)*(x343)*(x352)))+(((cj0)*(r00)*(x358)))+(((r02)*(x357))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x347)*(x357)))+(((IkReal(-1.00000000000000))*(sj0)*(x353)*(x359)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x356)))+(((IkReal(-1.00000000000000))*(cj1)*(x348)))+(((IkReal(-1.00000000000000))*(x346)*(x356)))+(((IkReal(-1.00000000000000))*(x350)))+(((sj0)*(x344)*(x352)))+(((cj5)*(r00)*(x357))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
IkReal x362=((IkReal(1.00000000000000))*(cj5));
IkReal x363=((IkReal(0.00200000000000000))*(cj0));
IkReal x364=((cj5)*(r11));
IkReal x365=((r10)*(sj5));
IkReal x366=((r01)*(sj0));
IkReal x367=((IkReal(1.00000000000000))*(sj5));
IkReal x368=((sj0)*(x367));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r21)*(x362)))+(((IkReal(-1.00000000000000))*(r20)*(x367))));
evalcond[2]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x362)*(x366)))+(((IkReal(-1.00000000000000))*(r00)*(x368)))+(((cj0)*(x365)))+(((cj0)*(x364))));
evalcond[3]=((IkReal(0.0120000000000000))+(((IkReal(-0.00200000000000000))*(cj5)*(x366)))+(((IkReal(-0.00200000000000000))*(r00)*(sj0)*(sj5)))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py)))+(((x363)*(x364)))+(((x363)*(x365))));
evalcond[4]=((((IkReal(-1.00000000000000))*(sj0)*(x365)))+(((IkReal(-1.00000000000000))*(r11)*(sj0)*(x362)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)*(x362)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x367))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst21;
gconst21=IKsign(((((IkReal(-0.994850000000000))*((sj1)*(sj1))))+(((IkReal(-0.994850000000000))*((cj1)*(cj1))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((sj1)*(sj1))))+(((IkReal(-1.00000000000000))*((cj1)*(cj1)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x369=((IkReal(1.00000000000000))*(cj0));
if( IKabs(((((r02)*(sj0)))+(((IkReal(-1.00000000000000))*(r12)*(x369))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj5)*(r00)*(sj0)))+(((cj0)*(r11)*(sj5)))+(((IkReal(-1.00000000000000))*(cj5)*(r10)*(x369)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(sj5))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x370=IKatan2(((((r02)*(sj0)))+(((IkReal(-1.00000000000000))*(r12)*(x369)))), ((((cj5)*(r00)*(sj0)))+(((cj0)*(r11)*(sj5)))+(((IkReal(-1.00000000000000))*(cj5)*(r10)*(x369)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(sj5)))));
j4array[0]=((IkReal(-1.00000000000000))*(x370));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x370))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x371=IKcos(j4);
IkReal x372=IKsin(j4);
IkReal x373=((IkReal(1.00000000000000))*(x371));
evalcond[0]=((((cj0)*(r11)*(sj5)*(x371)))+(((cj5)*(r00)*(sj0)*(x371)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(sj5)*(x373)))+(((cj0)*(r12)*(x372)))+(((IkReal(-1.00000000000000))*(r02)*(sj0)*(x372)))+(((IkReal(-1.00000000000000))*(cj0)*(cj5)*(r10)*(x373))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst22;
gconst22=IKsign(((((IkReal(-1.00000000000000))*((sj1)*(sj1))))+(((IkReal(-1.00000000000000))*((cj1)*(cj1))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((sj1)*(sj1))))+(((IkReal(-1.00000000000000))*((cj1)*(cj1)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst23;
gconst23=IKsign(((((IkReal(0.169000000000000))*((cj1)*(cj1))))+(((IkReal(0.169000000000000))*((sj1)*(sj1))))));
dummyeval[0]=(((sj1)*(sj1))+((cj1)*(cj1)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x374=((cj4)*(r22));
IkReal x375=((IkReal(0.983000000000000))*(cj1));
IkReal x376=((IkReal(0.169000000000000))*(sj1));
IkReal x377=((IkReal(0.983000000000000))*(sj1));
IkReal x378=((cj1)*(sj1));
IkReal x379=((IkReal(0.169000000000000))*(cj1));
IkReal x380=((IkReal(0.00200000000000000))*(sj1));
IkReal x381=((r20)*(sj5));
IkReal x382=((cj5)*(r21));
IkReal x383=((IkReal(0.00200000000000000))*(cj1));
IkReal x384=((r21)*(sj4)*(sj5));
IkReal x385=((cj5)*(r20)*(sj4));
if( IKabs(((gconst23)*(((((IkReal(1.00400000000000))*(x378)))+(((x377)*(x384)))+(((IkReal(-1.00000000000000))*(x380)*(x382)))+(((IkReal(-1.00000000000000))*(x380)*(x381)))+(((IkReal(-1.00000000000000))*(x379)*(x385)))+(((IkReal(-1.00000000000000))*(x374)*(x379)))+(((IkReal(-1.00000000000000))*(x374)*(x377)))+(((x379)*(x384)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)))+(((IkReal(-1.00000000000000))*(x377)*(x385)))+(((IkReal(-0.00400000000000000))*((sj1)*(sj1)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst23)*(((((x376)*(x384)))+(((IkReal(-1.00000000000000))*(x376)*(x385)))+(((IkReal(-1.00000000000000))*(x375)*(x384)))+(((cj1)*(pz)))+(((IkReal(-1.00400000000000))*((cj1)*(cj1))))+(((IkReal(-1.00000000000000))*(x374)*(x376)))+(((x382)*(x383)))+(((IkReal(0.00400000000000000))*(x378)))+(((x374)*(x375)))+(((x375)*(x385)))+(((x381)*(x383))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst23)*(((((IkReal(1.00400000000000))*(x378)))+(((x377)*(x384)))+(((IkReal(-1.00000000000000))*(x380)*(x382)))+(((IkReal(-1.00000000000000))*(x380)*(x381)))+(((IkReal(-1.00000000000000))*(x379)*(x385)))+(((IkReal(-1.00000000000000))*(x374)*(x379)))+(((IkReal(-1.00000000000000))*(x374)*(x377)))+(((x379)*(x384)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)))+(((IkReal(-1.00000000000000))*(x377)*(x385)))+(((IkReal(-0.00400000000000000))*((sj1)*(sj1))))))), ((gconst23)*(((((x376)*(x384)))+(((IkReal(-1.00000000000000))*(x376)*(x385)))+(((IkReal(-1.00000000000000))*(x375)*(x384)))+(((cj1)*(pz)))+(((IkReal(-1.00400000000000))*((cj1)*(cj1))))+(((IkReal(-1.00000000000000))*(x374)*(x376)))+(((x382)*(x383)))+(((IkReal(0.00400000000000000))*(x378)))+(((x374)*(x375)))+(((x375)*(x385)))+(((x381)*(x383)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x386=IKsin(j2);
IkReal x387=IKcos(j2);
IkReal x388=((cj0)*(r00));
IkReal x389=((IkReal(0.00200000000000000))*(sj5));
IkReal x390=((cj4)*(cj5));
IkReal x391=((IkReal(1.00000000000000))*(sj5));
IkReal x392=((r11)*(sj0));
IkReal x393=((cj0)*(r01));
IkReal x394=((cj5)*(sj4));
IkReal x395=((IkReal(0.00200000000000000))*(cj5));
IkReal x396=((r10)*(sj0));
IkReal x397=((IkReal(1.00000000000000))*(sj4));
IkReal x398=((r12)*(sj0));
IkReal x399=((cj0)*(r02));
IkReal x400=((sj1)*(x387));
IkReal x401=((cj1)*(x386));
IkReal x402=((cj1)*(x387));
IkReal x403=((sj1)*(x386));
IkReal x404=((x401)+(x400));
evalcond[0]=((((r20)*(x394)))+(((cj4)*(r22)))+(((IkReal(-1.00000000000000))*(r21)*(sj4)*(x391)))+(x404));
evalcond[1]=((((r20)*(x390)))+(((IkReal(-1.00000000000000))*(cj4)*(r21)*(x391)))+(x403)+(((IkReal(-1.00000000000000))*(r22)*(x397)))+(((IkReal(-1.00000000000000))*(x402))));
evalcond[2]=((((IkReal(1.00400000000000))*(cj1)))+(((IkReal(-1.00000000000000))*(r21)*(x395)))+(((IkReal(0.169000000000000))*(x402)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(r20)*(x389)))+(((IkReal(-0.169000000000000))*(x403)))+(((IkReal(-0.00400000000000000))*(sj1)))+(((IkReal(0.983000000000000))*(x400)))+(((IkReal(0.983000000000000))*(x401))));
evalcond[3]=((((cj4)*(x398)))+(((cj4)*(x399)))+(((x394)*(x396)))+(x402)+(((IkReal(-1.00000000000000))*(sj4)*(x391)*(x392)))+(((IkReal(-1.00000000000000))*(sj4)*(x391)*(x393)))+(((IkReal(-1.00000000000000))*(x403)))+(((x388)*(x394))));
evalcond[4]=((x404)+(((IkReal(-1.00000000000000))*(x397)*(x399)))+(((IkReal(-1.00000000000000))*(x397)*(x398)))+(((IkReal(-1.00000000000000))*(cj4)*(x391)*(x393)))+(((IkReal(-1.00000000000000))*(cj4)*(x391)*(x392)))+(((x390)*(x396)))+(((x388)*(x390))));
evalcond[5]=((IkReal(0.424000000000000))+(((IkReal(-1.00400000000000))*(sj1)))+(((IkReal(-1.00000000000000))*(x389)*(x396)))+(((IkReal(-0.00400000000000000))*(cj1)))+(((IkReal(-0.169000000000000))*(x401)))+(((IkReal(-0.169000000000000))*(x400)))+(((IkReal(-1.00000000000000))*(py)*(sj0)))+(((IkReal(-0.983000000000000))*(x403)))+(((IkReal(-1.00000000000000))*(x388)*(x389)))+(((IkReal(-1.00000000000000))*(x393)*(x395)))+(((IkReal(-1.00000000000000))*(x392)*(x395)))+(((IkReal(-1.00000000000000))*(cj0)*(px)))+(((IkReal(0.983000000000000))*(x402))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x405=((cj1)*(cj4));
IkReal x406=((r21)*(sj5));
IkReal x407=((r22)*(sj1));
IkReal x408=((cj1)*(sj4));
IkReal x409=((cj5)*(r20));
IkReal x410=((IkReal(1.00000000000000))*(sj4));
IkReal x411=((cj4)*(sj1));
if( IKabs(((gconst22)*(((((r22)*(x405)))+(((x409)*(x411)))+(((x408)*(x409)))+(((IkReal(-1.00000000000000))*(x406)*(x411)))+(((IkReal(-1.00000000000000))*(x406)*(x408)))+(((IkReal(-1.00000000000000))*(x407)*(x410))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst22)*(((((x405)*(x406)))+(((r22)*(x408)))+(((sj1)*(sj4)*(x409)))+(((IkReal(-1.00000000000000))*(sj1)*(x406)*(x410)))+(((cj4)*(x407)))+(((IkReal(-1.00000000000000))*(x405)*(x409))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst22)*(((((r22)*(x405)))+(((x409)*(x411)))+(((x408)*(x409)))+(((IkReal(-1.00000000000000))*(x406)*(x411)))+(((IkReal(-1.00000000000000))*(x406)*(x408)))+(((IkReal(-1.00000000000000))*(x407)*(x410)))))), ((gconst22)*(((((x405)*(x406)))+(((r22)*(x408)))+(((sj1)*(sj4)*(x409)))+(((IkReal(-1.00000000000000))*(sj1)*(x406)*(x410)))+(((cj4)*(x407)))+(((IkReal(-1.00000000000000))*(x405)*(x409)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x412=IKsin(j2);
IkReal x413=IKcos(j2);
IkReal x414=((cj0)*(r00));
IkReal x415=((IkReal(0.00200000000000000))*(sj5));
IkReal x416=((cj4)*(cj5));
IkReal x417=((IkReal(1.00000000000000))*(sj5));
IkReal x418=((r11)*(sj0));
IkReal x419=((cj0)*(r01));
IkReal x420=((cj5)*(sj4));
IkReal x421=((IkReal(0.00200000000000000))*(cj5));
IkReal x422=((r10)*(sj0));
IkReal x423=((IkReal(1.00000000000000))*(sj4));
IkReal x424=((r12)*(sj0));
IkReal x425=((cj0)*(r02));
IkReal x426=((sj1)*(x413));
IkReal x427=((cj1)*(x412));
IkReal x428=((cj1)*(x413));
IkReal x429=((sj1)*(x412));
IkReal x430=((x427)+(x426));
evalcond[0]=((((r20)*(x420)))+(((cj4)*(r22)))+(((IkReal(-1.00000000000000))*(r21)*(sj4)*(x417)))+(x430));
evalcond[1]=((((IkReal(-1.00000000000000))*(x428)))+(x429)+(((IkReal(-1.00000000000000))*(cj4)*(r21)*(x417)))+(((r20)*(x416)))+(((IkReal(-1.00000000000000))*(r22)*(x423))));
evalcond[2]=((((IkReal(0.169000000000000))*(x428)))+(((IkReal(1.00400000000000))*(cj1)))+(((IkReal(0.983000000000000))*(x426)))+(((IkReal(0.983000000000000))*(x427)))+(((IkReal(-0.169000000000000))*(x429)))+(((IkReal(-1.00000000000000))*(r20)*(x415)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(r21)*(x421)))+(((IkReal(-0.00400000000000000))*(sj1))));
evalcond[3]=((((x420)*(x422)))+(((IkReal(-1.00000000000000))*(x429)))+(((x414)*(x420)))+(((IkReal(-1.00000000000000))*(sj4)*(x417)*(x418)))+(((IkReal(-1.00000000000000))*(sj4)*(x417)*(x419)))+(((cj4)*(x424)))+(((cj4)*(x425)))+(x428));
evalcond[4]=((((x414)*(x416)))+(((x416)*(x422)))+(((IkReal(-1.00000000000000))*(cj4)*(x417)*(x418)))+(((IkReal(-1.00000000000000))*(cj4)*(x417)*(x419)))+(x430)+(((IkReal(-1.00000000000000))*(x423)*(x424)))+(((IkReal(-1.00000000000000))*(x423)*(x425))));
evalcond[5]=((IkReal(0.424000000000000))+(((IkReal(0.983000000000000))*(x428)))+(((IkReal(-1.00400000000000))*(sj1)))+(((IkReal(-0.169000000000000))*(x427)))+(((IkReal(-0.169000000000000))*(x426)))+(((IkReal(-0.983000000000000))*(x429)))+(((IkReal(-0.00400000000000000))*(cj1)))+(((IkReal(-1.00000000000000))*(py)*(sj0)))+(((IkReal(-1.00000000000000))*(x419)*(x421)))+(((IkReal(-1.00000000000000))*(x418)*(x421)))+(((IkReal(-1.00000000000000))*(x414)*(x415)))+(((IkReal(-1.00000000000000))*(x415)*(x422)))+(((IkReal(-1.00000000000000))*(cj0)*(px))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x431=(sj1)*(sj1);
IkReal x432=(cj1)*(cj1);
IkReal x433=((IkReal(0.000338000000000000))*(sj1));
IkReal x434=((r20)*(sj5));
IkReal x435=((py)*(sj0));
IkReal x436=((IkReal(0.983000000000000))*(cj1));
IkReal x437=((cj0)*(px));
IkReal x438=((IkReal(0.983000000000000))*(sj1));
IkReal x439=((r11)*(sj0));
IkReal x440=((IkReal(0.169000000000000))*(cj1));
IkReal x441=((IkReal(0.169000000000000))*(sj1));
IkReal x442=((cj0)*(r01));
IkReal x443=((IkReal(0.000338000000000000))*(cj1));
IkReal x444=((IkReal(0.00196600000000000))*(cj1));
IkReal x445=((IkReal(0.00196600000000000))*(sj1));
IkReal x446=((cj5)*(x443));
IkReal x447=((cj5)*(x445));
IkReal x448=((cj0)*(r00)*(sj5));
IkReal x449=((r10)*(sj0)*(sj5));
IkReal x450=((cj5)*(x444));
IkReal x451=((IkReal(0.00196600000000000))*(x449));
if( IKabs(((gconst21)*(((((x439)*(x446)))+(((x439)*(x447)))+(((x435)*(x440)))+(((IkReal(-1.00000000000000))*(x434)*(x444)))+(((pz)*(x441)))+(((IkReal(-0.416792000000000))*(sj1)))+(((IkReal(-1.00000000000000))*(pz)*(x436)))+(((x445)*(x449)))+(((x445)*(x448)))+(((x442)*(x446)))+(((x442)*(x447)))+(((x433)*(x434)))+(((IkReal(0.987608000000000))*(x432)))+(((IkReal(0.987608000000000))*(x431)))+(((IkReal(-1.00000000000000))*(r21)*(x450)))+(((x443)*(x448)))+(((x443)*(x449)))+(((x437)*(x438)))+(((cj5)*(r21)*(x433)))+(((x437)*(x440)))+(((IkReal(-0.0716560000000000))*(cj1)))+(((x435)*(x438))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst21)*(((((IkReal(0.416792000000000))*(cj1)))+(((x435)*(x441)))+(((IkReal(-1.00000000000000))*(x444)*(x448)))+(((IkReal(-1.00000000000000))*(x444)*(x449)))+(((IkReal(-1.00000000000000))*(x439)*(x450)))+(((IkReal(-1.00000000000000))*(x435)*(x436)))+(((cj5)*(x433)*(x442)))+(((IkReal(-1.00000000000000))*(x434)*(x445)))+(((IkReal(-1.00000000000000))*(x434)*(x443)))+(((cj5)*(x433)*(x439)))+(((IkReal(-1.00000000000000))*(x436)*(x437)))+(((IkReal(0.165744000000000))*(x431)))+(((IkReal(0.165744000000000))*(x432)))+(((IkReal(-1.00000000000000))*(x442)*(x450)))+(((IkReal(-1.00000000000000))*(r21)*(x446)))+(((IkReal(-1.00000000000000))*(r21)*(x447)))+(((IkReal(-1.00000000000000))*(pz)*(x438)))+(((IkReal(-1.00000000000000))*(pz)*(x440)))+(((x437)*(x441)))+(((IkReal(-0.0716560000000000))*(sj1)))+(((x433)*(x448)))+(((x433)*(x449))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst21)*(((((x439)*(x446)))+(((x439)*(x447)))+(((x435)*(x440)))+(((IkReal(-1.00000000000000))*(x434)*(x444)))+(((pz)*(x441)))+(((IkReal(-0.416792000000000))*(sj1)))+(((IkReal(-1.00000000000000))*(pz)*(x436)))+(((x445)*(x449)))+(((x445)*(x448)))+(((x442)*(x446)))+(((x442)*(x447)))+(((x433)*(x434)))+(((IkReal(0.987608000000000))*(x432)))+(((IkReal(0.987608000000000))*(x431)))+(((IkReal(-1.00000000000000))*(r21)*(x450)))+(((x443)*(x448)))+(((x443)*(x449)))+(((x437)*(x438)))+(((cj5)*(r21)*(x433)))+(((x437)*(x440)))+(((IkReal(-0.0716560000000000))*(cj1)))+(((x435)*(x438)))))), ((gconst21)*(((((IkReal(0.416792000000000))*(cj1)))+(((x435)*(x441)))+(((IkReal(-1.00000000000000))*(x444)*(x448)))+(((IkReal(-1.00000000000000))*(x444)*(x449)))+(((IkReal(-1.00000000000000))*(x439)*(x450)))+(((IkReal(-1.00000000000000))*(x435)*(x436)))+(((cj5)*(x433)*(x442)))+(((IkReal(-1.00000000000000))*(x434)*(x445)))+(((IkReal(-1.00000000000000))*(x434)*(x443)))+(((cj5)*(x433)*(x439)))+(((IkReal(-1.00000000000000))*(x436)*(x437)))+(((IkReal(0.165744000000000))*(x431)))+(((IkReal(0.165744000000000))*(x432)))+(((IkReal(-1.00000000000000))*(x442)*(x450)))+(((IkReal(-1.00000000000000))*(r21)*(x446)))+(((IkReal(-1.00000000000000))*(r21)*(x447)))+(((IkReal(-1.00000000000000))*(pz)*(x438)))+(((IkReal(-1.00000000000000))*(pz)*(x440)))+(((x437)*(x441)))+(((IkReal(-0.0716560000000000))*(sj1)))+(((x433)*(x448)))+(((x433)*(x449)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
IkReal x452=IKcos(j2);
IkReal x453=IKsin(j2);
IkReal x454=((IkReal(0.169000000000000))*(cj1));
IkReal x455=((IkReal(0.00200000000000000))*(cj0));
IkReal x456=((IkReal(0.00200000000000000))*(cj5));
IkReal x457=((IkReal(0.00200000000000000))*(sj5));
IkReal x458=((IkReal(0.169000000000000))*(sj1));
IkReal x459=((IkReal(0.983000000000000))*(x453));
IkReal x460=((IkReal(0.983000000000000))*(x452));
evalcond[0]=((((x452)*(x454)))+(((IkReal(1.00400000000000))*(cj1)))+(((cj1)*(x459)))+(((IkReal(-1.00000000000000))*(pz)))+(((sj1)*(x460)))+(((IkReal(-1.00000000000000))*(x453)*(x458)))+(((IkReal(-1.00000000000000))*(r20)*(x457)))+(((IkReal(-1.00000000000000))*(r21)*(x456)))+(((IkReal(-0.00400000000000000))*(sj1))));
evalcond[1]=((IkReal(0.424000000000000))+(((IkReal(-1.00000000000000))*(r00)*(sj5)*(x455)))+(((IkReal(-1.00000000000000))*(r11)*(sj0)*(x456)))+(((IkReal(-1.00400000000000))*(sj1)))+(((cj1)*(x460)))+(((IkReal(-1.00000000000000))*(cj5)*(r01)*(x455)))+(((IkReal(-1.00000000000000))*(sj1)*(x459)))+(((IkReal(-0.00400000000000000))*(cj1)))+(((IkReal(-1.00000000000000))*(x452)*(x458)))+(((IkReal(-1.00000000000000))*(x453)*(x454)))+(((IkReal(-1.00000000000000))*(py)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(px)))+(((IkReal(-1.00000000000000))*(r10)*(sj0)*(x457))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst24;
gconst24=IKsign((((r22)*(r22))+((((cj5)*(cj5))*((r20)*(r20))))+(((IkReal(-2.00000000000000))*(cj5)*(r20)*(r21)*(sj5)))+((((r21)*(r21))*((sj5)*(sj5))))));
dummyeval[0]=(((r22)*(r22))+((((cj5)*(cj5))*((r20)*(r20))))+(((IkReal(-2.00000000000000))*(cj5)*(r20)*(r21)*(sj5)))+((((r21)*(r21))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst25;
IkReal x461=((cj0)*(sj5));
IkReal x462=((sj0)*(sj5));
IkReal x463=((IkReal(1.00000000000000))*(r22));
IkReal x464=((cj0)*(cj5));
IkReal x465=((cj5)*(sj0));
gconst25=IKsign(((((IkReal(-1.00000000000000))*(r02)*(r20)*(x465)))+(((r11)*(r22)*(x461)))+(((r00)*(r22)*(x465)))+(((IkReal(-1.00000000000000))*(r10)*(x463)*(x464)))+(((IkReal(-1.00000000000000))*(r12)*(r21)*(x461)))+(((IkReal(-1.00000000000000))*(r01)*(x462)*(x463)))+(((r02)*(r21)*(x462)))+(((r12)*(r20)*(x464)))));
IkReal x466=((cj0)*(sj5));
IkReal x467=((sj0)*(sj5));
IkReal x468=((IkReal(1.00000000000000))*(r22));
IkReal x469=((cj0)*(cj5));
IkReal x470=((cj5)*(sj0));
dummyeval[0]=((((IkReal(-1.00000000000000))*(r01)*(x467)*(x468)))+(((IkReal(-1.00000000000000))*(r02)*(r20)*(x470)))+(((r11)*(r22)*(x466)))+(((r00)*(r22)*(x470)))+(((IkReal(-1.00000000000000))*(r10)*(x468)*(x469)))+(((IkReal(-1.00000000000000))*(r12)*(r21)*(x466)))+(((r02)*(r21)*(x467)))+(((r12)*(r20)*(x469))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x471=((r02)*(sj0));
IkReal x472=((cj2)*(sj1));
IkReal x473=((cj1)*(sj2));
IkReal x474=((IkReal(1.00000000000000))*(cj0));
IkReal x475=((r11)*(sj5));
IkReal x476=((cj0)*(cj5)*(r10));
IkReal x477=((r01)*(sj0)*(sj5));
IkReal x478=((IkReal(1.00000000000000))*(cj5)*(r00)*(sj0));
if( IKabs(((gconst25)*(((((x471)*(x472)))+(((x471)*(x473)))+(((IkReal(-1.00000000000000))*(r12)*(x472)*(x474)))+(((IkReal(-1.00000000000000))*(r12)*(x473)*(x474))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst25)*(((((IkReal(-1.00000000000000))*(x472)*(x474)*(x475)))+(((IkReal(-1.00000000000000))*(x473)*(x474)*(x475)))+(((x472)*(x476)))+(((x472)*(x477)))+(((x473)*(x476)))+(((x473)*(x477)))+(((IkReal(-1.00000000000000))*(x472)*(x478)))+(((IkReal(-1.00000000000000))*(x473)*(x478))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst25)*(((((x471)*(x472)))+(((x471)*(x473)))+(((IkReal(-1.00000000000000))*(r12)*(x472)*(x474)))+(((IkReal(-1.00000000000000))*(r12)*(x473)*(x474)))))), ((gconst25)*(((((IkReal(-1.00000000000000))*(x472)*(x474)*(x475)))+(((IkReal(-1.00000000000000))*(x473)*(x474)*(x475)))+(((x472)*(x476)))+(((x472)*(x477)))+(((x473)*(x476)))+(((x473)*(x477)))+(((IkReal(-1.00000000000000))*(x472)*(x478)))+(((IkReal(-1.00000000000000))*(x473)*(x478)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x479=IKsin(j4);
IkReal x480=IKcos(j4);
IkReal x481=((cj2)*(sj1));
IkReal x482=((cj1)*(sj2));
IkReal x483=((r12)*(sj0));
IkReal x484=((r01)*(sj5));
IkReal x485=((sj1)*(sj2));
IkReal x486=((cj1)*(cj2));
IkReal x487=((r21)*(sj5));
IkReal x488=((r02)*(sj0));
IkReal x489=((cj5)*(r10));
IkReal x490=((r11)*(sj5));
IkReal x491=((r00)*(sj0));
IkReal x492=((IkReal(1.00000000000000))*(x479));
IkReal x493=((cj0)*(x480));
IkReal x494=((cj5)*(x479));
IkReal x495=((IkReal(1.00000000000000))*(x480));
IkReal x496=((cj0)*(x479));
IkReal x497=((cj5)*(x480));
IkReal x498=((x481)+(x482));
evalcond[0]=((((r22)*(x480)))+(x498)+(((IkReal(-1.00000000000000))*(x487)*(x492)))+(((r20)*(x494))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x486)))+(x485)+(((IkReal(-1.00000000000000))*(x487)*(x495)))+(((IkReal(-1.00000000000000))*(r22)*(x492)))+(((r20)*(x497))));
evalcond[2]=((((x491)*(x494)))+(((IkReal(-1.00000000000000))*(r12)*(x493)))+(((IkReal(-1.00000000000000))*(cj0)*(x489)*(x492)))+(((x490)*(x496)))+(((IkReal(-1.00000000000000))*(sj0)*(x484)*(x492)))+(((x480)*(x488))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x488)*(x492)))+(((x491)*(x497)))+(((IkReal(-1.00000000000000))*(x489)*(x493)))+(((x490)*(x493)))+(((IkReal(-1.00000000000000))*(sj0)*(x484)*(x495)))+(((r12)*(x496))));
evalcond[4]=((((r02)*(x493)))+(((IkReal(-1.00000000000000))*(x485)))+(x486)+(((x480)*(x483)))+(((IkReal(-1.00000000000000))*(cj0)*(x484)*(x492)))+(((IkReal(-1.00000000000000))*(sj0)*(x490)*(x492)))+(((cj0)*(r00)*(x494)))+(((sj0)*(x479)*(x489))));
evalcond[5]=((((sj0)*(x480)*(x489)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x492)))+(((IkReal(-1.00000000000000))*(x483)*(x492)))+(((IkReal(-1.00000000000000))*(x484)*(x493)))+(x498)+(((IkReal(-1.00000000000000))*(sj0)*(x490)*(x495)))+(((cj5)*(r00)*(x493))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x499=((cj2)*(sj1));
IkReal x500=((cj1)*(sj2));
IkReal x501=((IkReal(1.00000000000000))*(r22));
IkReal x502=((r21)*(sj5));
IkReal x503=((cj1)*(cj2));
IkReal x504=((sj1)*(sj2));
IkReal x505=((IkReal(1.00000000000000))*(cj5)*(r20));
if( IKabs(((gconst24)*(((((x500)*(x502)))+(((IkReal(-1.00000000000000))*(x499)*(x505)))+(((IkReal(-1.00000000000000))*(x501)*(x503)))+(((r22)*(x504)))+(((x499)*(x502)))+(((IkReal(-1.00000000000000))*(x500)*(x505))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst24)*(((((IkReal(-1.00000000000000))*(x499)*(x501)))+(((cj5)*(r20)*(x503)))+(((x502)*(x504)))+(((IkReal(-1.00000000000000))*(x504)*(x505)))+(((IkReal(-1.00000000000000))*(x502)*(x503)))+(((IkReal(-1.00000000000000))*(x500)*(x501))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst24)*(((((x500)*(x502)))+(((IkReal(-1.00000000000000))*(x499)*(x505)))+(((IkReal(-1.00000000000000))*(x501)*(x503)))+(((r22)*(x504)))+(((x499)*(x502)))+(((IkReal(-1.00000000000000))*(x500)*(x505)))))), ((gconst24)*(((((IkReal(-1.00000000000000))*(x499)*(x501)))+(((cj5)*(r20)*(x503)))+(((x502)*(x504)))+(((IkReal(-1.00000000000000))*(x504)*(x505)))+(((IkReal(-1.00000000000000))*(x502)*(x503)))+(((IkReal(-1.00000000000000))*(x500)*(x501)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x506=IKsin(j4);
IkReal x507=IKcos(j4);
IkReal x508=((cj2)*(sj1));
IkReal x509=((cj1)*(sj2));
IkReal x510=((r12)*(sj0));
IkReal x511=((r01)*(sj5));
IkReal x512=((sj1)*(sj2));
IkReal x513=((cj1)*(cj2));
IkReal x514=((r21)*(sj5));
IkReal x515=((r02)*(sj0));
IkReal x516=((cj5)*(r10));
IkReal x517=((r11)*(sj5));
IkReal x518=((r00)*(sj0));
IkReal x519=((IkReal(1.00000000000000))*(x506));
IkReal x520=((cj0)*(x507));
IkReal x521=((cj5)*(x506));
IkReal x522=((IkReal(1.00000000000000))*(x507));
IkReal x523=((cj0)*(x506));
IkReal x524=((cj5)*(x507));
IkReal x525=((x508)+(x509));
evalcond[0]=((((r20)*(x521)))+(((IkReal(-1.00000000000000))*(x514)*(x519)))+(((r22)*(x507)))+(x525));
evalcond[1]=((((IkReal(-1.00000000000000))*(r22)*(x519)))+(((r20)*(x524)))+(((IkReal(-1.00000000000000))*(x513)))+(x512)+(((IkReal(-1.00000000000000))*(x514)*(x522))));
evalcond[2]=((((x507)*(x515)))+(((IkReal(-1.00000000000000))*(cj0)*(x516)*(x519)))+(((IkReal(-1.00000000000000))*(sj0)*(x511)*(x519)))+(((x517)*(x523)))+(((x518)*(x521)))+(((IkReal(-1.00000000000000))*(r12)*(x520))));
evalcond[3]=((((r12)*(x523)))+(((IkReal(-1.00000000000000))*(sj0)*(x511)*(x522)))+(((x517)*(x520)))+(((IkReal(-1.00000000000000))*(x516)*(x520)))+(((x518)*(x524)))+(((IkReal(-1.00000000000000))*(x515)*(x519))));
evalcond[4]=((((x507)*(x510)))+(((r02)*(x520)))+(((IkReal(-1.00000000000000))*(x512)))+(((sj0)*(x506)*(x516)))+(((cj0)*(r00)*(x521)))+(x513)+(((IkReal(-1.00000000000000))*(sj0)*(x517)*(x519)))+(((IkReal(-1.00000000000000))*(cj0)*(x511)*(x519))));
evalcond[5]=((((sj0)*(x507)*(x516)))+(((IkReal(-1.00000000000000))*(x511)*(x520)))+(x525)+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x519)))+(((IkReal(-1.00000000000000))*(x510)*(x519)))+(((IkReal(-1.00000000000000))*(sj0)*(x517)*(x522)))+(((cj5)*(r00)*(x520))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x526=((sj0)*(sj3));
IkReal x527=((IkReal(1.00000000000000))*(cj0)*(sj3));
if( IKabs(((gconst3)*(((((r02)*(x526)))+(((IkReal(-1.00000000000000))*(r12)*(x527))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((r01)*(sj5)*(x526)))+(((cj0)*(cj5)*(r10)*(sj3)))+(((IkReal(-1.00000000000000))*(r11)*(sj5)*(x527)))+(((IkReal(-1.00000000000000))*(cj5)*(r00)*(x526))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst3)*(((((r02)*(x526)))+(((IkReal(-1.00000000000000))*(r12)*(x527)))))), ((gconst3)*(((((r01)*(sj5)*(x526)))+(((cj0)*(cj5)*(r10)*(sj3)))+(((IkReal(-1.00000000000000))*(r11)*(sj5)*(x527)))+(((IkReal(-1.00000000000000))*(cj5)*(r00)*(x526)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x528=IKsin(j4);
IkReal x529=IKcos(j4);
IkReal x530=((cj5)*(r10));
IkReal x531=((r11)*(sj5));
IkReal x532=((cj5)*(r00));
IkReal x533=((cj0)*(x528));
IkReal x534=((sj0)*(x528));
IkReal x535=((sj0)*(x529));
IkReal x536=((IkReal(1.00000000000000))*(r01)*(sj5));
IkReal x537=((IkReal(1.00000000000000))*(cj0)*(x529));
evalcond[0]=((((r02)*(x535)))+(((IkReal(-1.00000000000000))*(x534)*(x536)))+(((x531)*(x533)))+(((IkReal(-1.00000000000000))*(x530)*(x533)))+(((x532)*(x534)))+(((IkReal(-1.00000000000000))*(r12)*(x537))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r02)*(x534)))+(sj3)+(((cj0)*(x529)*(x531)))+(((IkReal(-1.00000000000000))*(x530)*(x537)))+(((r12)*(x533)))+(((IkReal(-1.00000000000000))*(x535)*(x536)))+(((x532)*(x535))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((((sj3)*((cj1)*(cj1))))+(((sj3)*((sj1)*(sj1))))));
dummyeval[0]=((((sj3)*((cj1)*(cj1))))+(((sj3)*((sj1)*(sj1)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((((cj3)*((cj1)*(cj1))))+(((cj3)*((sj1)*(sj1))))));
dummyeval[0]=((((cj3)*((cj1)*(cj1))))+(((cj3)*((sj1)*(sj1)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x538=((IkReal(1.00000000000000))*(sj0));
IkReal x539=((r12)*(sj4));
IkReal x540=((cj0)*(r11));
IkReal x541=((IkReal(0.00200000000000000))*(cj5));
IkReal x542=((r00)*(sj5));
IkReal x543=((r01)*(sj5));
IkReal x544=((cj0)*(r10));
IkReal x545=((cj4)*(sj0));
IkReal x546=((IkReal(1.00000000000000))*(sj4));
IkReal x547=((cj5)*(r00));
IkReal x548=((cj4)*(sj5));
IkReal x549=((cj4)*(cj5));
IkReal x550=((IkReal(1.00000000000000))*(cj0)*(cj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((((cj5)*(x540)))+(((IkReal(-1.00000000000000))*(x538)*(x542)))+(((IkReal(-1.00000000000000))*(cj5)*(r01)*(x538)))+(((sj5)*(x544))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r22)*(x546)))+(((r20)*(x549)))+(((IkReal(-1.00000000000000))*(r21)*(x548))));
evalcond[3]=((IkReal(0.0120000000000000))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x541)))+(((x540)*(x541)))+(((IkReal(-1.00000000000000))*(px)*(x538)))+(((IkReal(0.00200000000000000))*(sj5)*(x544)))+(((IkReal(-0.00200000000000000))*(sj0)*(x542)))+(((cj0)*(py))));
evalcond[4]=((((IkReal(-1.00000000000000))*(r12)*(x550)))+(((r02)*(x545)))+(((sj4)*(sj5)*(x540)))+(((IkReal(-1.00000000000000))*(sj4)*(x538)*(x543)))+(((IkReal(-1.00000000000000))*(cj5)*(x544)*(x546)))+(((sj0)*(sj4)*(x547))));
evalcond[5]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(cj4)*(x538)*(x543)))+(((IkReal(-1.00000000000000))*(x544)*(x549)))+(((cj0)*(x539)))+(((x540)*(x548)))+(((IkReal(-1.00000000000000))*(r02)*(sj4)*(x538)))+(((x545)*(x547))));
evalcond[6]=((((IkReal(-1.00000000000000))*(cj0)*(r02)*(x546)))+(((IkReal(-1.00000000000000))*(x538)*(x539)))+(((cj5)*(r10)*(x545)))+(((IkReal(-1.00000000000000))*(x543)*(x550)))+(((IkReal(-1.00000000000000))*(r11)*(x538)*(x548)))+(((cj0)*(cj4)*(x547))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign(((((IkReal(-1.00000000000000))*((sj1)*(sj1))))+(((IkReal(-1.00000000000000))*((cj1)*(cj1))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((sj1)*(sj1))))+(((IkReal(-1.00000000000000))*((cj1)*(cj1)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst7;
gconst7=IKsign(((((IkReal(-1.00000000000000))*((sj1)*(sj1))))+(((IkReal(-1.00000000000000))*((cj1)*(cj1))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((sj1)*(sj1))))+(((IkReal(-1.00000000000000))*((cj1)*(cj1)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x551=((IkReal(1.00000000000000))*(sj5));
IkReal x552=((cj1)*(sj0));
IkReal x553=((cj0)*(r00));
IkReal x554=((IkReal(1.00000000000000))*(cj5)*(sj1));
IkReal x555=((IkReal(1.00000000000000))*(cj0)*(cj5)*(r01));
if( IKabs(((gconst7)*(((((IkReal(-1.00000000000000))*(r10)*(x551)*(x552)))+(((IkReal(-1.00000000000000))*(cj1)*(x551)*(x553)))+(((IkReal(-1.00000000000000))*(cj5)*(r11)*(x552)))+(((IkReal(-1.00000000000000))*(cj1)*(x555)))+(((IkReal(-1.00000000000000))*(r21)*(x554)))+(((IkReal(-1.00000000000000))*(r20)*(sj1)*(x551))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst7)*(((((cj1)*(r20)*(sj5)))+(((cj1)*(cj5)*(r21)))+(((IkReal(-1.00000000000000))*(r11)*(sj0)*(x554)))+(((IkReal(-1.00000000000000))*(sj1)*(x551)*(x553)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)*(x554)))+(((IkReal(-1.00000000000000))*(r10)*(sj0)*(sj1)*(x551))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst7)*(((((IkReal(-1.00000000000000))*(r10)*(x551)*(x552)))+(((IkReal(-1.00000000000000))*(cj1)*(x551)*(x553)))+(((IkReal(-1.00000000000000))*(cj5)*(r11)*(x552)))+(((IkReal(-1.00000000000000))*(cj1)*(x555)))+(((IkReal(-1.00000000000000))*(r21)*(x554)))+(((IkReal(-1.00000000000000))*(r20)*(sj1)*(x551)))))), ((gconst7)*(((((cj1)*(r20)*(sj5)))+(((cj1)*(cj5)*(r21)))+(((IkReal(-1.00000000000000))*(r11)*(sj0)*(x554)))+(((IkReal(-1.00000000000000))*(sj1)*(x551)*(x553)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)*(x554)))+(((IkReal(-1.00000000000000))*(r10)*(sj0)*(sj1)*(x551)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x556=IKcos(j2);
IkReal x557=IKsin(j2);
IkReal x558=((cj0)*(r00));
IkReal x559=((IkReal(0.00200000000000000))*(sj5));
IkReal x560=((IkReal(0.983000000000000))*(sj1));
IkReal x561=((IkReal(1.00000000000000))*(sj5));
IkReal x562=((cj5)*(sj4));
IkReal x563=((cj0)*(r01));
IkReal x564=((IkReal(1.00000000000000))*(cj5));
IkReal x565=((r10)*(sj0));
IkReal x566=((IkReal(0.00200000000000000))*(cj5));
IkReal x567=((sj1)*(x556));
IkReal x568=((cj1)*(x557));
IkReal x569=((cj1)*(x556));
IkReal x570=((sj0)*(x561));
IkReal x571=((cj5)*(r11)*(sj0));
IkReal x572=((sj1)*(x557));
IkReal x573=((x568)+(x567));
evalcond[0]=((x572)+(((IkReal(-1.00000000000000))*(x569)))+(((IkReal(-1.00000000000000))*(r21)*(x564)))+(((IkReal(-1.00000000000000))*(r20)*(x561))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r21)*(sj4)*(x561)))+(((cj4)*(r22)))+(x573)+(((r20)*(x562))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x558)*(x561)))+(x573)+(((IkReal(-1.00000000000000))*(x563)*(x564)))+(((IkReal(-1.00000000000000))*(r11)*(sj0)*(x564)))+(((IkReal(-1.00000000000000))*(x561)*(x565))));
evalcond[3]=((((IkReal(0.169000000000000))*(x569)))+(((IkReal(-0.169000000000000))*(x572)))+(((IkReal(1.00400000000000))*(cj1)))+(((x556)*(x560)))+(((IkReal(-1.00000000000000))*(r20)*(x559)))+(((IkReal(0.983000000000000))*(x568)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(r21)*(x566)))+(((IkReal(-0.00400000000000000))*(sj1))));
evalcond[4]=((((IkReal(-1.00000000000000))*(r11)*(sj4)*(x570)))+(((x558)*(x562)))+(((x562)*(x565)))+(((cj0)*(cj4)*(r02)))+(((IkReal(-1.00000000000000))*(x572)))+(x569)+(((IkReal(-1.00000000000000))*(sj4)*(x561)*(x563)))+(((cj4)*(r12)*(sj0))));
evalcond[5]=((IkReal(0.424000000000000))+(((IkReal(-1.00400000000000))*(sj1)))+(((IkReal(0.983000000000000))*(x569)))+(((IkReal(-1.00000000000000))*(x557)*(x560)))+(((IkReal(-0.00400000000000000))*(cj1)))+(((IkReal(-1.00000000000000))*(x559)*(x565)))+(((IkReal(-1.00000000000000))*(x563)*(x566)))+(((IkReal(-1.00000000000000))*(py)*(sj0)))+(((IkReal(-1.00000000000000))*(x558)*(x559)))+(((IkReal(-0.169000000000000))*(x567)))+(((IkReal(-0.169000000000000))*(x568)))+(((IkReal(-1.00000000000000))*(r11)*(sj0)*(x566)))+(((IkReal(-1.00000000000000))*(cj0)*(px))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x574=((IkReal(1.00000000000000))*(sj1));
IkReal x575=((r20)*(sj5));
IkReal x576=((cj1)*(sj4));
IkReal x577=((cj5)*(r20));
IkReal x578=((cj5)*(r21));
IkReal x579=((cj4)*(r22));
IkReal x580=((r21)*(sj5));
if( IKabs(((gconst6)*(((((x576)*(x577)))+(((IkReal(-1.00000000000000))*(x574)*(x575)))+(((IkReal(-1.00000000000000))*(x574)*(x578)))+(((IkReal(-1.00000000000000))*(x576)*(x580)))+(((cj1)*(x579))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst6)*(((((sj1)*(x579)))+(((sj1)*(sj4)*(x577)))+(((IkReal(-1.00000000000000))*(sj4)*(x574)*(x580)))+(((cj1)*(x578)))+(((cj1)*(x575))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst6)*(((((x576)*(x577)))+(((IkReal(-1.00000000000000))*(x574)*(x575)))+(((IkReal(-1.00000000000000))*(x574)*(x578)))+(((IkReal(-1.00000000000000))*(x576)*(x580)))+(((cj1)*(x579)))))), ((gconst6)*(((((sj1)*(x579)))+(((sj1)*(sj4)*(x577)))+(((IkReal(-1.00000000000000))*(sj4)*(x574)*(x580)))+(((cj1)*(x578)))+(((cj1)*(x575)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x581=IKcos(j2);
IkReal x582=IKsin(j2);
IkReal x583=((cj0)*(r00));
IkReal x584=((IkReal(0.00200000000000000))*(sj5));
IkReal x585=((IkReal(0.983000000000000))*(sj1));
IkReal x586=((IkReal(1.00000000000000))*(sj5));
IkReal x587=((cj5)*(sj4));
IkReal x588=((cj0)*(r01));
IkReal x589=((IkReal(1.00000000000000))*(cj5));
IkReal x590=((r10)*(sj0));
IkReal x591=((IkReal(0.00200000000000000))*(cj5));
IkReal x592=((sj1)*(x581));
IkReal x593=((cj1)*(x582));
IkReal x594=((cj1)*(x581));
IkReal x595=((sj0)*(x586));
IkReal x596=((cj5)*(r11)*(sj0));
IkReal x597=((sj1)*(x582));
IkReal x598=((x593)+(x592));
evalcond[0]=((((IkReal(-1.00000000000000))*(x594)))+(((IkReal(-1.00000000000000))*(r21)*(x589)))+(((IkReal(-1.00000000000000))*(r20)*(x586)))+(x597));
evalcond[1]=((((r20)*(x587)))+(((cj4)*(r22)))+(x598)+(((IkReal(-1.00000000000000))*(r21)*(sj4)*(x586))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x586)*(x590)))+(((IkReal(-1.00000000000000))*(r11)*(sj0)*(x589)))+(((IkReal(-1.00000000000000))*(x588)*(x589)))+(((IkReal(-1.00000000000000))*(x583)*(x586)))+(x598));
evalcond[3]=((((x581)*(x585)))+(((IkReal(-1.00000000000000))*(r21)*(x591)))+(((IkReal(0.983000000000000))*(x593)))+(((IkReal(0.169000000000000))*(x594)))+(((IkReal(1.00400000000000))*(cj1)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(r20)*(x584)))+(((IkReal(-0.169000000000000))*(x597)))+(((IkReal(-0.00400000000000000))*(sj1))));
evalcond[4]=((((x583)*(x587)))+(((IkReal(-1.00000000000000))*(sj4)*(x586)*(x588)))+(((IkReal(-1.00000000000000))*(x597)))+(((cj0)*(cj4)*(r02)))+(x594)+(((IkReal(-1.00000000000000))*(r11)*(sj4)*(x595)))+(((x587)*(x590)))+(((cj4)*(r12)*(sj0))));
evalcond[5]=((IkReal(0.424000000000000))+(((IkReal(-1.00000000000000))*(x588)*(x591)))+(((IkReal(-1.00000000000000))*(x582)*(x585)))+(((IkReal(0.983000000000000))*(x594)))+(((IkReal(-1.00000000000000))*(r11)*(sj0)*(x591)))+(((IkReal(-1.00400000000000))*(sj1)))+(((IkReal(-1.00000000000000))*(x583)*(x584)))+(((IkReal(-0.00400000000000000))*(cj1)))+(((IkReal(-1.00000000000000))*(x584)*(x590)))+(((IkReal(-0.169000000000000))*(x593)))+(((IkReal(-0.169000000000000))*(x592)))+(((IkReal(-1.00000000000000))*(py)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(px))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x599=((IkReal(1.00000000000000))*(sj0));
IkReal x600=((r12)*(sj4));
IkReal x601=((cj0)*(r11));
IkReal x602=((IkReal(0.00200000000000000))*(cj5));
IkReal x603=((r00)*(sj5));
IkReal x604=((r01)*(sj5));
IkReal x605=((cj0)*(r10));
IkReal x606=((cj4)*(sj0));
IkReal x607=((IkReal(1.00000000000000))*(sj4));
IkReal x608=((cj5)*(r00));
IkReal x609=((cj4)*(sj5));
IkReal x610=((cj4)*(cj5));
IkReal x611=((IkReal(1.00000000000000))*(cj0)*(cj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((((cj5)*(x601)))+(((IkReal(-1.00000000000000))*(cj5)*(r01)*(x599)))+(((IkReal(-1.00000000000000))*(x599)*(x603)))+(((sj5)*(x605))));
evalcond[2]=((((r20)*(x610)))+(((IkReal(-1.00000000000000))*(r21)*(x609)))+(((IkReal(-1.00000000000000))*(r22)*(x607))));
evalcond[3]=((IkReal(0.0120000000000000))+(((x601)*(x602)))+(((IkReal(-1.00000000000000))*(px)*(x599)))+(((IkReal(0.00200000000000000))*(sj5)*(x605)))+(((IkReal(-0.00200000000000000))*(sj0)*(x603)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x602)))+(((cj0)*(py))));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj5)*(x605)*(x607)))+(((sj4)*(sj5)*(x601)))+(((IkReal(-1.00000000000000))*(r12)*(x611)))+(((sj0)*(sj4)*(x608)))+(((r02)*(x606)))+(((IkReal(-1.00000000000000))*(sj4)*(x599)*(x604))));
evalcond[5]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x605)*(x610)))+(((x601)*(x609)))+(((IkReal(-1.00000000000000))*(r02)*(sj4)*(x599)))+(((x606)*(x608)))+(((cj0)*(x600)))+(((IkReal(-1.00000000000000))*(cj4)*(x599)*(x604))));
evalcond[6]=((((cj5)*(r10)*(x606)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x607)))+(((IkReal(-1.00000000000000))*(x604)*(x611)))+(((IkReal(-1.00000000000000))*(x599)*(x600)))+(((IkReal(-1.00000000000000))*(r11)*(x599)*(x609)))+(((cj0)*(cj4)*(x608))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst8;
gconst8=IKsign((((sj1)*(sj1))+((cj1)*(cj1))));
dummyeval[0]=(((sj1)*(sj1))+((cj1)*(cj1)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst9;
gconst9=IKsign((((sj1)*(sj1))+((cj1)*(cj1))));
dummyeval[0]=(((sj1)*(sj1))+((cj1)*(cj1)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x612=((IkReal(1.00000000000000))*(sj5));
IkReal x613=((cj1)*(sj0));
IkReal x614=((cj0)*(r00));
IkReal x615=((IkReal(1.00000000000000))*(cj5)*(sj1));
IkReal x616=((IkReal(1.00000000000000))*(cj0)*(cj5)*(r01));
if( IKabs(((gconst9)*(((((IkReal(-1.00000000000000))*(r21)*(x615)))+(((IkReal(-1.00000000000000))*(cj1)*(x616)))+(((IkReal(-1.00000000000000))*(r20)*(sj1)*(x612)))+(((IkReal(-1.00000000000000))*(cj5)*(r11)*(x613)))+(((IkReal(-1.00000000000000))*(cj1)*(x612)*(x614)))+(((IkReal(-1.00000000000000))*(r10)*(x612)*(x613))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst9)*(((((cj1)*(r20)*(sj5)))+(((IkReal(-1.00000000000000))*(r11)*(sj0)*(x615)))+(((cj1)*(cj5)*(r21)))+(((IkReal(-1.00000000000000))*(r10)*(sj0)*(sj1)*(x612)))+(((IkReal(-1.00000000000000))*(sj1)*(x612)*(x614)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)*(x615))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst9)*(((((IkReal(-1.00000000000000))*(r21)*(x615)))+(((IkReal(-1.00000000000000))*(cj1)*(x616)))+(((IkReal(-1.00000000000000))*(r20)*(sj1)*(x612)))+(((IkReal(-1.00000000000000))*(cj5)*(r11)*(x613)))+(((IkReal(-1.00000000000000))*(cj1)*(x612)*(x614)))+(((IkReal(-1.00000000000000))*(r10)*(x612)*(x613)))))), ((gconst9)*(((((cj1)*(r20)*(sj5)))+(((IkReal(-1.00000000000000))*(r11)*(sj0)*(x615)))+(((cj1)*(cj5)*(r21)))+(((IkReal(-1.00000000000000))*(r10)*(sj0)*(sj1)*(x612)))+(((IkReal(-1.00000000000000))*(sj1)*(x612)*(x614)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)*(x615)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x617=IKcos(j2);
IkReal x618=IKsin(j2);
IkReal x619=((cj0)*(r00));
IkReal x620=((IkReal(0.00200000000000000))*(sj5));
IkReal x621=((IkReal(0.983000000000000))*(sj1));
IkReal x622=((IkReal(1.00000000000000))*(sj5));
IkReal x623=((cj5)*(sj4));
IkReal x624=((cj0)*(r01));
IkReal x625=((IkReal(1.00000000000000))*(cj5));
IkReal x626=((r10)*(sj0));
IkReal x627=((IkReal(0.00200000000000000))*(cj5));
IkReal x628=((cj1)*(x617));
IkReal x629=((sj0)*(x622));
IkReal x630=((sj1)*(x617));
IkReal x631=((cj1)*(x618));
IkReal x632=((cj5)*(r11)*(sj0));
IkReal x633=((sj1)*(x618));
IkReal x634=((IkReal(1.00000000000000))*(x633));
evalcond[0]=((((IkReal(-1.00000000000000))*(x634)))+(((IkReal(-1.00000000000000))*(r21)*(x625)))+(((IkReal(-1.00000000000000))*(r20)*(x622)))+(x628));
evalcond[1]=((((cj4)*(r22)))+(((IkReal(-1.00000000000000))*(r21)*(sj4)*(x622)))+(x630)+(x631)+(((r20)*(x623))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x622)*(x626)))+(((IkReal(-1.00000000000000))*(r11)*(sj0)*(x625)))+(((IkReal(-1.00000000000000))*(x624)*(x625)))+(((IkReal(-1.00000000000000))*(x619)*(x622)))+(((IkReal(-1.00000000000000))*(x630)))+(((IkReal(-1.00000000000000))*(x631))));
evalcond[3]=((((IkReal(-0.169000000000000))*(x633)))+(((x617)*(x621)))+(((IkReal(1.00400000000000))*(cj1)))+(((IkReal(0.983000000000000))*(x631)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(r21)*(x627)))+(((IkReal(-1.00000000000000))*(r20)*(x620)))+(((IkReal(-0.00400000000000000))*(sj1)))+(((IkReal(0.169000000000000))*(x628))));
evalcond[4]=((((IkReal(-1.00000000000000))*(r11)*(sj4)*(x629)))+(((x619)*(x623)))+(((IkReal(-1.00000000000000))*(x634)))+(((cj0)*(cj4)*(r02)))+(x628)+(((IkReal(-1.00000000000000))*(sj4)*(x622)*(x624)))+(((x623)*(x626)))+(((cj4)*(r12)*(sj0))));
evalcond[5]=((IkReal(0.424000000000000))+(((IkReal(-0.169000000000000))*(x630)))+(((IkReal(-0.169000000000000))*(x631)))+(((IkReal(-1.00400000000000))*(sj1)))+(((IkReal(-1.00000000000000))*(x620)*(x626)))+(((IkReal(-1.00000000000000))*(r11)*(sj0)*(x627)))+(((IkReal(-1.00000000000000))*(x624)*(x627)))+(((IkReal(0.983000000000000))*(x628)))+(((IkReal(-0.00400000000000000))*(cj1)))+(((IkReal(-1.00000000000000))*(x619)*(x620)))+(((IkReal(-1.00000000000000))*(py)*(sj0)))+(((IkReal(-1.00000000000000))*(x618)*(x621)))+(((IkReal(-1.00000000000000))*(cj0)*(px))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x635=((sj1)*(sj5));
IkReal x636=((IkReal(1.00000000000000))*(r20));
IkReal x637=((r21)*(sj4));
IkReal x638=((cj5)*(sj1));
IkReal x639=((cj1)*(sj5));
IkReal x640=((cj1)*(cj5));
IkReal x641=((IkReal(1.00000000000000))*(cj4)*(r22));
if( IKabs(((gconst8)*(((((IkReal(-1.00000000000000))*(cj1)*(x641)))+(((IkReal(-1.00000000000000))*(r21)*(x638)))+(((IkReal(-1.00000000000000))*(x635)*(x636)))+(((IkReal(-1.00000000000000))*(sj4)*(x636)*(x640)))+(((x637)*(x639))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst8)*(((((IkReal(-1.00000000000000))*(sj4)*(x636)*(x638)))+(((x635)*(x637)))+(((IkReal(-1.00000000000000))*(sj1)*(x641)))+(((r21)*(x640)))+(((r20)*(x639))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst8)*(((((IkReal(-1.00000000000000))*(cj1)*(x641)))+(((IkReal(-1.00000000000000))*(r21)*(x638)))+(((IkReal(-1.00000000000000))*(x635)*(x636)))+(((IkReal(-1.00000000000000))*(sj4)*(x636)*(x640)))+(((x637)*(x639)))))), ((gconst8)*(((((IkReal(-1.00000000000000))*(sj4)*(x636)*(x638)))+(((x635)*(x637)))+(((IkReal(-1.00000000000000))*(sj1)*(x641)))+(((r21)*(x640)))+(((r20)*(x639)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x642=IKcos(j2);
IkReal x643=IKsin(j2);
IkReal x644=((cj0)*(r00));
IkReal x645=((IkReal(0.00200000000000000))*(sj5));
IkReal x646=((IkReal(0.983000000000000))*(sj1));
IkReal x647=((IkReal(1.00000000000000))*(sj5));
IkReal x648=((cj5)*(sj4));
IkReal x649=((cj0)*(r01));
IkReal x650=((IkReal(1.00000000000000))*(cj5));
IkReal x651=((r10)*(sj0));
IkReal x652=((IkReal(0.00200000000000000))*(cj5));
IkReal x653=((cj1)*(x642));
IkReal x654=((sj0)*(x647));
IkReal x655=((sj1)*(x642));
IkReal x656=((cj1)*(x643));
IkReal x657=((cj5)*(r11)*(sj0));
IkReal x658=((sj1)*(x643));
IkReal x659=((IkReal(1.00000000000000))*(x658));
evalcond[0]=((((IkReal(-1.00000000000000))*(x659)))+(((IkReal(-1.00000000000000))*(r20)*(x647)))+(x653)+(((IkReal(-1.00000000000000))*(r21)*(x650))));
evalcond[1]=((((r20)*(x648)))+(((cj4)*(r22)))+(((IkReal(-1.00000000000000))*(r21)*(sj4)*(x647)))+(x655)+(x656));
evalcond[2]=((((IkReal(-1.00000000000000))*(x655)))+(((IkReal(-1.00000000000000))*(x656)))+(((IkReal(-1.00000000000000))*(x647)*(x651)))+(((IkReal(-1.00000000000000))*(x644)*(x647)))+(((IkReal(-1.00000000000000))*(x649)*(x650)))+(((IkReal(-1.00000000000000))*(r11)*(sj0)*(x650))));
evalcond[3]=((((IkReal(1.00400000000000))*(cj1)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(r20)*(x645)))+(((IkReal(0.169000000000000))*(x653)))+(((IkReal(0.983000000000000))*(x656)))+(((IkReal(-0.00400000000000000))*(sj1)))+(((IkReal(-1.00000000000000))*(r21)*(x652)))+(((IkReal(-0.169000000000000))*(x658)))+(((x642)*(x646))));
evalcond[4]=((((x644)*(x648)))+(((IkReal(-1.00000000000000))*(r11)*(sj4)*(x654)))+(((IkReal(-1.00000000000000))*(sj4)*(x647)*(x649)))+(((cj0)*(cj4)*(r02)))+(((x648)*(x651)))+(((IkReal(-1.00000000000000))*(x659)))+(x653)+(((cj4)*(r12)*(sj0))));
evalcond[5]=((IkReal(0.424000000000000))+(((IkReal(-1.00400000000000))*(sj1)))+(((IkReal(-0.00400000000000000))*(cj1)))+(((IkReal(-1.00000000000000))*(x644)*(x645)))+(((IkReal(-1.00000000000000))*(x643)*(x646)))+(((IkReal(-1.00000000000000))*(py)*(sj0)))+(((IkReal(-1.00000000000000))*(x649)*(x652)))+(((IkReal(-1.00000000000000))*(x645)*(x651)))+(((IkReal(-1.00000000000000))*(r11)*(sj0)*(x652)))+(((IkReal(0.983000000000000))*(x653)))+(((IkReal(-0.169000000000000))*(x655)))+(((IkReal(-0.169000000000000))*(x656)))+(((IkReal(-1.00000000000000))*(cj0)*(px))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x660=((cj0)*(r11));
IkReal x661=((IkReal(0.00200000000000000))*(cj5));
IkReal x662=((IkReal(1.00000000000000))*(sj0));
IkReal x663=((r00)*(sj5));
IkReal x664=((cj5)*(r01));
IkReal x665=((r01)*(sj5));
IkReal x666=((cj0)*(r12));
IkReal x667=((cj0)*(r10));
IkReal x668=((IkReal(1.00000000000000))*(cj4));
IkReal x669=((cj4)*(sj0));
IkReal x670=((cj5)*(sj4));
IkReal x671=((IkReal(1.00000000000000))*(cj0));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj5)*(r21)))+(((IkReal(-1.00000000000000))*(r20)*(sj5))));
evalcond[2]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x662)*(x664)))+(((IkReal(-1.00000000000000))*(x662)*(x663)))+(((sj5)*(x667)))+(((cj5)*(x660))));
evalcond[3]=((IkReal(0.0120000000000000))+(((IkReal(0.00200000000000000))*(sj5)*(x667)))+(((IkReal(-0.00200000000000000))*(sj0)*(x663)))+(((x660)*(x661)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x661)))+(((IkReal(-1.00000000000000))*(px)*(x662)))+(((cj0)*(py))));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj5)*(r11)*(x662)))+(((IkReal(-1.00000000000000))*(x663)*(x671)))+(((IkReal(-1.00000000000000))*(x664)*(x671)))+(((IkReal(-1.00000000000000))*(r10)*(sj5)*(x662))));
evalcond[5]=((((r00)*(sj0)*(x670)))+(((IkReal(-1.00000000000000))*(x667)*(x670)))+(((IkReal(-1.00000000000000))*(sj4)*(x662)*(x665)))+(((sj4)*(sj5)*(x660)))+(((r02)*(x669)))+(((IkReal(-1.00000000000000))*(x666)*(x668))));
evalcond[6]=((((IkReal(-1.00000000000000))*(cj4)*(x662)*(x665)))+(((IkReal(-1.00000000000000))*(r02)*(sj4)*(x662)))+(((sj4)*(x666)))+(((IkReal(-1.00000000000000))*(cj5)*(x667)*(x668)))+(((cj5)*(r00)*(x669)))+(((cj4)*(sj5)*(x660))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst10;
gconst10=IKsign((((sj1)*(sj1))+((cj1)*(cj1))));
dummyeval[0]=(((sj1)*(sj1))+((cj1)*(cj1)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst11;
gconst11=IKsign(((((IkReal(0.169000000000000))*((cj1)*(cj1))))+(((IkReal(0.169000000000000))*((sj1)*(sj1))))));
dummyeval[0]=(((sj1)*(sj1))+((cj1)*(cj1)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x672=((cj4)*(r22));
IkReal x673=((IkReal(0.983000000000000))*(cj1));
IkReal x674=((IkReal(0.169000000000000))*(sj1));
IkReal x675=((IkReal(0.983000000000000))*(sj1));
IkReal x676=((cj1)*(sj1));
IkReal x677=((IkReal(0.169000000000000))*(cj1));
IkReal x678=((IkReal(0.00200000000000000))*(sj1));
IkReal x679=((r20)*(sj5));
IkReal x680=((cj5)*(r21));
IkReal x681=((IkReal(0.00200000000000000))*(cj1));
IkReal x682=((r21)*(sj4)*(sj5));
IkReal x683=((cj5)*(r20)*(sj4));
if( IKabs(((gconst11)*(((((IkReal(-1.00000000000000))*(x678)*(x679)))+(((IkReal(-1.00000000000000))*(x675)*(x683)))+(((x677)*(x682)))+(((IkReal(-1.00000000000000))*(x678)*(x680)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)))+(((IkReal(1.00400000000000))*(x676)))+(((IkReal(-1.00000000000000))*(x672)*(x677)))+(((IkReal(-1.00000000000000))*(x672)*(x675)))+(((IkReal(-1.00000000000000))*(x677)*(x683)))+(((x675)*(x682)))+(((IkReal(-0.00400000000000000))*((sj1)*(sj1)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst11)*(((((x672)*(x673)))+(((x674)*(x682)))+(((cj1)*(pz)))+(((IkReal(-1.00400000000000))*((cj1)*(cj1))))+(((x679)*(x681)))+(((x673)*(x683)))+(((IkReal(-1.00000000000000))*(x673)*(x682)))+(((x680)*(x681)))+(((IkReal(-1.00000000000000))*(x674)*(x683)))+(((IkReal(-1.00000000000000))*(x672)*(x674)))+(((IkReal(0.00400000000000000))*(x676))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst11)*(((((IkReal(-1.00000000000000))*(x678)*(x679)))+(((IkReal(-1.00000000000000))*(x675)*(x683)))+(((x677)*(x682)))+(((IkReal(-1.00000000000000))*(x678)*(x680)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)))+(((IkReal(1.00400000000000))*(x676)))+(((IkReal(-1.00000000000000))*(x672)*(x677)))+(((IkReal(-1.00000000000000))*(x672)*(x675)))+(((IkReal(-1.00000000000000))*(x677)*(x683)))+(((x675)*(x682)))+(((IkReal(-0.00400000000000000))*((sj1)*(sj1))))))), ((gconst11)*(((((x672)*(x673)))+(((x674)*(x682)))+(((cj1)*(pz)))+(((IkReal(-1.00400000000000))*((cj1)*(cj1))))+(((x679)*(x681)))+(((x673)*(x683)))+(((IkReal(-1.00000000000000))*(x673)*(x682)))+(((x680)*(x681)))+(((IkReal(-1.00000000000000))*(x674)*(x683)))+(((IkReal(-1.00000000000000))*(x672)*(x674)))+(((IkReal(0.00400000000000000))*(x676)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x684=IKcos(j2);
IkReal x685=IKsin(j2);
IkReal x686=((cj0)*(r00));
IkReal x687=((IkReal(0.00200000000000000))*(sj5));
IkReal x688=((cj4)*(cj5));
IkReal x689=((IkReal(1.00000000000000))*(sj5));
IkReal x690=((r11)*(sj0));
IkReal x691=((cj0)*(r01));
IkReal x692=((cj5)*(sj4));
IkReal x693=((IkReal(0.00200000000000000))*(cj5));
IkReal x694=((r10)*(sj0));
IkReal x695=((IkReal(1.00000000000000))*(sj4));
IkReal x696=((r12)*(sj0));
IkReal x697=((cj0)*(r02));
IkReal x698=((cj1)*(x684));
IkReal x699=((sj1)*(x684));
IkReal x700=((cj1)*(x685));
IkReal x701=((sj1)*(x685));
IkReal x702=((IkReal(1.00000000000000))*(x701));
evalcond[0]=((((cj4)*(r22)))+(((r20)*(x692)))+(x699)+(((IkReal(-1.00000000000000))*(r21)*(sj4)*(x689)))+(x700));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj4)*(r21)*(x689)))+(((IkReal(-1.00000000000000))*(x702)))+(x698)+(((IkReal(-1.00000000000000))*(r22)*(x695)))+(((r20)*(x688))));
evalcond[2]=((((IkReal(1.00400000000000))*(cj1)))+(((IkReal(0.983000000000000))*(x700)))+(((IkReal(-0.169000000000000))*(x701)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(r20)*(x687)))+(((IkReal(0.169000000000000))*(x698)))+(((IkReal(0.983000000000000))*(x699)))+(((IkReal(-1.00000000000000))*(r21)*(x693)))+(((IkReal(-0.00400000000000000))*(sj1))));
evalcond[3]=((((cj4)*(x697)))+(((cj4)*(x696)))+(((x686)*(x692)))+(((IkReal(-1.00000000000000))*(sj4)*(x689)*(x690)))+(((IkReal(-1.00000000000000))*(sj4)*(x689)*(x691)))+(((x692)*(x694)))+(((IkReal(-1.00000000000000))*(x702)))+(x698));
evalcond[4]=((((x686)*(x688)))+(((x688)*(x694)))+(((IkReal(-1.00000000000000))*(x700)))+(((IkReal(-1.00000000000000))*(cj4)*(x689)*(x691)))+(((IkReal(-1.00000000000000))*(cj4)*(x689)*(x690)))+(((IkReal(-1.00000000000000))*(x695)*(x696)))+(((IkReal(-1.00000000000000))*(x695)*(x697)))+(((IkReal(-1.00000000000000))*(x699))));
evalcond[5]=((IkReal(0.424000000000000))+(((IkReal(-1.00000000000000))*(x687)*(x694)))+(((IkReal(-0.983000000000000))*(x701)))+(((IkReal(-1.00400000000000))*(sj1)))+(((IkReal(-0.169000000000000))*(x700)))+(((IkReal(-1.00000000000000))*(x686)*(x687)))+(((IkReal(-0.00400000000000000))*(cj1)))+(((IkReal(-1.00000000000000))*(py)*(sj0)))+(((IkReal(-1.00000000000000))*(x690)*(x693)))+(((IkReal(-1.00000000000000))*(x691)*(x693)))+(((IkReal(0.983000000000000))*(x698)))+(((IkReal(-0.169000000000000))*(x699)))+(((IkReal(-1.00000000000000))*(cj0)*(px))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x703=((cj1)*(cj4));
IkReal x704=((IkReal(1.00000000000000))*(r22));
IkReal x705=((r21)*(sj5));
IkReal x706=((sj1)*(sj4));
IkReal x707=((cj5)*(r20));
IkReal x708=((cj4)*(sj1));
IkReal x709=((cj1)*(sj4));
if( IKabs(((gconst10)*(((((x707)*(x708)))+(((IkReal(-1.00000000000000))*(x705)*(x708)))+(((IkReal(-1.00000000000000))*(x703)*(x704)))+(((IkReal(-1.00000000000000))*(x704)*(x706)))+(((IkReal(-1.00000000000000))*(x707)*(x709)))+(((x705)*(x709))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst10)*(((((IkReal(-1.00000000000000))*(x703)*(x707)))+(((r22)*(x709)))+(((IkReal(-1.00000000000000))*(x706)*(x707)))+(((x703)*(x705)))+(((IkReal(-1.00000000000000))*(x704)*(x708)))+(((x705)*(x706))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst10)*(((((x707)*(x708)))+(((IkReal(-1.00000000000000))*(x705)*(x708)))+(((IkReal(-1.00000000000000))*(x703)*(x704)))+(((IkReal(-1.00000000000000))*(x704)*(x706)))+(((IkReal(-1.00000000000000))*(x707)*(x709)))+(((x705)*(x709)))))), ((gconst10)*(((((IkReal(-1.00000000000000))*(x703)*(x707)))+(((r22)*(x709)))+(((IkReal(-1.00000000000000))*(x706)*(x707)))+(((x703)*(x705)))+(((IkReal(-1.00000000000000))*(x704)*(x708)))+(((x705)*(x706)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x710=IKcos(j2);
IkReal x711=IKsin(j2);
IkReal x712=((cj0)*(r00));
IkReal x713=((IkReal(0.00200000000000000))*(sj5));
IkReal x714=((cj4)*(cj5));
IkReal x715=((IkReal(1.00000000000000))*(sj5));
IkReal x716=((r11)*(sj0));
IkReal x717=((cj0)*(r01));
IkReal x718=((cj5)*(sj4));
IkReal x719=((IkReal(0.00200000000000000))*(cj5));
IkReal x720=((r10)*(sj0));
IkReal x721=((IkReal(1.00000000000000))*(sj4));
IkReal x722=((r12)*(sj0));
IkReal x723=((cj0)*(r02));
IkReal x724=((cj1)*(x710));
IkReal x725=((sj1)*(x710));
IkReal x726=((cj1)*(x711));
IkReal x727=((sj1)*(x711));
IkReal x728=((IkReal(1.00000000000000))*(x727));
evalcond[0]=((((cj4)*(r22)))+(((r20)*(x718)))+(x725)+(x726)+(((IkReal(-1.00000000000000))*(r21)*(sj4)*(x715))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x728)))+(((r20)*(x714)))+(x724)+(((IkReal(-1.00000000000000))*(r22)*(x721)))+(((IkReal(-1.00000000000000))*(cj4)*(r21)*(x715))));
evalcond[2]=((((IkReal(0.983000000000000))*(x726)))+(((IkReal(0.983000000000000))*(x725)))+(((IkReal(1.00400000000000))*(cj1)))+(((IkReal(-1.00000000000000))*(r21)*(x719)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-0.169000000000000))*(x727)))+(((IkReal(-1.00000000000000))*(r20)*(x713)))+(((IkReal(0.169000000000000))*(x724)))+(((IkReal(-0.00400000000000000))*(sj1))));
evalcond[3]=((((cj4)*(x723)))+(((cj4)*(x722)))+(((IkReal(-1.00000000000000))*(x728)))+(((IkReal(-1.00000000000000))*(sj4)*(x715)*(x717)))+(((IkReal(-1.00000000000000))*(sj4)*(x715)*(x716)))+(((x718)*(x720)))+(x724)+(((x712)*(x718))));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj4)*(x715)*(x716)))+(((IkReal(-1.00000000000000))*(cj4)*(x715)*(x717)))+(((IkReal(-1.00000000000000))*(x726)))+(((IkReal(-1.00000000000000))*(x725)))+(((IkReal(-1.00000000000000))*(x721)*(x723)))+(((IkReal(-1.00000000000000))*(x721)*(x722)))+(((x712)*(x714)))+(((x714)*(x720))));
evalcond[5]=((IkReal(0.424000000000000))+(((IkReal(-1.00000000000000))*(x713)*(x720)))+(((IkReal(0.983000000000000))*(x724)))+(((IkReal(-1.00400000000000))*(sj1)))+(((IkReal(-0.983000000000000))*(x727)))+(((IkReal(-1.00000000000000))*(x717)*(x719)))+(((IkReal(-0.00400000000000000))*(cj1)))+(((IkReal(-1.00000000000000))*(x716)*(x719)))+(((IkReal(-0.169000000000000))*(x726)))+(((IkReal(-0.169000000000000))*(x725)))+(((IkReal(-1.00000000000000))*(py)*(sj0)))+(((IkReal(-1.00000000000000))*(x712)*(x713)))+(((IkReal(-1.00000000000000))*(cj0)*(px))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x729=((cj0)*(r11));
IkReal x730=((IkReal(0.00200000000000000))*(cj5));
IkReal x731=((IkReal(1.00000000000000))*(sj0));
IkReal x732=((r00)*(sj5));
IkReal x733=((cj5)*(r01));
IkReal x734=((r01)*(sj5));
IkReal x735=((cj0)*(r12));
IkReal x736=((cj0)*(r10));
IkReal x737=((IkReal(1.00000000000000))*(cj4));
IkReal x738=((cj4)*(sj0));
IkReal x739=((cj5)*(sj4));
IkReal x740=((IkReal(1.00000000000000))*(cj0));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj5)*(r21)))+(((IkReal(-1.00000000000000))*(r20)*(sj5))));
evalcond[2]=((IkReal(-1.00000000000000))+(((cj5)*(x729)))+(((IkReal(-1.00000000000000))*(x731)*(x732)))+(((IkReal(-1.00000000000000))*(x731)*(x733)))+(((sj5)*(x736))));
evalcond[3]=((IkReal(0.0120000000000000))+(((IkReal(-0.00200000000000000))*(sj0)*(x732)))+(((x729)*(x730)))+(((IkReal(-1.00000000000000))*(px)*(x731)))+(((IkReal(0.00200000000000000))*(sj5)*(x736)))+(((cj0)*(py)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x730))));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj5)*(r11)*(x731)))+(((IkReal(-1.00000000000000))*(r10)*(sj5)*(x731)))+(((IkReal(-1.00000000000000))*(x732)*(x740)))+(((IkReal(-1.00000000000000))*(x733)*(x740))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x735)*(x737)))+(((r00)*(sj0)*(x739)))+(((IkReal(-1.00000000000000))*(x736)*(x739)))+(((IkReal(-1.00000000000000))*(sj4)*(x731)*(x734)))+(((r02)*(x738)))+(((sj4)*(sj5)*(x729))));
evalcond[6]=((((IkReal(-1.00000000000000))*(cj4)*(x731)*(x734)))+(((IkReal(-1.00000000000000))*(r02)*(sj4)*(x731)))+(((IkReal(-1.00000000000000))*(cj5)*(x736)*(x737)))+(((cj5)*(r00)*(x738)))+(((sj4)*(x735)))+(((cj4)*(sj5)*(x729))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst12;
gconst12=IKsign(((((IkReal(-1.00000000000000))*((sj1)*(sj1))))+(((IkReal(-1.00000000000000))*((cj1)*(cj1))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((sj1)*(sj1))))+(((IkReal(-1.00000000000000))*((cj1)*(cj1)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst13;
gconst13=IKsign(((((IkReal(0.169000000000000))*((cj1)*(cj1))))+(((IkReal(0.169000000000000))*((sj1)*(sj1))))));
dummyeval[0]=(((sj1)*(sj1))+((cj1)*(cj1)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x741=((cj4)*(r22));
IkReal x742=((IkReal(0.983000000000000))*(cj1));
IkReal x743=((IkReal(0.169000000000000))*(sj1));
IkReal x744=((IkReal(0.983000000000000))*(sj1));
IkReal x745=((cj1)*(sj1));
IkReal x746=((IkReal(0.169000000000000))*(cj1));
IkReal x747=((IkReal(0.00200000000000000))*(sj1));
IkReal x748=((r20)*(sj5));
IkReal x749=((cj5)*(r21));
IkReal x750=((IkReal(0.00200000000000000))*(cj1));
IkReal x751=((r21)*(sj4)*(sj5));
IkReal x752=((cj5)*(r20)*(sj4));
if( IKabs(((gconst13)*(((((x744)*(x751)))+(((IkReal(-1.00000000000000))*(x747)*(x748)))+(((IkReal(-1.00000000000000))*(x747)*(x749)))+(((IkReal(-1.00000000000000))*(x746)*(x752)))+(((x746)*(x751)))+(((IkReal(-1.00000000000000))*(x744)*(x752)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)))+(((IkReal(-1.00000000000000))*(x741)*(x744)))+(((IkReal(-1.00000000000000))*(x741)*(x746)))+(((IkReal(1.00400000000000))*(x745)))+(((IkReal(-0.00400000000000000))*((sj1)*(sj1)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst13)*(((((IkReal(-1.00000000000000))*(x742)*(x751)))+(((cj1)*(pz)))+(((IkReal(-1.00400000000000))*((cj1)*(cj1))))+(((IkReal(0.00400000000000000))*(x745)))+(((x743)*(x751)))+(((x741)*(x742)))+(((IkReal(-1.00000000000000))*(x743)*(x752)))+(((IkReal(-1.00000000000000))*(x741)*(x743)))+(((x749)*(x750)))+(((x748)*(x750)))+(((x742)*(x752))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst13)*(((((x744)*(x751)))+(((IkReal(-1.00000000000000))*(x747)*(x748)))+(((IkReal(-1.00000000000000))*(x747)*(x749)))+(((IkReal(-1.00000000000000))*(x746)*(x752)))+(((x746)*(x751)))+(((IkReal(-1.00000000000000))*(x744)*(x752)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)))+(((IkReal(-1.00000000000000))*(x741)*(x744)))+(((IkReal(-1.00000000000000))*(x741)*(x746)))+(((IkReal(1.00400000000000))*(x745)))+(((IkReal(-0.00400000000000000))*((sj1)*(sj1))))))), ((gconst13)*(((((IkReal(-1.00000000000000))*(x742)*(x751)))+(((cj1)*(pz)))+(((IkReal(-1.00400000000000))*((cj1)*(cj1))))+(((IkReal(0.00400000000000000))*(x745)))+(((x743)*(x751)))+(((x741)*(x742)))+(((IkReal(-1.00000000000000))*(x743)*(x752)))+(((IkReal(-1.00000000000000))*(x741)*(x743)))+(((x749)*(x750)))+(((x748)*(x750)))+(((x742)*(x752)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x753=IKsin(j2);
IkReal x754=IKcos(j2);
IkReal x755=((cj0)*(r00));
IkReal x756=((IkReal(0.00200000000000000))*(sj5));
IkReal x757=((cj4)*(cj5));
IkReal x758=((IkReal(1.00000000000000))*(sj5));
IkReal x759=((r11)*(sj0));
IkReal x760=((cj0)*(r01));
IkReal x761=((cj5)*(sj4));
IkReal x762=((IkReal(0.00200000000000000))*(cj5));
IkReal x763=((r10)*(sj0));
IkReal x764=((IkReal(1.00000000000000))*(sj4));
IkReal x765=((r12)*(sj0));
IkReal x766=((cj0)*(r02));
IkReal x767=((sj1)*(x754));
IkReal x768=((cj1)*(x753));
IkReal x769=((cj1)*(x754));
IkReal x770=((sj1)*(x753));
IkReal x771=((x768)+(x767));
evalcond[0]=((((cj4)*(r22)))+(((r20)*(x761)))+(((IkReal(-1.00000000000000))*(r21)*(sj4)*(x758)))+(x771));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj4)*(r21)*(x758)))+(((IkReal(-1.00000000000000))*(x769)))+(x770)+(((r20)*(x757)))+(((IkReal(-1.00000000000000))*(r22)*(x764))));
evalcond[2]=((((IkReal(-0.169000000000000))*(x770)))+(((IkReal(1.00400000000000))*(cj1)))+(((IkReal(0.169000000000000))*(x769)))+(((IkReal(-1.00000000000000))*(r21)*(x762)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(0.983000000000000))*(x767)))+(((IkReal(0.983000000000000))*(x768)))+(((IkReal(-0.00400000000000000))*(sj1)))+(((IkReal(-1.00000000000000))*(r20)*(x756))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj4)*(x758)*(x760)))+(((x761)*(x763)))+(((cj4)*(x766)))+(((cj4)*(x765)))+(x769)+(((IkReal(-1.00000000000000))*(x770)))+(((IkReal(-1.00000000000000))*(sj4)*(x758)*(x759)))+(((x755)*(x761))));
evalcond[4]=((((x757)*(x763)))+(((IkReal(-1.00000000000000))*(cj4)*(x758)*(x759)))+(((IkReal(-1.00000000000000))*(x764)*(x766)))+(((IkReal(-1.00000000000000))*(x764)*(x765)))+(((x755)*(x757)))+(x771)+(((IkReal(-1.00000000000000))*(cj4)*(x758)*(x760))));
evalcond[5]=((IkReal(0.424000000000000))+(((IkReal(-0.983000000000000))*(x770)))+(((IkReal(-1.00000000000000))*(x756)*(x763)))+(((IkReal(-1.00400000000000))*(sj1)))+(((IkReal(-1.00000000000000))*(x755)*(x756)))+(((IkReal(-0.00400000000000000))*(cj1)))+(((IkReal(-0.169000000000000))*(x767)))+(((IkReal(-0.169000000000000))*(x768)))+(((IkReal(-1.00000000000000))*(py)*(sj0)))+(((IkReal(0.983000000000000))*(x769)))+(((IkReal(-1.00000000000000))*(x760)*(x762)))+(((IkReal(-1.00000000000000))*(cj0)*(px)))+(((IkReal(-1.00000000000000))*(x759)*(x762))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x772=((cj1)*(cj4));
IkReal x773=((r21)*(sj5));
IkReal x774=((r22)*(sj1));
IkReal x775=((cj1)*(sj4));
IkReal x776=((cj5)*(r20));
IkReal x777=((IkReal(1.00000000000000))*(sj4));
IkReal x778=((cj4)*(sj1));
if( IKabs(((gconst12)*(((((x776)*(x778)))+(((r22)*(x772)))+(((IkReal(-1.00000000000000))*(x774)*(x777)))+(((IkReal(-1.00000000000000))*(x773)*(x775)))+(((IkReal(-1.00000000000000))*(x773)*(x778)))+(((x775)*(x776))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst12)*(((((r22)*(x775)))+(((IkReal(-1.00000000000000))*(x772)*(x776)))+(((x772)*(x773)))+(((IkReal(-1.00000000000000))*(sj1)*(x773)*(x777)))+(((cj4)*(x774)))+(((sj1)*(sj4)*(x776))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst12)*(((((x776)*(x778)))+(((r22)*(x772)))+(((IkReal(-1.00000000000000))*(x774)*(x777)))+(((IkReal(-1.00000000000000))*(x773)*(x775)))+(((IkReal(-1.00000000000000))*(x773)*(x778)))+(((x775)*(x776)))))), ((gconst12)*(((((r22)*(x775)))+(((IkReal(-1.00000000000000))*(x772)*(x776)))+(((x772)*(x773)))+(((IkReal(-1.00000000000000))*(sj1)*(x773)*(x777)))+(((cj4)*(x774)))+(((sj1)*(sj4)*(x776)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x779=IKsin(j2);
IkReal x780=IKcos(j2);
IkReal x781=((cj0)*(r00));
IkReal x782=((IkReal(0.00200000000000000))*(sj5));
IkReal x783=((cj4)*(cj5));
IkReal x784=((IkReal(1.00000000000000))*(sj5));
IkReal x785=((r11)*(sj0));
IkReal x786=((cj0)*(r01));
IkReal x787=((cj5)*(sj4));
IkReal x788=((IkReal(0.00200000000000000))*(cj5));
IkReal x789=((r10)*(sj0));
IkReal x790=((IkReal(1.00000000000000))*(sj4));
IkReal x791=((r12)*(sj0));
IkReal x792=((cj0)*(r02));
IkReal x793=((sj1)*(x780));
IkReal x794=((cj1)*(x779));
IkReal x795=((cj1)*(x780));
IkReal x796=((sj1)*(x779));
IkReal x797=((x793)+(x794));
evalcond[0]=((((r20)*(x787)))+(((cj4)*(r22)))+(((IkReal(-1.00000000000000))*(r21)*(sj4)*(x784)))+(x797));
evalcond[1]=((((r20)*(x783)))+(((IkReal(-1.00000000000000))*(r22)*(x790)))+(x796)+(((IkReal(-1.00000000000000))*(cj4)*(r21)*(x784)))+(((IkReal(-1.00000000000000))*(x795))));
evalcond[2]=((((IkReal(1.00400000000000))*(cj1)))+(((IkReal(0.169000000000000))*(x795)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(r20)*(x782)))+(((IkReal(-1.00000000000000))*(r21)*(x788)))+(((IkReal(-0.169000000000000))*(x796)))+(((IkReal(0.983000000000000))*(x794)))+(((IkReal(0.983000000000000))*(x793)))+(((IkReal(-0.00400000000000000))*(sj1))));
evalcond[3]=((((x781)*(x787)))+(((x787)*(x789)))+(((cj4)*(x791)))+(((cj4)*(x792)))+(x795)+(((IkReal(-1.00000000000000))*(x796)))+(((IkReal(-1.00000000000000))*(sj4)*(x784)*(x786)))+(((IkReal(-1.00000000000000))*(sj4)*(x784)*(x785))));
evalcond[4]=((((x781)*(x783)))+(((x783)*(x789)))+(((IkReal(-1.00000000000000))*(x790)*(x791)))+(((IkReal(-1.00000000000000))*(x790)*(x792)))+(((IkReal(-1.00000000000000))*(cj4)*(x784)*(x785)))+(((IkReal(-1.00000000000000))*(cj4)*(x784)*(x786)))+(x797));
evalcond[5]=((IkReal(0.424000000000000))+(((IkReal(-1.00400000000000))*(sj1)))+(((IkReal(-1.00000000000000))*(x781)*(x782)))+(((IkReal(-0.00400000000000000))*(cj1)))+(((IkReal(-1.00000000000000))*(x782)*(x789)))+(((IkReal(-0.169000000000000))*(x794)))+(((IkReal(-0.169000000000000))*(x793)))+(((IkReal(0.983000000000000))*(x795)))+(((IkReal(-1.00000000000000))*(x786)*(x788)))+(((IkReal(-1.00000000000000))*(py)*(sj0)))+(((IkReal(-1.00000000000000))*(x785)*(x788)))+(((IkReal(-0.983000000000000))*(x796)))+(((IkReal(-1.00000000000000))*(cj0)*(px))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x798=((cj3)*(sj4));
IkReal x799=((cj1)*(cj4));
IkReal x800=((r21)*(sj5));
IkReal x801=((IkReal(1.00000000000000))*(r22));
IkReal x802=((cj4)*(sj1));
IkReal x803=((cj5)*(r20)*(sj1));
IkReal x804=((IkReal(1.00000000000000))*(cj1)*(cj5)*(r20));
if( IKabs(((gconst5)*(((((cj5)*(r20)*(x802)))+(((IkReal(-1.00000000000000))*(x798)*(x804)))+(((cj1)*(x798)*(x800)))+(((IkReal(-1.00000000000000))*(cj3)*(x799)*(x801)))+(((IkReal(-1.00000000000000))*(x800)*(x802)))+(((IkReal(-1.00000000000000))*(sj1)*(sj4)*(x801))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(((((IkReal(-1.00000000000000))*(cj5)*(r20)*(x799)))+(((sj1)*(x798)*(x800)))+(((IkReal(-1.00000000000000))*(cj3)*(x801)*(x802)))+(((IkReal(-1.00000000000000))*(x798)*(x803)))+(((x799)*(x800)))+(((cj1)*(r22)*(sj4))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst5)*(((((cj5)*(r20)*(x802)))+(((IkReal(-1.00000000000000))*(x798)*(x804)))+(((cj1)*(x798)*(x800)))+(((IkReal(-1.00000000000000))*(cj3)*(x799)*(x801)))+(((IkReal(-1.00000000000000))*(x800)*(x802)))+(((IkReal(-1.00000000000000))*(sj1)*(sj4)*(x801)))))), ((gconst5)*(((((IkReal(-1.00000000000000))*(cj5)*(r20)*(x799)))+(((sj1)*(x798)*(x800)))+(((IkReal(-1.00000000000000))*(cj3)*(x801)*(x802)))+(((IkReal(-1.00000000000000))*(x798)*(x803)))+(((x799)*(x800)))+(((cj1)*(r22)*(sj4)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x805=IKcos(j2);
IkReal x806=IKsin(j2);
IkReal x807=((cj0)*(r00));
IkReal x808=((IkReal(0.00200000000000000))*(sj5));
IkReal x809=((cj4)*(cj5));
IkReal x810=((IkReal(1.00000000000000))*(cj3));
IkReal x811=((IkReal(1.00000000000000))*(sj5));
IkReal x812=((cj0)*(r01));
IkReal x813=((cj5)*(sj4));
IkReal x814=((IkReal(1.00000000000000))*(cj5));
IkReal x815=((r10)*(sj0));
IkReal x816=((IkReal(1.00000000000000))*(sj0));
IkReal x817=((IkReal(1.00000000000000))*(cj0));
IkReal x818=((IkReal(0.00200000000000000))*(cj5));
IkReal x819=((cj1)*(x805));
IkReal x820=((sj0)*(x811));
IkReal x821=((sj1)*(x806));
IkReal x822=((sj1)*(x805));
IkReal x823=((cj1)*(x806));
IkReal x824=((cj5)*(r11)*(sj0));
evalcond[0]=((((sj3)*(x821)))+(((IkReal(-1.00000000000000))*(r21)*(x814)))+(((IkReal(-1.00000000000000))*(r20)*(x811)))+(((IkReal(-1.00000000000000))*(sj3)*(x819))));
evalcond[1]=((((cj4)*(r22)))+(((r20)*(x813)))+(x823)+(x822)+(((IkReal(-1.00000000000000))*(r21)*(sj4)*(x811))));
evalcond[2]=((((cj3)*(x819)))+(((IkReal(-1.00000000000000))*(cj4)*(r21)*(x811)))+(((IkReal(-1.00000000000000))*(x810)*(x821)))+(((r20)*(x809)))+(((IkReal(-1.00000000000000))*(r22)*(sj4))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x812)*(x814)))+(((sj3)*(x822)))+(((sj3)*(x823)))+(((IkReal(-1.00000000000000))*(x811)*(x815)))+(((IkReal(-1.00000000000000))*(r11)*(sj0)*(x814)))+(((IkReal(-1.00000000000000))*(x807)*(x811))));
evalcond[4]=((((IkReal(1.00400000000000))*(cj1)))+(((IkReal(0.983000000000000))*(x822)))+(((IkReal(0.983000000000000))*(x823)))+(((IkReal(-0.169000000000000))*(x821)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(r20)*(x808)))+(((IkReal(0.169000000000000))*(x819)))+(((IkReal(-0.00400000000000000))*(sj1)))+(((IkReal(-1.00000000000000))*(r21)*(x818))));
evalcond[5]=((((cj0)*(cj4)*(r02)))+(((x813)*(x815)))+(((x807)*(x813)))+(((IkReal(-1.00000000000000))*(x821)))+(((IkReal(-1.00000000000000))*(sj4)*(x811)*(x812)))+(x819)+(((cj4)*(r12)*(sj0)))+(((IkReal(-1.00000000000000))*(r11)*(sj4)*(x820))));
evalcond[6]=((((x809)*(x815)))+(((IkReal(-1.00000000000000))*(r12)*(sj4)*(x816)))+(((IkReal(-1.00000000000000))*(r02)*(sj4)*(x817)))+(((IkReal(-1.00000000000000))*(x810)*(x823)))+(((IkReal(-1.00000000000000))*(x810)*(x822)))+(((IkReal(-1.00000000000000))*(cj4)*(r11)*(x820)))+(((IkReal(-1.00000000000000))*(cj4)*(x811)*(x812)))+(((x807)*(x809))));
evalcond[7]=((IkReal(0.424000000000000))+(((IkReal(-1.00000000000000))*(x812)*(x818)))+(((IkReal(-1.00000000000000))*(x807)*(x808)))+(((IkReal(-1.00000000000000))*(x808)*(x815)))+(((IkReal(-1.00400000000000))*(sj1)))+(((IkReal(-1.00000000000000))*(py)*(x816)))+(((IkReal(-0.169000000000000))*(x823)))+(((IkReal(-0.169000000000000))*(x822)))+(((IkReal(0.983000000000000))*(x819)))+(((IkReal(-0.00400000000000000))*(cj1)))+(((IkReal(-1.00000000000000))*(px)*(x817)))+(((IkReal(-1.00000000000000))*(r11)*(sj0)*(x818)))+(((IkReal(-0.983000000000000))*(x821))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x825=((sj3)*(sj4));
IkReal x826=((r20)*(sj5));
IkReal x827=((r21)*(sj5));
IkReal x828=((IkReal(1.00000000000000))*(cj1));
IkReal x829=((IkReal(1.00000000000000))*(sj1));
IkReal x830=((cj5)*(x828));
IkReal x831=((cj4)*(r22)*(sj3));
if( IKabs(((gconst4)*(((((IkReal(-1.00000000000000))*(x828)*(x831)))+(((cj5)*(r21)*(sj1)))+(((sj1)*(x826)))+(((IkReal(-1.00000000000000))*(r20)*(x825)*(x830)))+(((cj1)*(x825)*(x827))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((((sj1)*(x825)*(x827)))+(((IkReal(-1.00000000000000))*(r21)*(x830)))+(((IkReal(-1.00000000000000))*(cj5)*(r20)*(x825)*(x829)))+(((IkReal(-1.00000000000000))*(x826)*(x828)))+(((IkReal(-1.00000000000000))*(x829)*(x831))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst4)*(((((IkReal(-1.00000000000000))*(x828)*(x831)))+(((cj5)*(r21)*(sj1)))+(((sj1)*(x826)))+(((IkReal(-1.00000000000000))*(r20)*(x825)*(x830)))+(((cj1)*(x825)*(x827)))))), ((gconst4)*(((((sj1)*(x825)*(x827)))+(((IkReal(-1.00000000000000))*(r21)*(x830)))+(((IkReal(-1.00000000000000))*(cj5)*(r20)*(x825)*(x829)))+(((IkReal(-1.00000000000000))*(x826)*(x828)))+(((IkReal(-1.00000000000000))*(x829)*(x831)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x832=IKcos(j2);
IkReal x833=IKsin(j2);
IkReal x834=((cj0)*(r00));
IkReal x835=((IkReal(0.00200000000000000))*(sj5));
IkReal x836=((cj4)*(cj5));
IkReal x837=((IkReal(1.00000000000000))*(cj3));
IkReal x838=((IkReal(1.00000000000000))*(sj5));
IkReal x839=((cj0)*(r01));
IkReal x840=((cj5)*(sj4));
IkReal x841=((IkReal(1.00000000000000))*(cj5));
IkReal x842=((r10)*(sj0));
IkReal x843=((IkReal(1.00000000000000))*(sj0));
IkReal x844=((IkReal(1.00000000000000))*(cj0));
IkReal x845=((IkReal(0.00200000000000000))*(cj5));
IkReal x846=((cj1)*(x832));
IkReal x847=((sj0)*(x838));
IkReal x848=((sj1)*(x833));
IkReal x849=((sj1)*(x832));
IkReal x850=((cj1)*(x833));
IkReal x851=((cj5)*(r11)*(sj0));
evalcond[0]=((((IkReal(-1.00000000000000))*(r20)*(x838)))+(((IkReal(-1.00000000000000))*(r21)*(x841)))+(((sj3)*(x848)))+(((IkReal(-1.00000000000000))*(sj3)*(x846))));
evalcond[1]=((((cj4)*(r22)))+(((r20)*(x840)))+(((IkReal(-1.00000000000000))*(r21)*(sj4)*(x838)))+(x850)+(x849));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj4)*(r21)*(x838)))+(((IkReal(-1.00000000000000))*(x837)*(x848)))+(((r20)*(x836)))+(((IkReal(-1.00000000000000))*(r22)*(sj4)))+(((cj3)*(x846))));
evalcond[3]=((((sj3)*(x850)))+(((IkReal(-1.00000000000000))*(x834)*(x838)))+(((IkReal(-1.00000000000000))*(x839)*(x841)))+(((IkReal(-1.00000000000000))*(x838)*(x842)))+(((sj3)*(x849)))+(((IkReal(-1.00000000000000))*(r11)*(sj0)*(x841))));
evalcond[4]=((((IkReal(0.983000000000000))*(x850)))+(((IkReal(-1.00000000000000))*(r20)*(x835)))+(((IkReal(-1.00000000000000))*(r21)*(x845)))+(((IkReal(1.00400000000000))*(cj1)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(0.983000000000000))*(x849)))+(((IkReal(0.169000000000000))*(x846)))+(((IkReal(-0.00400000000000000))*(sj1)))+(((IkReal(-0.169000000000000))*(x848))));
evalcond[5]=((((x840)*(x842)))+(((IkReal(-1.00000000000000))*(r11)*(sj4)*(x847)))+(((cj0)*(cj4)*(r02)))+(((x834)*(x840)))+(((IkReal(-1.00000000000000))*(x848)))+(((IkReal(-1.00000000000000))*(sj4)*(x838)*(x839)))+(x846)+(((cj4)*(r12)*(sj0))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x837)*(x849)))+(((IkReal(-1.00000000000000))*(r12)*(sj4)*(x843)))+(((IkReal(-1.00000000000000))*(cj4)*(r11)*(x847)))+(((x836)*(x842)))+(((IkReal(-1.00000000000000))*(r02)*(sj4)*(x844)))+(((IkReal(-1.00000000000000))*(cj4)*(x838)*(x839)))+(((x834)*(x836)))+(((IkReal(-1.00000000000000))*(x837)*(x850))));
evalcond[7]=((IkReal(0.424000000000000))+(((IkReal(-1.00000000000000))*(x835)*(x842)))+(((IkReal(-1.00000000000000))*(py)*(x843)))+(((IkReal(-1.00400000000000))*(sj1)))+(((IkReal(-0.169000000000000))*(x850)))+(((IkReal(-1.00000000000000))*(px)*(x844)))+(((IkReal(-1.00000000000000))*(x834)*(x835)))+(((IkReal(-0.00400000000000000))*(cj1)))+(((IkReal(-0.983000000000000))*(x848)))+(((IkReal(0.983000000000000))*(x846)))+(((IkReal(-1.00000000000000))*(x839)*(x845)))+(((IkReal(-1.00000000000000))*(r11)*(sj0)*(x845)))+(((IkReal(-0.169000000000000))*(x849))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x852=((cj5)*(r21));
IkReal x853=((IkReal(0.00200000000000000))*(sj3));
IkReal x854=((IkReal(0.00400000000000000))*(sj3));
IkReal x855=((IkReal(0.169000000000000))*(sj1));
IkReal x856=((r20)*(sj5));
IkReal x857=((sj1)*(sj3));
IkReal x858=((IkReal(0.983000000000000))*(sj1));
IkReal x859=((cj1)*(x856));
if( IKabs(((gconst2)*(((((IkReal(-1.00400000000000))*(sj3)*((cj1)*(cj1))))+(((cj1)*(x852)*(x853)))+(((cj1)*(pz)*(sj3)))+(((x856)*(x858)))+(((IkReal(0.169000000000000))*(cj1)*(x852)))+(((x852)*(x858)))+(((x853)*(x859)))+(((cj1)*(sj1)*(x854)))+(((IkReal(0.169000000000000))*(x859))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((IkReal(-0.983000000000000))*(cj1)*(x852)))+(((x855)*(x856)))+(((IkReal(-1.00400000000000))*(cj1)*(x857)))+(((sj1)*(x853)*(x856)))+(((x854)*((sj1)*(sj1))))+(((sj1)*(x852)*(x853)))+(((x852)*(x855)))+(((IkReal(-0.983000000000000))*(x859)))+(((pz)*(x857))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst2)*(((((IkReal(-1.00400000000000))*(sj3)*((cj1)*(cj1))))+(((cj1)*(x852)*(x853)))+(((cj1)*(pz)*(sj3)))+(((x856)*(x858)))+(((IkReal(0.169000000000000))*(cj1)*(x852)))+(((x852)*(x858)))+(((x853)*(x859)))+(((cj1)*(sj1)*(x854)))+(((IkReal(0.169000000000000))*(x859)))))), ((gconst2)*(((((IkReal(-0.983000000000000))*(cj1)*(x852)))+(((x855)*(x856)))+(((IkReal(-1.00400000000000))*(cj1)*(x857)))+(((sj1)*(x853)*(x856)))+(((x854)*((sj1)*(sj1))))+(((sj1)*(x852)*(x853)))+(((x852)*(x855)))+(((IkReal(-0.983000000000000))*(x859)))+(((pz)*(x857)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x860=IKcos(j2);
IkReal x861=IKsin(j2);
IkReal x862=((IkReal(1.00000000000000))*(sj0));
IkReal x863=((r10)*(sj5));
IkReal x864=((cj5)*(r11));
IkReal x865=((r20)*(sj5));
IkReal x866=((IkReal(0.00200000000000000))*(sj0));
IkReal x867=((IkReal(1.00000000000000))*(cj0));
IkReal x868=((cj5)*(r01));
IkReal x869=((cj5)*(r21));
IkReal x870=((cj0)*(r00)*(sj5));
IkReal x871=((sj1)*(x860));
IkReal x872=((cj1)*(x860));
IkReal x873=((sj1)*(x861));
IkReal x874=((cj1)*(x861));
evalcond[0]=((((sj3)*(x873)))+(((IkReal(-1.00000000000000))*(x865)))+(((IkReal(-1.00000000000000))*(x869)))+(((IkReal(-1.00000000000000))*(sj3)*(x872))));
evalcond[1]=((((sj3)*(x874)))+(((sj3)*(x871)))+(((IkReal(-1.00000000000000))*(x862)*(x863)))+(((IkReal(-1.00000000000000))*(x862)*(x864)))+(((IkReal(-1.00000000000000))*(x867)*(x868)))+(((IkReal(-1.00000000000000))*(r00)*(sj5)*(x867))));
evalcond[2]=((((IkReal(0.169000000000000))*(x872)))+(((IkReal(1.00400000000000))*(cj1)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-0.169000000000000))*(x873)))+(((IkReal(-0.00200000000000000))*(x865)))+(((IkReal(-0.00200000000000000))*(x869)))+(((IkReal(-0.00400000000000000))*(sj1)))+(((IkReal(0.983000000000000))*(x871)))+(((IkReal(0.983000000000000))*(x874))));
evalcond[3]=((IkReal(0.424000000000000))+(((IkReal(-0.983000000000000))*(x873)))+(((IkReal(-1.00400000000000))*(sj1)))+(((IkReal(-1.00000000000000))*(x864)*(x866)))+(((IkReal(-0.00400000000000000))*(cj1)))+(((IkReal(-1.00000000000000))*(py)*(x862)))+(((IkReal(-0.169000000000000))*(x874)))+(((IkReal(-0.169000000000000))*(x871)))+(((IkReal(-0.00200000000000000))*(x870)))+(((IkReal(-1.00000000000000))*(px)*(x867)))+(((IkReal(0.983000000000000))*(x872)))+(((IkReal(-1.00000000000000))*(x863)*(x866)))+(((IkReal(-0.00200000000000000))*(cj0)*(x868))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst14;
gconst14=IKsign((((r22)*(r22))+((((cj5)*(cj5))*((r20)*(r20))))+(((IkReal(-2.00000000000000))*(cj5)*(r20)*(r21)*(sj5)))+((((r21)*(r21))*((sj5)*(sj5))))));
dummyeval[0]=(((r22)*(r22))+((((cj5)*(cj5))*((r20)*(r20))))+(((IkReal(-2.00000000000000))*(cj5)*(r20)*(r21)*(sj5)))+((((r21)*(r21))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst15;
IkReal x875=((cj0)*(sj5));
IkReal x876=((sj0)*(sj5));
IkReal x877=((IkReal(1.00000000000000))*(r22));
IkReal x878=((cj0)*(cj5));
IkReal x879=((cj5)*(sj0));
gconst15=IKsign(((((IkReal(-1.00000000000000))*(r02)*(r20)*(x879)))+(((r12)*(r20)*(x878)))+(((IkReal(-1.00000000000000))*(r01)*(x876)*(x877)))+(((r00)*(r22)*(x879)))+(((r02)*(r21)*(x876)))+(((IkReal(-1.00000000000000))*(r10)*(x877)*(x878)))+(((IkReal(-1.00000000000000))*(r12)*(r21)*(x875)))+(((r11)*(r22)*(x875)))));
IkReal x880=((cj0)*(sj5));
IkReal x881=((sj0)*(sj5));
IkReal x882=((IkReal(1.00000000000000))*(r22));
IkReal x883=((cj0)*(cj5));
IkReal x884=((cj5)*(sj0));
dummyeval[0]=((((IkReal(-1.00000000000000))*(r01)*(x881)*(x882)))+(((IkReal(-1.00000000000000))*(r02)*(r20)*(x884)))+(((r11)*(r22)*(x880)))+(((IkReal(-1.00000000000000))*(r10)*(x882)*(x883)))+(((r12)*(r20)*(x883)))+(((r00)*(r22)*(x884)))+(((IkReal(-1.00000000000000))*(r12)*(r21)*(x880)))+(((r02)*(r21)*(x881))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x885=((r02)*(sj0));
IkReal x886=((cj2)*(sj1));
IkReal x887=((cj1)*(sj2));
IkReal x888=((IkReal(1.00000000000000))*(cj0));
IkReal x889=((r11)*(sj5));
IkReal x890=((cj0)*(cj5)*(r10));
IkReal x891=((r01)*(sj0)*(sj5));
IkReal x892=((IkReal(1.00000000000000))*(cj5)*(r00)*(sj0));
if( IKabs(((gconst15)*(((((IkReal(-1.00000000000000))*(r12)*(x887)*(x888)))+(((IkReal(-1.00000000000000))*(r12)*(x886)*(x888)))+(((x885)*(x887)))+(((x885)*(x886))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst15)*(((((x886)*(x891)))+(((x886)*(x890)))+(((IkReal(-1.00000000000000))*(x886)*(x888)*(x889)))+(((IkReal(-1.00000000000000))*(x887)*(x888)*(x889)))+(((x887)*(x890)))+(((x887)*(x891)))+(((IkReal(-1.00000000000000))*(x886)*(x892)))+(((IkReal(-1.00000000000000))*(x887)*(x892))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst15)*(((((IkReal(-1.00000000000000))*(r12)*(x887)*(x888)))+(((IkReal(-1.00000000000000))*(r12)*(x886)*(x888)))+(((x885)*(x887)))+(((x885)*(x886)))))), ((gconst15)*(((((x886)*(x891)))+(((x886)*(x890)))+(((IkReal(-1.00000000000000))*(x886)*(x888)*(x889)))+(((IkReal(-1.00000000000000))*(x887)*(x888)*(x889)))+(((x887)*(x890)))+(((x887)*(x891)))+(((IkReal(-1.00000000000000))*(x886)*(x892)))+(((IkReal(-1.00000000000000))*(x887)*(x892)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x893=IKsin(j4);
IkReal x894=IKcos(j4);
IkReal x895=((r12)*(sj0));
IkReal x896=((r01)*(sj5));
IkReal x897=((cj5)*(r00));
IkReal x898=((cj2)*(cj3));
IkReal x899=((IkReal(1.00000000000000))*(sj1));
IkReal x900=((cj5)*(r20));
IkReal x901=((IkReal(1.00000000000000))*(sj5));
IkReal x902=((r11)*(sj5));
IkReal x903=((cj3)*(sj2));
IkReal x904=((cj5)*(r10));
IkReal x905=((IkReal(1.00000000000000))*(x893));
IkReal x906=((cj0)*(x894));
IkReal x907=((sj0)*(x894));
IkReal x908=((cj0)*(x893));
IkReal x909=((sj0)*(x893));
evalcond[0]=((((cj2)*(sj1)))+(((cj1)*(sj2)))+(((x893)*(x900)))+(((IkReal(-1.00000000000000))*(r21)*(x893)*(x901)))+(((r22)*(x894))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r22)*(x905)))+(((x894)*(x900)))+(((IkReal(-1.00000000000000))*(r21)*(x894)*(x901)))+(((cj1)*(x898)))+(((IkReal(-1.00000000000000))*(x899)*(x903))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj0)*(x904)*(x905)))+(((IkReal(-1.00000000000000))*(sj0)*(x896)*(x905)))+(((x902)*(x908)))+(((r02)*(x907)))+(((x897)*(x909)))+(((IkReal(-1.00000000000000))*(r12)*(x906))));
evalcond[3]=((sj3)+(((x902)*(x906)))+(((x897)*(x907)))+(((r12)*(x908)))+(((IkReal(-1.00000000000000))*(x904)*(x906)))+(((IkReal(-1.00000000000000))*(x896)*(x907)))+(((IkReal(-1.00000000000000))*(r02)*(sj0)*(x905))));
evalcond[4]=((((x894)*(x895)))+(((r02)*(x906)))+(((x897)*(x908)))+(((cj1)*(cj2)))+(((IkReal(-1.00000000000000))*(cj0)*(x896)*(x905)))+(((IkReal(-1.00000000000000))*(r11)*(x901)*(x909)))+(((IkReal(-1.00000000000000))*(sj2)*(x899)))+(((x904)*(x909))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x898)*(x899)))+(((IkReal(-1.00000000000000))*(x895)*(x905)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x905)))+(((x897)*(x906)))+(((IkReal(-1.00000000000000))*(cj1)*(x903)))+(((IkReal(-1.00000000000000))*(x896)*(x906)))+(((IkReal(-1.00000000000000))*(r11)*(x901)*(x907)))+(((x904)*(x907))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x910=((cj2)*(sj1));
IkReal x911=((cj1)*(sj2));
IkReal x912=((IkReal(1.00000000000000))*(r22));
IkReal x913=((r21)*(sj5));
IkReal x914=((IkReal(1.00000000000000))*(cj5)*(r20));
IkReal x915=((cj3)*(sj1)*(sj2));
IkReal x916=((cj1)*(cj2)*(cj3));
if( IKabs(((gconst14)*(((((x910)*(x913)))+(((x911)*(x913)))+(((IkReal(-1.00000000000000))*(x910)*(x914)))+(((r22)*(x916)))+(((IkReal(-1.00000000000000))*(x912)*(x915)))+(((IkReal(-1.00000000000000))*(x911)*(x914))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst14)*(((((cj5)*(r20)*(x915)))+(((IkReal(-1.00000000000000))*(x910)*(x912)))+(((IkReal(-1.00000000000000))*(x914)*(x916)))+(((IkReal(-1.00000000000000))*(x913)*(x915)))+(((x913)*(x916)))+(((IkReal(-1.00000000000000))*(x911)*(x912))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst14)*(((((x910)*(x913)))+(((x911)*(x913)))+(((IkReal(-1.00000000000000))*(x910)*(x914)))+(((r22)*(x916)))+(((IkReal(-1.00000000000000))*(x912)*(x915)))+(((IkReal(-1.00000000000000))*(x911)*(x914)))))), ((gconst14)*(((((cj5)*(r20)*(x915)))+(((IkReal(-1.00000000000000))*(x910)*(x912)))+(((IkReal(-1.00000000000000))*(x914)*(x916)))+(((IkReal(-1.00000000000000))*(x913)*(x915)))+(((x913)*(x916)))+(((IkReal(-1.00000000000000))*(x911)*(x912)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x917=IKsin(j4);
IkReal x918=IKcos(j4);
IkReal x919=((r12)*(sj0));
IkReal x920=((r01)*(sj5));
IkReal x921=((cj5)*(r00));
IkReal x922=((cj2)*(cj3));
IkReal x923=((IkReal(1.00000000000000))*(sj1));
IkReal x924=((cj5)*(r20));
IkReal x925=((IkReal(1.00000000000000))*(sj5));
IkReal x926=((r11)*(sj5));
IkReal x927=((cj3)*(sj2));
IkReal x928=((cj5)*(r10));
IkReal x929=((IkReal(1.00000000000000))*(x917));
IkReal x930=((cj0)*(x918));
IkReal x931=((sj0)*(x918));
IkReal x932=((cj0)*(x917));
IkReal x933=((sj0)*(x917));
evalcond[0]=((((cj2)*(sj1)))+(((IkReal(-1.00000000000000))*(r21)*(x917)*(x925)))+(((cj1)*(sj2)))+(((x917)*(x924)))+(((r22)*(x918))));
evalcond[1]=((((x918)*(x924)))+(((IkReal(-1.00000000000000))*(r22)*(x929)))+(((IkReal(-1.00000000000000))*(r21)*(x918)*(x925)))+(((cj1)*(x922)))+(((IkReal(-1.00000000000000))*(x923)*(x927))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj0)*(x920)*(x929)))+(((x921)*(x933)))+(((IkReal(-1.00000000000000))*(r12)*(x930)))+(((x926)*(x932)))+(((IkReal(-1.00000000000000))*(cj0)*(x928)*(x929)))+(((r02)*(x931))));
evalcond[3]=((sj3)+(((IkReal(-1.00000000000000))*(x920)*(x931)))+(((x921)*(x931)))+(((IkReal(-1.00000000000000))*(r02)*(sj0)*(x929)))+(((r12)*(x932)))+(((x926)*(x930)))+(((IkReal(-1.00000000000000))*(x928)*(x930))));
evalcond[4]=((((IkReal(-1.00000000000000))*(sj2)*(x923)))+(((x928)*(x933)))+(((x918)*(x919)))+(((x921)*(x932)))+(((IkReal(-1.00000000000000))*(cj0)*(x920)*(x929)))+(((IkReal(-1.00000000000000))*(r11)*(x925)*(x933)))+(((cj1)*(cj2)))+(((r02)*(x930))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj1)*(x927)))+(((IkReal(-1.00000000000000))*(x920)*(x930)))+(((x928)*(x931)))+(((x921)*(x930)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x929)))+(((IkReal(-1.00000000000000))*(r11)*(x925)*(x931)))+(((IkReal(-1.00000000000000))*(x919)*(x929)))+(((IkReal(-1.00000000000000))*(x922)*(x923))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x934=((IkReal(1.00000000000000))*(cj1));
IkReal x935=((cj5)*(r21));
IkReal x936=((cj5)*(sj1));
IkReal x937=((r11)*(sj0));
IkReal x938=((sj1)*(sj5));
IkReal x939=((cj0)*(r01));
IkReal x940=((cj0)*(r00));
IkReal x941=((cj1)*(sj5));
IkReal x942=((r10)*(sj0));
IkReal x943=((cj1)*(cj5));
if( IKabs(((gconst1)*(((((sj1)*(x935)))+(((x937)*(x943)))+(((x939)*(x943)))+(((x941)*(x942)))+(((r20)*(x938)))+(((x940)*(x941))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((x936)*(x939)))+(((x936)*(x937)))+(((x938)*(x940)))+(((x938)*(x942)))+(((IkReal(-1.00000000000000))*(x934)*(x935)))+(((IkReal(-1.00000000000000))*(r20)*(sj5)*(x934))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst1)*(((((sj1)*(x935)))+(((x937)*(x943)))+(((x939)*(x943)))+(((x941)*(x942)))+(((r20)*(x938)))+(((x940)*(x941)))))), ((gconst1)*(((((x936)*(x939)))+(((x936)*(x937)))+(((x938)*(x940)))+(((x938)*(x942)))+(((IkReal(-1.00000000000000))*(x934)*(x935)))+(((IkReal(-1.00000000000000))*(r20)*(sj5)*(x934)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x944=IKcos(j2);
IkReal x945=IKsin(j2);
IkReal x946=((IkReal(1.00000000000000))*(sj0));
IkReal x947=((r10)*(sj5));
IkReal x948=((cj5)*(r11));
IkReal x949=((r20)*(sj5));
IkReal x950=((IkReal(0.00200000000000000))*(sj0));
IkReal x951=((IkReal(1.00000000000000))*(cj0));
IkReal x952=((cj5)*(r01));
IkReal x953=((cj5)*(r21));
IkReal x954=((cj0)*(r00)*(sj5));
IkReal x955=((sj1)*(x944));
IkReal x956=((cj1)*(x944));
IkReal x957=((sj1)*(x945));
IkReal x958=((cj1)*(x945));
evalcond[0]=((((IkReal(-1.00000000000000))*(x953)))+(((IkReal(-1.00000000000000))*(x949)))+(((sj3)*(x957)))+(((IkReal(-1.00000000000000))*(sj3)*(x956))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x946)*(x948)))+(((IkReal(-1.00000000000000))*(x946)*(x947)))+(((sj3)*(x958)))+(((sj3)*(x955)))+(((IkReal(-1.00000000000000))*(x951)*(x952)))+(((IkReal(-1.00000000000000))*(r00)*(sj5)*(x951))));
evalcond[2]=((((IkReal(-0.00200000000000000))*(x949)))+(((IkReal(-0.169000000000000))*(x957)))+(((IkReal(1.00400000000000))*(cj1)))+(((IkReal(-0.00200000000000000))*(x953)))+(((IkReal(0.169000000000000))*(x956)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(0.983000000000000))*(x955)))+(((IkReal(0.983000000000000))*(x958)))+(((IkReal(-0.00400000000000000))*(sj1))));
evalcond[3]=((IkReal(0.424000000000000))+(((IkReal(-1.00000000000000))*(py)*(x946)))+(((IkReal(-0.00200000000000000))*(cj0)*(x952)))+(((IkReal(-0.169000000000000))*(x955)))+(((IkReal(-0.169000000000000))*(x958)))+(((IkReal(-1.00400000000000))*(sj1)))+(((IkReal(-0.00200000000000000))*(x954)))+(((IkReal(-0.983000000000000))*(x957)))+(((IkReal(-0.00400000000000000))*(cj1)))+(((IkReal(-1.00000000000000))*(x947)*(x950)))+(((IkReal(-1.00000000000000))*(px)*(x951)))+(((IkReal(0.983000000000000))*(x956)))+(((IkReal(-1.00000000000000))*(x948)*(x950))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst14;
gconst14=IKsign((((r22)*(r22))+((((cj5)*(cj5))*((r20)*(r20))))+(((IkReal(-2.00000000000000))*(cj5)*(r20)*(r21)*(sj5)))+((((r21)*(r21))*((sj5)*(sj5))))));
dummyeval[0]=(((r22)*(r22))+((((cj5)*(cj5))*((r20)*(r20))))+(((IkReal(-2.00000000000000))*(cj5)*(r20)*(r21)*(sj5)))+((((r21)*(r21))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst15;
IkReal x959=((cj0)*(sj5));
IkReal x960=((sj0)*(sj5));
IkReal x961=((IkReal(1.00000000000000))*(r22));
IkReal x962=((cj0)*(cj5));
IkReal x963=((cj5)*(sj0));
gconst15=IKsign(((((r11)*(r22)*(x959)))+(((r02)*(r21)*(x960)))+(((r00)*(r22)*(x963)))+(((IkReal(-1.00000000000000))*(r12)*(r21)*(x959)))+(((IkReal(-1.00000000000000))*(r10)*(x961)*(x962)))+(((IkReal(-1.00000000000000))*(r01)*(x960)*(x961)))+(((IkReal(-1.00000000000000))*(r02)*(r20)*(x963)))+(((r12)*(r20)*(x962)))));
IkReal x964=((cj0)*(sj5));
IkReal x965=((sj0)*(sj5));
IkReal x966=((IkReal(1.00000000000000))*(r22));
IkReal x967=((cj0)*(cj5));
IkReal x968=((cj5)*(sj0));
dummyeval[0]=((((r11)*(r22)*(x964)))+(((IkReal(-1.00000000000000))*(r10)*(x966)*(x967)))+(((r02)*(r21)*(x965)))+(((r00)*(r22)*(x968)))+(((IkReal(-1.00000000000000))*(r12)*(r21)*(x964)))+(((IkReal(-1.00000000000000))*(r01)*(x965)*(x966)))+(((IkReal(-1.00000000000000))*(r02)*(r20)*(x968)))+(((r12)*(r20)*(x967))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x969=((r02)*(sj0));
IkReal x970=((cj2)*(sj1));
IkReal x971=((cj1)*(sj2));
IkReal x972=((IkReal(1.00000000000000))*(cj0));
IkReal x973=((r11)*(sj5));
IkReal x974=((cj0)*(cj5)*(r10));
IkReal x975=((r01)*(sj0)*(sj5));
IkReal x976=((IkReal(1.00000000000000))*(cj5)*(r00)*(sj0));
if( IKabs(((gconst15)*(((((x969)*(x970)))+(((x969)*(x971)))+(((IkReal(-1.00000000000000))*(r12)*(x971)*(x972)))+(((IkReal(-1.00000000000000))*(r12)*(x970)*(x972))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst15)*(((((IkReal(-1.00000000000000))*(x971)*(x976)))+(((IkReal(-1.00000000000000))*(x970)*(x972)*(x973)))+(((IkReal(-1.00000000000000))*(x970)*(x976)))+(((x971)*(x975)))+(((x971)*(x974)))+(((x970)*(x974)))+(((x970)*(x975)))+(((IkReal(-1.00000000000000))*(x971)*(x972)*(x973))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst15)*(((((x969)*(x970)))+(((x969)*(x971)))+(((IkReal(-1.00000000000000))*(r12)*(x971)*(x972)))+(((IkReal(-1.00000000000000))*(r12)*(x970)*(x972)))))), ((gconst15)*(((((IkReal(-1.00000000000000))*(x971)*(x976)))+(((IkReal(-1.00000000000000))*(x970)*(x972)*(x973)))+(((IkReal(-1.00000000000000))*(x970)*(x976)))+(((x971)*(x975)))+(((x971)*(x974)))+(((x970)*(x974)))+(((x970)*(x975)))+(((IkReal(-1.00000000000000))*(x971)*(x972)*(x973)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x977=IKsin(j4);
IkReal x978=IKcos(j4);
IkReal x979=((r12)*(sj0));
IkReal x980=((r01)*(sj5));
IkReal x981=((cj5)*(r00));
IkReal x982=((cj2)*(cj3));
IkReal x983=((IkReal(1.00000000000000))*(sj1));
IkReal x984=((cj5)*(r20));
IkReal x985=((IkReal(1.00000000000000))*(sj5));
IkReal x986=((r11)*(sj5));
IkReal x987=((cj3)*(sj2));
IkReal x988=((cj5)*(r10));
IkReal x989=((IkReal(1.00000000000000))*(x977));
IkReal x990=((cj0)*(x978));
IkReal x991=((sj0)*(x978));
IkReal x992=((cj0)*(x977));
IkReal x993=((sj0)*(x977));
evalcond[0]=((((cj2)*(sj1)))+(((IkReal(-1.00000000000000))*(r21)*(x977)*(x985)))+(((r22)*(x978)))+(((cj1)*(sj2)))+(((x977)*(x984))));
evalcond[1]=((((cj1)*(x982)))+(((IkReal(-1.00000000000000))*(r21)*(x978)*(x985)))+(((IkReal(-1.00000000000000))*(r22)*(x989)))+(((IkReal(-1.00000000000000))*(x983)*(x987)))+(((x978)*(x984))));
evalcond[2]=((((x986)*(x992)))+(((r02)*(x991)))+(((x981)*(x993)))+(((IkReal(-1.00000000000000))*(cj0)*(x988)*(x989)))+(((IkReal(-1.00000000000000))*(sj0)*(x980)*(x989)))+(((IkReal(-1.00000000000000))*(r12)*(x990))));
evalcond[3]=((((r12)*(x992)))+(sj3)+(((x986)*(x990)))+(((IkReal(-1.00000000000000))*(x988)*(x990)))+(((x981)*(x991)))+(((IkReal(-1.00000000000000))*(r02)*(sj0)*(x989)))+(((IkReal(-1.00000000000000))*(x980)*(x991))));
evalcond[4]=((((x978)*(x979)))+(((IkReal(-1.00000000000000))*(r11)*(x985)*(x993)))+(((x988)*(x993)))+(((r02)*(x990)))+(((x981)*(x992)))+(((cj1)*(cj2)))+(((IkReal(-1.00000000000000))*(sj2)*(x983)))+(((IkReal(-1.00000000000000))*(cj0)*(x980)*(x989))));
evalcond[5]=((((IkReal(-1.00000000000000))*(r11)*(x985)*(x991)))+(((x988)*(x991)))+(((IkReal(-1.00000000000000))*(cj1)*(x987)))+(((IkReal(-1.00000000000000))*(x982)*(x983)))+(((x981)*(x990)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x989)))+(((IkReal(-1.00000000000000))*(x979)*(x989)))+(((IkReal(-1.00000000000000))*(x980)*(x990))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x994=((cj2)*(sj1));
IkReal x995=((cj1)*(sj2));
IkReal x996=((IkReal(1.00000000000000))*(r22));
IkReal x997=((r21)*(sj5));
IkReal x998=((IkReal(1.00000000000000))*(cj5)*(r20));
IkReal x999=((cj3)*(sj1)*(sj2));
IkReal x1000=((cj1)*(cj2)*(cj3));
if( IKabs(((gconst14)*(((((x994)*(x997)))+(((IkReal(-1.00000000000000))*(x994)*(x998)))+(((IkReal(-1.00000000000000))*(x995)*(x998)))+(((IkReal(-1.00000000000000))*(x996)*(x999)))+(((x995)*(x997)))+(((r22)*(x1000))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst14)*(((((x1000)*(x997)))+(((IkReal(-1.00000000000000))*(x994)*(x996)))+(((IkReal(-1.00000000000000))*(x995)*(x996)))+(((IkReal(-1.00000000000000))*(x1000)*(x998)))+(((IkReal(-1.00000000000000))*(x997)*(x999)))+(((cj5)*(r20)*(x999))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst14)*(((((x994)*(x997)))+(((IkReal(-1.00000000000000))*(x994)*(x998)))+(((IkReal(-1.00000000000000))*(x995)*(x998)))+(((IkReal(-1.00000000000000))*(x996)*(x999)))+(((x995)*(x997)))+(((r22)*(x1000)))))), ((gconst14)*(((((x1000)*(x997)))+(((IkReal(-1.00000000000000))*(x994)*(x996)))+(((IkReal(-1.00000000000000))*(x995)*(x996)))+(((IkReal(-1.00000000000000))*(x1000)*(x998)))+(((IkReal(-1.00000000000000))*(x997)*(x999)))+(((cj5)*(r20)*(x999)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1001=IKsin(j4);
IkReal x1002=IKcos(j4);
IkReal x1003=((r12)*(sj0));
IkReal x1004=((r01)*(sj5));
IkReal x1005=((cj5)*(r00));
IkReal x1006=((cj2)*(cj3));
IkReal x1007=((IkReal(1.00000000000000))*(sj1));
IkReal x1008=((cj5)*(r20));
IkReal x1009=((IkReal(1.00000000000000))*(sj5));
IkReal x1010=((r11)*(sj5));
IkReal x1011=((cj3)*(sj2));
IkReal x1012=((cj5)*(r10));
IkReal x1013=((IkReal(1.00000000000000))*(x1001));
IkReal x1014=((cj0)*(x1002));
IkReal x1015=((sj0)*(x1002));
IkReal x1016=((cj0)*(x1001));
IkReal x1017=((sj0)*(x1001));
evalcond[0]=((((cj2)*(sj1)))+(((cj1)*(sj2)))+(((IkReal(-1.00000000000000))*(r21)*(x1001)*(x1009)))+(((x1001)*(x1008)))+(((r22)*(x1002))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r22)*(x1013)))+(((cj1)*(x1006)))+(((IkReal(-1.00000000000000))*(r21)*(x1002)*(x1009)))+(((IkReal(-1.00000000000000))*(x1007)*(x1011)))+(((x1002)*(x1008))));
evalcond[2]=((((r02)*(x1015)))+(((IkReal(-1.00000000000000))*(cj0)*(x1012)*(x1013)))+(((x1005)*(x1017)))+(((IkReal(-1.00000000000000))*(sj0)*(x1004)*(x1013)))+(((IkReal(-1.00000000000000))*(r12)*(x1014)))+(((x1010)*(x1016))));
evalcond[3]=((((IkReal(-1.00000000000000))*(r02)*(sj0)*(x1013)))+(sj3)+(((IkReal(-1.00000000000000))*(x1004)*(x1015)))+(((x1005)*(x1015)))+(((r12)*(x1016)))+(((IkReal(-1.00000000000000))*(x1012)*(x1014)))+(((x1010)*(x1014))));
evalcond[4]=((((IkReal(-1.00000000000000))*(r11)*(x1009)*(x1017)))+(((r02)*(x1014)))+(((x1012)*(x1017)))+(((x1005)*(x1016)))+(((IkReal(-1.00000000000000))*(sj2)*(x1007)))+(((cj1)*(cj2)))+(((x1002)*(x1003)))+(((IkReal(-1.00000000000000))*(cj0)*(x1004)*(x1013))));
evalcond[5]=((((IkReal(-1.00000000000000))*(r11)*(x1009)*(x1015)))+(((IkReal(-1.00000000000000))*(x1004)*(x1014)))+(((IkReal(-1.00000000000000))*(x1006)*(x1007)))+(((x1012)*(x1015)))+(((x1005)*(x1014)))+(((IkReal(-1.00000000000000))*(cj1)*(x1011)))+(((IkReal(-1.00000000000000))*(x1003)*(x1013)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x1013))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1018=(sj1)*(sj1);
IkReal x1019=(cj1)*(cj1);
IkReal x1020=((IkReal(0.000338000000000000))*(sj1));
IkReal x1021=((r20)*(sj5));
IkReal x1022=((IkReal(0.983000000000000))*(cj1));
IkReal x1023=((py)*(sj0));
IkReal x1024=((cj0)*(px));
IkReal x1025=((IkReal(0.983000000000000))*(sj1));
IkReal x1026=((r11)*(sj0));
IkReal x1027=((IkReal(0.169000000000000))*(cj1));
IkReal x1028=((cj0)*(r01));
IkReal x1029=((IkReal(0.169000000000000))*(sj1));
IkReal x1030=((IkReal(0.000338000000000000))*(cj1));
IkReal x1031=((IkReal(0.00196600000000000))*(cj1));
IkReal x1032=((IkReal(0.00196600000000000))*(sj1));
IkReal x1033=((cj5)*(x1030));
IkReal x1034=((cj5)*(x1032));
IkReal x1035=((cj0)*(r00)*(sj5));
IkReal x1036=((r10)*(sj0)*(sj5));
IkReal x1037=((cj5)*(x1031));
IkReal x1038=((IkReal(0.00196600000000000))*(x1036));
if( IKabs(((gconst0)*(((((x1030)*(x1036)))+(((x1030)*(x1035)))+(((IkReal(-1.00000000000000))*(pz)*(x1022)))+(((IkReal(-1.00000000000000))*(x1021)*(x1031)))+(((x1026)*(x1034)))+(((x1026)*(x1033)))+(((IkReal(-1.00000000000000))*(r21)*(x1037)))+(((x1023)*(x1025)))+(((x1023)*(x1027)))+(((x1028)*(x1034)))+(((x1028)*(x1033)))+(((IkReal(-0.416792000000000))*(sj1)))+(((x1020)*(x1021)))+(((cj5)*(r21)*(x1020)))+(((x1024)*(x1027)))+(((x1024)*(x1025)))+(((x1032)*(x1035)))+(((x1032)*(x1036)))+(((IkReal(0.987608000000000))*(x1019)))+(((IkReal(0.987608000000000))*(x1018)))+(((IkReal(-0.0716560000000000))*(cj1)))+(((pz)*(x1029))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((IkReal(0.416792000000000))*(cj1)))+(((x1020)*(x1035)))+(((x1020)*(x1036)))+(((IkReal(-1.00000000000000))*(x1028)*(x1037)))+(((IkReal(-1.00000000000000))*(pz)*(x1027)))+(((IkReal(-1.00000000000000))*(pz)*(x1025)))+(((IkReal(-1.00000000000000))*(x1021)*(x1032)))+(((IkReal(-1.00000000000000))*(x1021)*(x1030)))+(((cj5)*(x1020)*(x1028)))+(((cj5)*(x1020)*(x1026)))+(((IkReal(-1.00000000000000))*(x1022)*(x1024)))+(((IkReal(-1.00000000000000))*(x1022)*(x1023)))+(((IkReal(-1.00000000000000))*(x1026)*(x1037)))+(((IkReal(-1.00000000000000))*(r21)*(x1034)))+(((IkReal(-1.00000000000000))*(r21)*(x1033)))+(((x1023)*(x1029)))+(((IkReal(-1.00000000000000))*(x1031)*(x1035)))+(((IkReal(-1.00000000000000))*(x1031)*(x1036)))+(((x1024)*(x1029)))+(((IkReal(0.165744000000000))*(x1018)))+(((IkReal(0.165744000000000))*(x1019)))+(((IkReal(-0.0716560000000000))*(sj1))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst0)*(((((x1030)*(x1036)))+(((x1030)*(x1035)))+(((IkReal(-1.00000000000000))*(pz)*(x1022)))+(((IkReal(-1.00000000000000))*(x1021)*(x1031)))+(((x1026)*(x1034)))+(((x1026)*(x1033)))+(((IkReal(-1.00000000000000))*(r21)*(x1037)))+(((x1023)*(x1025)))+(((x1023)*(x1027)))+(((x1028)*(x1034)))+(((x1028)*(x1033)))+(((IkReal(-0.416792000000000))*(sj1)))+(((x1020)*(x1021)))+(((cj5)*(r21)*(x1020)))+(((x1024)*(x1027)))+(((x1024)*(x1025)))+(((x1032)*(x1035)))+(((x1032)*(x1036)))+(((IkReal(0.987608000000000))*(x1019)))+(((IkReal(0.987608000000000))*(x1018)))+(((IkReal(-0.0716560000000000))*(cj1)))+(((pz)*(x1029)))))), ((gconst0)*(((((IkReal(0.416792000000000))*(cj1)))+(((x1020)*(x1035)))+(((x1020)*(x1036)))+(((IkReal(-1.00000000000000))*(x1028)*(x1037)))+(((IkReal(-1.00000000000000))*(pz)*(x1027)))+(((IkReal(-1.00000000000000))*(pz)*(x1025)))+(((IkReal(-1.00000000000000))*(x1021)*(x1032)))+(((IkReal(-1.00000000000000))*(x1021)*(x1030)))+(((cj5)*(x1020)*(x1028)))+(((cj5)*(x1020)*(x1026)))+(((IkReal(-1.00000000000000))*(x1022)*(x1024)))+(((IkReal(-1.00000000000000))*(x1022)*(x1023)))+(((IkReal(-1.00000000000000))*(x1026)*(x1037)))+(((IkReal(-1.00000000000000))*(r21)*(x1034)))+(((IkReal(-1.00000000000000))*(r21)*(x1033)))+(((x1023)*(x1029)))+(((IkReal(-1.00000000000000))*(x1031)*(x1035)))+(((IkReal(-1.00000000000000))*(x1031)*(x1036)))+(((x1024)*(x1029)))+(((IkReal(0.165744000000000))*(x1018)))+(((IkReal(0.165744000000000))*(x1019)))+(((IkReal(-0.0716560000000000))*(sj1)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
IkReal x1039=IKcos(j2);
IkReal x1040=IKsin(j2);
IkReal x1041=((IkReal(0.169000000000000))*(cj1));
IkReal x1042=((IkReal(0.00200000000000000))*(cj0));
IkReal x1043=((IkReal(0.00200000000000000))*(cj5));
IkReal x1044=((IkReal(0.00200000000000000))*(sj5));
IkReal x1045=((IkReal(0.169000000000000))*(sj1));
IkReal x1046=((IkReal(0.983000000000000))*(x1040));
IkReal x1047=((IkReal(0.983000000000000))*(x1039));
evalcond[0]=((((IkReal(1.00400000000000))*(cj1)))+(((x1039)*(x1041)))+(((cj1)*(x1046)))+(((IkReal(-1.00000000000000))*(pz)))+(((sj1)*(x1047)))+(((IkReal(-1.00000000000000))*(x1040)*(x1045)))+(((IkReal(-0.00400000000000000))*(sj1)))+(((IkReal(-1.00000000000000))*(r21)*(x1043)))+(((IkReal(-1.00000000000000))*(r20)*(x1044))));
evalcond[1]=((IkReal(0.424000000000000))+(((IkReal(-1.00000000000000))*(r10)*(sj0)*(x1044)))+(((IkReal(-1.00400000000000))*(sj1)))+(((IkReal(-1.00000000000000))*(x1039)*(x1045)))+(((IkReal(-1.00000000000000))*(r11)*(sj0)*(x1043)))+(((cj1)*(x1047)))+(((IkReal(-1.00000000000000))*(sj1)*(x1046)))+(((IkReal(-0.00400000000000000))*(cj1)))+(((IkReal(-1.00000000000000))*(cj5)*(r01)*(x1042)))+(((IkReal(-1.00000000000000))*(r00)*(sj5)*(x1042)))+(((IkReal(-1.00000000000000))*(py)*(sj0)))+(((IkReal(-1.00000000000000))*(x1040)*(x1041)))+(((IkReal(-1.00000000000000))*(cj0)*(px))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst26;
IkReal x1048=((cj0)*(sj5));
IkReal x1049=((sj0)*(sj5));
IkReal x1050=((IkReal(1.00000000000000))*(r22));
IkReal x1051=((cj0)*(cj5));
IkReal x1052=((cj5)*(sj0));
gconst26=IKsign(((((IkReal(-1.00000000000000))*(r02)*(r20)*(x1052)))+(((r12)*(r20)*(x1051)))+(((r02)*(r21)*(x1049)))+(((IkReal(-1.00000000000000))*(r12)*(r21)*(x1048)))+(((IkReal(-1.00000000000000))*(r01)*(x1049)*(x1050)))+(((IkReal(-1.00000000000000))*(r10)*(x1050)*(x1051)))+(((r11)*(r22)*(x1048)))+(((r00)*(r22)*(x1052)))));
IkReal x1053=((cj0)*(sj5));
IkReal x1054=((sj0)*(sj5));
IkReal x1055=((IkReal(1.00000000000000))*(r22));
IkReal x1056=((cj0)*(cj5));
IkReal x1057=((cj5)*(sj0));
dummyeval[0]=((((IkReal(-1.00000000000000))*(r01)*(x1054)*(x1055)))+(((IkReal(-1.00000000000000))*(r02)*(r20)*(x1057)))+(((r02)*(r21)*(x1054)))+(((IkReal(-1.00000000000000))*(r12)*(r21)*(x1053)))+(((r12)*(r20)*(x1056)))+(((IkReal(-1.00000000000000))*(r10)*(x1055)*(x1056)))+(((r11)*(r22)*(x1053)))+(((r00)*(r22)*(x1057))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst27;
IkReal x1058=((IkReal(1.00000000000000))*(sj0));
IkReal x1059=((cj5)*(r20));
IkReal x1060=((r22)*(sj5));
IkReal x1061=((cj5)*(r22));
IkReal x1062=((r21)*(sj5));
IkReal x1063=((cj0)*(r02));
gconst27=IKsign(((((IkReal(-1.00000000000000))*(r12)*(x1058)*(x1059)))+(((r10)*(sj0)*(x1061)))+(((IkReal(-1.00000000000000))*(x1059)*(x1063)))+(((r12)*(sj0)*(x1062)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)*(x1060)))+(((x1062)*(x1063)))+(((cj0)*(r00)*(x1061)))+(((IkReal(-1.00000000000000))*(r11)*(x1058)*(x1060)))));
IkReal x1064=((IkReal(1.00000000000000))*(sj0));
IkReal x1065=((cj5)*(r20));
IkReal x1066=((r22)*(sj5));
IkReal x1067=((cj5)*(r22));
IkReal x1068=((r21)*(sj5));
IkReal x1069=((cj0)*(r02));
dummyeval[0]=((((x1068)*(x1069)))+(((IkReal(-1.00000000000000))*(r12)*(x1064)*(x1065)))+(((IkReal(-1.00000000000000))*(x1065)*(x1069)))+(((r10)*(sj0)*(x1067)))+(((r12)*(sj0)*(x1068)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)*(x1066)))+(((cj0)*(r00)*(x1067)))+(((IkReal(-1.00000000000000))*(r11)*(x1064)*(x1066))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((IkReal(-1.00000000000000))*(cj1)*(cj2)))+(((sj1)*(sj2))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1070=((IkReal(1.00000000000000))*(cj0));
if( IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(cj1)*(cj2)))+(((sj1)*(sj2))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj1)*(cj2)))+(((sj1)*(sj2)))))):(IkReal)1.0e30))*(((((cj5)*(r21)))+(((r20)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r00)*(sj0)*(sj5)))+(((cj5)*(r01)*(sj0)))+(((IkReal(-1.00000000000000))*(cj5)*(r11)*(x1070)))+(((IkReal(-1.00000000000000))*(r10)*(sj5)*(x1070))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(cj1)*(cj2)))+(((sj1)*(sj2))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj1)*(cj2)))+(((sj1)*(sj2)))))):(IkReal)1.0e30))*(((((cj5)*(r21)))+(((r20)*(sj5)))))))+IKsqr(((((r00)*(sj0)*(sj5)))+(((cj5)*(r01)*(sj0)))+(((IkReal(-1.00000000000000))*(cj5)*(r11)*(x1070)))+(((IkReal(-1.00000000000000))*(r10)*(sj5)*(x1070)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((IKabs(((((IkReal(-1.00000000000000))*(cj1)*(cj2)))+(((sj1)*(sj2))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj1)*(cj2)))+(((sj1)*(sj2)))))):(IkReal)1.0e30))*(((((cj5)*(r21)))+(((r20)*(sj5)))))), ((((r00)*(sj0)*(sj5)))+(((cj5)*(r01)*(sj0)))+(((IkReal(-1.00000000000000))*(cj5)*(r11)*(x1070)))+(((IkReal(-1.00000000000000))*(r10)*(sj5)*(x1070)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1071=IKsin(j3);
IkReal x1072=((IkReal(1.00000000000000))*(sj0));
IkReal x1073=((cj5)*(r11));
IkReal x1074=((r10)*(sj5));
IkReal x1075=((r00)*(sj5));
IkReal x1076=((cj5)*(r01));
IkReal x1077=((IkReal(1.00000000000000))*(cj0));
IkReal x1078=((cj1)*(x1071));
IkReal x1079=((sj1)*(x1071));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj2)*(x1078)))+(((sj2)*(x1079)))+(((IkReal(-1.00000000000000))*(cj5)*(r21)))+(((IkReal(-1.00000000000000))*(r20)*(sj5))));
evalcond[1]=((((cj0)*(x1074)))+(((cj0)*(x1073)))+(IKcos(j3))+(((IkReal(-1.00000000000000))*(x1072)*(x1075)))+(((IkReal(-1.00000000000000))*(x1072)*(x1076))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x1075)*(x1077)))+(((sj2)*(x1078)))+(((IkReal(-1.00000000000000))*(x1076)*(x1077)))+(((cj2)*(x1079)))+(((IkReal(-1.00000000000000))*(x1072)*(x1073)))+(((IkReal(-1.00000000000000))*(x1072)*(x1074))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst28;
gconst28=IKsign((((r22)*(r22))+((((cj5)*(cj5))*((r20)*(r20))))+(((IkReal(-2.00000000000000))*(cj5)*(r20)*(r21)*(sj5)))+((((r21)*(r21))*((sj5)*(sj5))))));
dummyeval[0]=(((r22)*(r22))+((((cj5)*(cj5))*((r20)*(r20))))+(((IkReal(-2.00000000000000))*(cj5)*(r20)*(r21)*(sj5)))+((((r21)*(r21))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst29;
IkReal x1080=((cj0)*(sj5));
IkReal x1081=((sj0)*(sj5));
IkReal x1082=((IkReal(1.00000000000000))*(r22));
IkReal x1083=((cj0)*(cj5));
IkReal x1084=((cj5)*(sj0));
gconst29=IKsign(((((r02)*(r21)*(x1081)))+(((IkReal(-1.00000000000000))*(r10)*(x1082)*(x1083)))+(((IkReal(-1.00000000000000))*(r12)*(r21)*(x1080)))+(((IkReal(-1.00000000000000))*(r01)*(x1081)*(x1082)))+(((r11)*(r22)*(x1080)))+(((r12)*(r20)*(x1083)))+(((IkReal(-1.00000000000000))*(r02)*(r20)*(x1084)))+(((r00)*(r22)*(x1084)))));
IkReal x1085=((cj0)*(sj5));
IkReal x1086=((sj0)*(sj5));
IkReal x1087=((IkReal(1.00000000000000))*(r22));
IkReal x1088=((cj0)*(cj5));
IkReal x1089=((cj5)*(sj0));
dummyeval[0]=((((IkReal(-1.00000000000000))*(r01)*(x1086)*(x1087)))+(((r02)*(r21)*(x1086)))+(((IkReal(-1.00000000000000))*(r10)*(x1087)*(x1088)))+(((IkReal(-1.00000000000000))*(r12)*(r21)*(x1085)))+(((r11)*(r22)*(x1085)))+(((r12)*(r20)*(x1088)))+(((IkReal(-1.00000000000000))*(r02)*(r20)*(x1089)))+(((r00)*(r22)*(x1089))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1090=((r02)*(sj0));
IkReal x1091=((cj2)*(sj1));
IkReal x1092=((cj1)*(sj2));
IkReal x1093=((IkReal(1.00000000000000))*(cj0));
IkReal x1094=((r11)*(sj5));
IkReal x1095=((cj0)*(cj5)*(r10));
IkReal x1096=((r01)*(sj0)*(sj5));
IkReal x1097=((IkReal(1.00000000000000))*(cj5)*(r00)*(sj0));
if( IKabs(((gconst29)*(((((IkReal(-1.00000000000000))*(r12)*(x1092)*(x1093)))+(((IkReal(-1.00000000000000))*(r12)*(x1091)*(x1093)))+(((x1090)*(x1092)))+(((x1090)*(x1091))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst29)*(((((IkReal(-1.00000000000000))*(x1091)*(x1097)))+(((x1092)*(x1096)))+(((x1092)*(x1095)))+(((IkReal(-1.00000000000000))*(x1092)*(x1097)))+(((x1091)*(x1095)))+(((x1091)*(x1096)))+(((IkReal(-1.00000000000000))*(x1092)*(x1093)*(x1094)))+(((IkReal(-1.00000000000000))*(x1091)*(x1093)*(x1094))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst29)*(((((IkReal(-1.00000000000000))*(r12)*(x1092)*(x1093)))+(((IkReal(-1.00000000000000))*(r12)*(x1091)*(x1093)))+(((x1090)*(x1092)))+(((x1090)*(x1091)))))), ((gconst29)*(((((IkReal(-1.00000000000000))*(x1091)*(x1097)))+(((x1092)*(x1096)))+(((x1092)*(x1095)))+(((IkReal(-1.00000000000000))*(x1092)*(x1097)))+(((x1091)*(x1095)))+(((x1091)*(x1096)))+(((IkReal(-1.00000000000000))*(x1092)*(x1093)*(x1094)))+(((IkReal(-1.00000000000000))*(x1091)*(x1093)*(x1094)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1098=IKsin(j4);
IkReal x1099=IKcos(j4);
IkReal x1100=((r12)*(sj0));
IkReal x1101=((r01)*(sj5));
IkReal x1102=((cj5)*(r00));
IkReal x1103=((cj2)*(cj3));
IkReal x1104=((IkReal(1.00000000000000))*(sj1));
IkReal x1105=((cj5)*(r20));
IkReal x1106=((IkReal(1.00000000000000))*(sj5));
IkReal x1107=((r11)*(sj5));
IkReal x1108=((cj3)*(sj2));
IkReal x1109=((cj5)*(r10));
IkReal x1110=((IkReal(1.00000000000000))*(x1098));
IkReal x1111=((cj0)*(x1099));
IkReal x1112=((sj0)*(x1099));
IkReal x1113=((cj0)*(x1098));
IkReal x1114=((sj0)*(x1098));
evalcond[0]=((((cj2)*(sj1)))+(((x1098)*(x1105)))+(((cj1)*(sj2)))+(((r22)*(x1099)))+(((IkReal(-1.00000000000000))*(r21)*(x1098)*(x1106))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r22)*(x1110)))+(((cj1)*(x1103)))+(((x1099)*(x1105)))+(((IkReal(-1.00000000000000))*(x1104)*(x1108)))+(((IkReal(-1.00000000000000))*(r21)*(x1099)*(x1106))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj0)*(x1109)*(x1110)))+(((x1102)*(x1114)))+(((IkReal(-1.00000000000000))*(r12)*(x1111)))+(((IkReal(-1.00000000000000))*(sj0)*(x1101)*(x1110)))+(((x1107)*(x1113)))+(((r02)*(x1112))));
evalcond[3]=((((IkReal(-1.00000000000000))*(r02)*(sj0)*(x1110)))+(sj3)+(((x1102)*(x1112)))+(((r12)*(x1113)))+(((IkReal(-1.00000000000000))*(x1109)*(x1111)))+(((IkReal(-1.00000000000000))*(x1101)*(x1112)))+(((x1107)*(x1111))));
evalcond[4]=((((x1109)*(x1114)))+(((x1102)*(x1113)))+(((IkReal(-1.00000000000000))*(sj2)*(x1104)))+(((x1099)*(x1100)))+(((cj1)*(cj2)))+(((IkReal(-1.00000000000000))*(r11)*(x1106)*(x1114)))+(((IkReal(-1.00000000000000))*(cj0)*(x1101)*(x1110)))+(((r02)*(x1111))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj1)*(x1108)))+(((x1109)*(x1112)))+(((IkReal(-1.00000000000000))*(x1103)*(x1104)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x1110)))+(((x1102)*(x1111)))+(((IkReal(-1.00000000000000))*(x1100)*(x1110)))+(((IkReal(-1.00000000000000))*(r11)*(x1106)*(x1112)))+(((IkReal(-1.00000000000000))*(x1101)*(x1111))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1115=((cj2)*(sj1));
IkReal x1116=((cj1)*(sj2));
IkReal x1117=((IkReal(1.00000000000000))*(r22));
IkReal x1118=((r21)*(sj5));
IkReal x1119=((IkReal(1.00000000000000))*(cj5)*(r20));
IkReal x1120=((cj3)*(sj1)*(sj2));
IkReal x1121=((cj1)*(cj2)*(cj3));
if( IKabs(((gconst28)*(((((IkReal(-1.00000000000000))*(x1117)*(x1120)))+(((IkReal(-1.00000000000000))*(x1116)*(x1119)))+(((r22)*(x1121)))+(((x1116)*(x1118)))+(((x1115)*(x1118)))+(((IkReal(-1.00000000000000))*(x1115)*(x1119))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst28)*(((((IkReal(-1.00000000000000))*(x1116)*(x1117)))+(((cj5)*(r20)*(x1120)))+(((IkReal(-1.00000000000000))*(x1118)*(x1120)))+(((IkReal(-1.00000000000000))*(x1119)*(x1121)))+(((x1118)*(x1121)))+(((IkReal(-1.00000000000000))*(x1115)*(x1117))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst28)*(((((IkReal(-1.00000000000000))*(x1117)*(x1120)))+(((IkReal(-1.00000000000000))*(x1116)*(x1119)))+(((r22)*(x1121)))+(((x1116)*(x1118)))+(((x1115)*(x1118)))+(((IkReal(-1.00000000000000))*(x1115)*(x1119)))))), ((gconst28)*(((((IkReal(-1.00000000000000))*(x1116)*(x1117)))+(((cj5)*(r20)*(x1120)))+(((IkReal(-1.00000000000000))*(x1118)*(x1120)))+(((IkReal(-1.00000000000000))*(x1119)*(x1121)))+(((x1118)*(x1121)))+(((IkReal(-1.00000000000000))*(x1115)*(x1117)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1122=IKsin(j4);
IkReal x1123=IKcos(j4);
IkReal x1124=((r12)*(sj0));
IkReal x1125=((r01)*(sj5));
IkReal x1126=((cj5)*(r00));
IkReal x1127=((cj2)*(cj3));
IkReal x1128=((IkReal(1.00000000000000))*(sj1));
IkReal x1129=((cj5)*(r20));
IkReal x1130=((IkReal(1.00000000000000))*(sj5));
IkReal x1131=((r11)*(sj5));
IkReal x1132=((cj3)*(sj2));
IkReal x1133=((cj5)*(r10));
IkReal x1134=((IkReal(1.00000000000000))*(x1122));
IkReal x1135=((cj0)*(x1123));
IkReal x1136=((sj0)*(x1123));
IkReal x1137=((cj0)*(x1122));
IkReal x1138=((sj0)*(x1122));
evalcond[0]=((((cj2)*(sj1)))+(((IkReal(-1.00000000000000))*(r21)*(x1122)*(x1130)))+(((cj1)*(sj2)))+(((r22)*(x1123)))+(((x1122)*(x1129))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r21)*(x1123)*(x1130)))+(((IkReal(-1.00000000000000))*(r22)*(x1134)))+(((cj1)*(x1127)))+(((IkReal(-1.00000000000000))*(x1128)*(x1132)))+(((x1123)*(x1129))));
evalcond[2]=((((x1126)*(x1138)))+(((x1131)*(x1137)))+(((IkReal(-1.00000000000000))*(sj0)*(x1125)*(x1134)))+(((IkReal(-1.00000000000000))*(cj0)*(x1133)*(x1134)))+(((r02)*(x1136)))+(((IkReal(-1.00000000000000))*(r12)*(x1135))));
evalcond[3]=((((x1126)*(x1136)))+(((IkReal(-1.00000000000000))*(x1125)*(x1136)))+(sj3)+(((x1131)*(x1135)))+(((IkReal(-1.00000000000000))*(r02)*(sj0)*(x1134)))+(((IkReal(-1.00000000000000))*(x1133)*(x1135)))+(((r12)*(x1137))));
evalcond[4]=((((x1126)*(x1137)))+(((IkReal(-1.00000000000000))*(sj2)*(x1128)))+(((IkReal(-1.00000000000000))*(r11)*(x1130)*(x1138)))+(((IkReal(-1.00000000000000))*(cj0)*(x1125)*(x1134)))+(((cj1)*(cj2)))+(((r02)*(x1135)))+(((x1123)*(x1124)))+(((x1133)*(x1138))));
evalcond[5]=((((x1126)*(x1135)))+(((IkReal(-1.00000000000000))*(x1125)*(x1135)))+(((IkReal(-1.00000000000000))*(r11)*(x1130)*(x1136)))+(((IkReal(-1.00000000000000))*(x1127)*(x1128)))+(((IkReal(-1.00000000000000))*(cj1)*(x1132)))+(((IkReal(-1.00000000000000))*(cj0)*(r02)*(x1134)))+(((x1133)*(x1136)))+(((IkReal(-1.00000000000000))*(x1124)*(x1134))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1139=((IkReal(1.00000000000000))*(cj5));
IkReal x1140=((cj2)*(sj1));
IkReal x1141=((cj0)*(r02));
IkReal x1142=((cj1)*(cj2));
IkReal x1143=((sj1)*(sj2));
IkReal x1144=((cj0)*(r00));
IkReal x1145=((cj1)*(sj2));
IkReal x1146=((r21)*(sj5));
IkReal x1147=((r11)*(sj5));
IkReal x1148=((sj0)*(x1145));
IkReal x1149=((cj0)*(r01)*(sj5));
if( IKabs(((gconst27)*(((((x1140)*(x1141)))+(((IkReal(-1.00000000000000))*(r22)*(x1142)))+(((r22)*(x1143)))+(((x1141)*(x1145)))+(((r12)*(sj0)*(x1140)))+(((r12)*(x1148))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst27)*(((((x1145)*(x1149)))+(((x1140)*(x1149)))+(((x1143)*(x1146)))+(((cj5)*(r20)*(x1142)))+(((IkReal(-1.00000000000000))*(x1139)*(x1140)*(x1144)))+(((IkReal(-1.00000000000000))*(r10)*(sj0)*(x1139)*(x1140)))+(((sj0)*(x1140)*(x1147)))+(((IkReal(-1.00000000000000))*(r10)*(x1139)*(x1148)))+(((IkReal(-1.00000000000000))*(r20)*(x1139)*(x1143)))+(((IkReal(-1.00000000000000))*(x1142)*(x1146)))+(((x1147)*(x1148)))+(((IkReal(-1.00000000000000))*(x1139)*(x1144)*(x1145))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst27)*(((((x1140)*(x1141)))+(((IkReal(-1.00000000000000))*(r22)*(x1142)))+(((r22)*(x1143)))+(((x1141)*(x1145)))+(((r12)*(sj0)*(x1140)))+(((r12)*(x1148)))))), ((gconst27)*(((((x1145)*(x1149)))+(((x1140)*(x1149)))+(((x1143)*(x1146)))+(((cj5)*(r20)*(x1142)))+(((IkReal(-1.00000000000000))*(x1139)*(x1140)*(x1144)))+(((IkReal(-1.00000000000000))*(r10)*(sj0)*(x1139)*(x1140)))+(((sj0)*(x1140)*(x1147)))+(((IkReal(-1.00000000000000))*(r10)*(x1139)*(x1148)))+(((IkReal(-1.00000000000000))*(r20)*(x1139)*(x1143)))+(((IkReal(-1.00000000000000))*(x1142)*(x1146)))+(((x1147)*(x1148)))+(((IkReal(-1.00000000000000))*(x1139)*(x1144)*(x1145)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1150=IKsin(j4);
IkReal x1151=IKcos(j4);
IkReal x1152=((cj5)*(r00));
IkReal x1153=((r11)*(sj5));
IkReal x1154=((r01)*(sj5));
IkReal x1155=((cj0)*(x1150));
IkReal x1156=((cj5)*(x1150));
IkReal x1157=((cj0)*(x1151));
IkReal x1158=((IkReal(1.00000000000000))*(x1150));
IkReal x1159=((sj0)*(x1151));
evalcond[0]=((((cj2)*(sj1)))+(((r22)*(x1151)))+(((cj1)*(sj2)))+(((r20)*(x1156)))+(((IkReal(-1.00000000000000))*(r21)*(sj5)*(x1158))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r12)*(x1157)))+(((r02)*(x1159)))+(((IkReal(-1.00000000000000))*(cj5)*(r10)*(x1155)))+(((x1153)*(x1155)))+(((sj0)*(x1150)*(x1152)))+(((IkReal(-1.00000000000000))*(sj0)*(x1154)*(x1158))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj0)*(x1153)*(x1158)))+(((r12)*(x1159)))+(((IkReal(-1.00000000000000))*(sj1)*(sj2)))+(((r02)*(x1157)))+(((x1152)*(x1155)))+(((IkReal(-1.00000000000000))*(x1154)*(x1155)))+(((cj1)*(cj2)))+(((r10)*(sj0)*(x1156))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst30;
gconst30=IKsign(((((IkReal(-1.00000000000000))*(cj1)*(cj2)))+(((sj1)*(sj2)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(cj1)*(cj2)))+(((sj1)*(sj2))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((IkReal(-1.00000000000000))*(cj1)*(cj2)))+(((sj1)*(sj2))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1160=((IkReal(1.00000000000000))*(cj0));
if( IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(cj1)*(cj2)))+(((sj1)*(sj2))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj1)*(cj2)))+(((sj1)*(sj2)))))):(IkReal)1.0e30))*(((((cj5)*(r21)))+(((r20)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r00)*(sj0)*(sj5)))+(((IkReal(-1.00000000000000))*(r10)*(sj5)*(x1160)))+(((cj5)*(r01)*(sj0)))+(((IkReal(-1.00000000000000))*(cj5)*(r11)*(x1160))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(cj1)*(cj2)))+(((sj1)*(sj2))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj1)*(cj2)))+(((sj1)*(sj2)))))):(IkReal)1.0e30))*(((((cj5)*(r21)))+(((r20)*(sj5)))))))+IKsqr(((((r00)*(sj0)*(sj5)))+(((IkReal(-1.00000000000000))*(r10)*(sj5)*(x1160)))+(((cj5)*(r01)*(sj0)))+(((IkReal(-1.00000000000000))*(cj5)*(r11)*(x1160)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((IKabs(((((IkReal(-1.00000000000000))*(cj1)*(cj2)))+(((sj1)*(sj2))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj1)*(cj2)))+(((sj1)*(sj2)))))):(IkReal)1.0e30))*(((((cj5)*(r21)))+(((r20)*(sj5)))))), ((((r00)*(sj0)*(sj5)))+(((IkReal(-1.00000000000000))*(r10)*(sj5)*(x1160)))+(((cj5)*(r01)*(sj0)))+(((IkReal(-1.00000000000000))*(cj5)*(r11)*(x1160)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1161=IKsin(j3);
IkReal x1162=IKcos(j3);
IkReal x1163=((IkReal(1.00000000000000))*(sj0));
IkReal x1164=((r12)*(sj4));
IkReal x1165=((r10)*(sj5));
IkReal x1166=((r00)*(sj5));
IkReal x1167=((cj5)*(r01));
IkReal x1168=((IkReal(1.00000000000000))*(sj5));
IkReal x1169=((cj4)*(r01));
IkReal x1170=((cj5)*(r11));
IkReal x1171=((IkReal(1.00000000000000))*(cj0));
IkReal x1172=((cj1)*(sj2));
IkReal x1173=((cj1)*(cj2));
IkReal x1174=((r02)*(sj4));
IkReal x1175=((sj1)*(x1161));
IkReal x1176=((IkReal(1.00000000000000))*(x1162));
IkReal x1177=((cj4)*(cj5)*(r00));
IkReal x1178=((cj4)*(r11)*(sj5));
IkReal x1179=((cj4)*(cj5)*(r10));
evalcond[0]=((((IkReal(-1.00000000000000))*(r20)*(x1168)))+(((IkReal(-1.00000000000000))*(cj5)*(r21)))+(((IkReal(-1.00000000000000))*(x1161)*(x1173)))+(((sj2)*(x1175))));
evalcond[1]=((x1162)+(((IkReal(-1.00000000000000))*(x1163)*(x1167)))+(((IkReal(-1.00000000000000))*(x1163)*(x1166)))+(((cj0)*(x1170)))+(((cj0)*(x1165))));
evalcond[2]=((((x1162)*(x1173)))+(((cj4)*(cj5)*(r20)))+(((IkReal(-1.00000000000000))*(r22)*(sj4)))+(((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x1176)))+(((IkReal(-1.00000000000000))*(cj4)*(r21)*(x1168))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1163)*(x1165)))+(((IkReal(-1.00000000000000))*(x1163)*(x1170)))+(((IkReal(-1.00000000000000))*(x1167)*(x1171)))+(((cj2)*(x1175)))+(((x1161)*(x1172)))+(((IkReal(-1.00000000000000))*(x1166)*(x1171))));
evalcond[4]=((x1161)+(((sj0)*(x1177)))+(((IkReal(-1.00000000000000))*(sj5)*(x1163)*(x1169)))+(((IkReal(-1.00000000000000))*(x1163)*(x1174)))+(((cj0)*(x1178)))+(((cj0)*(x1164)))+(((IkReal(-1.00000000000000))*(x1171)*(x1179))));
evalcond[5]=((((sj0)*(x1179)))+(((IkReal(-1.00000000000000))*(x1163)*(x1164)))+(((IkReal(-1.00000000000000))*(x1163)*(x1178)))+(((IkReal(-1.00000000000000))*(x1172)*(x1176)))+(((cj0)*(x1177)))+(((IkReal(-1.00000000000000))*(x1171)*(x1174)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x1176)))+(((IkReal(-1.00000000000000))*(cj0)*(x1168)*(x1169))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst30)*(((((cj5)*(r21)))+(((r20)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst30)*(((((IkReal(-1.00000000000000))*(cj4)*(r21)*(sj5)))+(((cj4)*(cj5)*(r20)))+(((IkReal(-1.00000000000000))*(r22)*(sj4))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst30)*(((((cj5)*(r21)))+(((r20)*(sj5)))))), ((gconst30)*(((((IkReal(-1.00000000000000))*(cj4)*(r21)*(sj5)))+(((cj4)*(cj5)*(r20)))+(((IkReal(-1.00000000000000))*(r22)*(sj4)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1180=IKsin(j3);
IkReal x1181=IKcos(j3);
IkReal x1182=((IkReal(1.00000000000000))*(sj0));
IkReal x1183=((r12)*(sj4));
IkReal x1184=((r10)*(sj5));
IkReal x1185=((r00)*(sj5));
IkReal x1186=((cj5)*(r01));
IkReal x1187=((IkReal(1.00000000000000))*(sj5));
IkReal x1188=((cj4)*(r01));
IkReal x1189=((cj5)*(r11));
IkReal x1190=((IkReal(1.00000000000000))*(cj0));
IkReal x1191=((cj1)*(sj2));
IkReal x1192=((cj1)*(cj2));
IkReal x1193=((r02)*(sj4));
IkReal x1194=((sj1)*(x1180));
IkReal x1195=((IkReal(1.00000000000000))*(x1181));
IkReal x1196=((cj4)*(cj5)*(r00));
IkReal x1197=((cj4)*(r11)*(sj5));
IkReal x1198=((cj4)*(cj5)*(r10));
evalcond[0]=((((IkReal(-1.00000000000000))*(x1180)*(x1192)))+(((sj2)*(x1194)))+(((IkReal(-1.00000000000000))*(cj5)*(r21)))+(((IkReal(-1.00000000000000))*(r20)*(x1187))));
evalcond[1]=((x1181)+(((cj0)*(x1184)))+(((cj0)*(x1189)))+(((IkReal(-1.00000000000000))*(x1182)*(x1186)))+(((IkReal(-1.00000000000000))*(x1182)*(x1185))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x1195)))+(((IkReal(-1.00000000000000))*(cj4)*(r21)*(x1187)))+(((cj4)*(cj5)*(r20)))+(((x1181)*(x1192)))+(((IkReal(-1.00000000000000))*(r22)*(sj4))));
evalcond[3]=((((x1180)*(x1191)))+(((IkReal(-1.00000000000000))*(x1186)*(x1190)))+(((IkReal(-1.00000000000000))*(x1185)*(x1190)))+(((IkReal(-1.00000000000000))*(x1182)*(x1184)))+(((IkReal(-1.00000000000000))*(x1182)*(x1189)))+(((cj2)*(x1194))));
evalcond[4]=((x1180)+(((IkReal(-1.00000000000000))*(x1190)*(x1198)))+(((cj0)*(x1197)))+(((cj0)*(x1183)))+(((sj0)*(x1196)))+(((IkReal(-1.00000000000000))*(sj5)*(x1182)*(x1188)))+(((IkReal(-1.00000000000000))*(x1182)*(x1193))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x1191)*(x1195)))+(((IkReal(-1.00000000000000))*(x1190)*(x1193)))+(((cj0)*(x1196)))+(((sj0)*(x1198)))+(((IkReal(-1.00000000000000))*(x1182)*(x1197)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x1195)))+(((IkReal(-1.00000000000000))*(x1182)*(x1183)))+(((IkReal(-1.00000000000000))*(cj0)*(x1187)*(x1188))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1199=((r02)*(sj0));
IkReal x1200=((cj2)*(sj1));
IkReal x1201=((cj1)*(sj2));
IkReal x1202=((IkReal(1.00000000000000))*(cj0));
IkReal x1203=((r11)*(sj5));
IkReal x1204=((cj0)*(cj5)*(r10));
IkReal x1205=((r01)*(sj0)*(sj5));
IkReal x1206=((IkReal(1.00000000000000))*(cj5)*(r00)*(sj0));
if( IKabs(((gconst26)*(((((IkReal(-1.00000000000000))*(r12)*(x1200)*(x1202)))+(((IkReal(-1.00000000000000))*(r12)*(x1201)*(x1202)))+(((x1199)*(x1201)))+(((x1199)*(x1200))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst26)*(((((IkReal(-1.00000000000000))*(x1200)*(x1202)*(x1203)))+(((x1200)*(x1204)))+(((x1200)*(x1205)))+(((IkReal(-1.00000000000000))*(x1200)*(x1206)))+(((IkReal(-1.00000000000000))*(x1201)*(x1202)*(x1203)))+(((IkReal(-1.00000000000000))*(x1201)*(x1206)))+(((x1201)*(x1205)))+(((x1201)*(x1204))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst26)*(((((IkReal(-1.00000000000000))*(r12)*(x1200)*(x1202)))+(((IkReal(-1.00000000000000))*(r12)*(x1201)*(x1202)))+(((x1199)*(x1201)))+(((x1199)*(x1200)))))), ((gconst26)*(((((IkReal(-1.00000000000000))*(x1200)*(x1202)*(x1203)))+(((x1200)*(x1204)))+(((x1200)*(x1205)))+(((IkReal(-1.00000000000000))*(x1200)*(x1206)))+(((IkReal(-1.00000000000000))*(x1201)*(x1202)*(x1203)))+(((IkReal(-1.00000000000000))*(x1201)*(x1206)))+(((x1201)*(x1205)))+(((x1201)*(x1204)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1207=IKsin(j4);
IkReal x1208=IKcos(j4);
IkReal x1209=((cj5)*(r00));
IkReal x1210=((r11)*(sj5));
IkReal x1211=((r01)*(sj5));
IkReal x1212=((cj0)*(x1207));
IkReal x1213=((cj5)*(x1207));
IkReal x1214=((cj0)*(x1208));
IkReal x1215=((IkReal(1.00000000000000))*(x1207));
IkReal x1216=((sj0)*(x1208));
evalcond[0]=((((cj2)*(sj1)))+(((cj1)*(sj2)))+(((r20)*(x1213)))+(((r22)*(x1208)))+(((IkReal(-1.00000000000000))*(r21)*(sj5)*(x1215))));
evalcond[1]=((((x1210)*(x1212)))+(((r02)*(x1216)))+(((IkReal(-1.00000000000000))*(r12)*(x1214)))+(((IkReal(-1.00000000000000))*(sj0)*(x1211)*(x1215)))+(((sj0)*(x1207)*(x1209)))+(((IkReal(-1.00000000000000))*(cj5)*(r10)*(x1212))));
evalcond[2]=((((r12)*(x1216)))+(((IkReal(-1.00000000000000))*(x1211)*(x1212)))+(((r02)*(x1214)))+(((IkReal(-1.00000000000000))*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(sj0)*(x1210)*(x1215)))+(((cj1)*(cj2)))+(((r10)*(sj0)*(x1213)))+(((x1209)*(x1212))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst30;
gconst30=IKsign(((((IkReal(-1.00000000000000))*(cj1)*(cj2)))+(((sj1)*(sj2)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(cj1)*(cj2)))+(((sj1)*(sj2))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((IkReal(-1.00000000000000))*(cj1)*(cj2)))+(((sj1)*(sj2))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1217=((IkReal(1.00000000000000))*(cj0));
if( IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(cj1)*(cj2)))+(((sj1)*(sj2))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj1)*(cj2)))+(((sj1)*(sj2)))))):(IkReal)1.0e30))*(((((cj5)*(r21)))+(((r20)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r00)*(sj0)*(sj5)))+(((cj5)*(r01)*(sj0)))+(((IkReal(-1.00000000000000))*(cj5)*(r11)*(x1217)))+(((IkReal(-1.00000000000000))*(r10)*(sj5)*(x1217))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(cj1)*(cj2)))+(((sj1)*(sj2))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj1)*(cj2)))+(((sj1)*(sj2)))))):(IkReal)1.0e30))*(((((cj5)*(r21)))+(((r20)*(sj5)))))))+IKsqr(((((r00)*(sj0)*(sj5)))+(((cj5)*(r01)*(sj0)))+(((IkReal(-1.00000000000000))*(cj5)*(r11)*(x1217)))+(((IkReal(-1.00000000000000))*(r10)*(sj5)*(x1217)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((IKabs(((((IkReal(-1.00000000000000))*(cj1)*(cj2)))+(((sj1)*(sj2))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj1)*(cj2)))+(((sj1)*(sj2)))))):(IkReal)1.0e30))*(((((cj5)*(r21)))+(((r20)*(sj5)))))), ((((r00)*(sj0)*(sj5)))+(((cj5)*(r01)*(sj0)))+(((IkReal(-1.00000000000000))*(cj5)*(r11)*(x1217)))+(((IkReal(-1.00000000000000))*(r10)*(sj5)*(x1217)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1218=IKsin(j3);
IkReal x1219=IKcos(j3);
IkReal x1220=((IkReal(1.00000000000000))*(sj0));
IkReal x1221=((r12)*(sj4));
IkReal x1222=((r10)*(sj5));
IkReal x1223=((r00)*(sj5));
IkReal x1224=((cj5)*(r01));
IkReal x1225=((IkReal(1.00000000000000))*(sj5));
IkReal x1226=((cj4)*(r01));
IkReal x1227=((cj5)*(r11));
IkReal x1228=((IkReal(1.00000000000000))*(cj0));
IkReal x1229=((cj1)*(sj2));
IkReal x1230=((cj1)*(cj2));
IkReal x1231=((r02)*(sj4));
IkReal x1232=((sj1)*(x1218));
IkReal x1233=((IkReal(1.00000000000000))*(x1219));
IkReal x1234=((cj4)*(cj5)*(r00));
IkReal x1235=((cj4)*(r11)*(sj5));
IkReal x1236=((cj4)*(cj5)*(r10));
evalcond[0]=((((sj2)*(x1232)))+(((IkReal(-1.00000000000000))*(r20)*(x1225)))+(((IkReal(-1.00000000000000))*(cj5)*(r21)))+(((IkReal(-1.00000000000000))*(x1218)*(x1230))));
evalcond[1]=((x1219)+(((IkReal(-1.00000000000000))*(x1220)*(x1223)))+(((IkReal(-1.00000000000000))*(x1220)*(x1224)))+(((cj0)*(x1222)))+(((cj0)*(x1227))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj4)*(r21)*(x1225)))+(((x1219)*(x1230)))+(((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x1233)))+(((cj4)*(cj5)*(r20)))+(((IkReal(-1.00000000000000))*(r22)*(sj4))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1224)*(x1228)))+(((cj2)*(x1232)))+(((IkReal(-1.00000000000000))*(x1220)*(x1222)))+(((IkReal(-1.00000000000000))*(x1220)*(x1227)))+(((x1218)*(x1229)))+(((IkReal(-1.00000000000000))*(x1223)*(x1228))));
evalcond[4]=((x1218)+(((sj0)*(x1234)))+(((IkReal(-1.00000000000000))*(x1220)*(x1231)))+(((cj0)*(x1221)))+(((IkReal(-1.00000000000000))*(x1228)*(x1236)))+(((cj0)*(x1235)))+(((IkReal(-1.00000000000000))*(sj5)*(x1220)*(x1226))));
evalcond[5]=((((sj0)*(x1236)))+(((IkReal(-1.00000000000000))*(x1220)*(x1235)))+(((IkReal(-1.00000000000000))*(x1220)*(x1221)))+(((IkReal(-1.00000000000000))*(cj0)*(x1225)*(x1226)))+(((IkReal(-1.00000000000000))*(x1228)*(x1231)))+(((cj0)*(x1234)))+(((IkReal(-1.00000000000000))*(x1229)*(x1233)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x1233))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst30)*(((((cj5)*(r21)))+(((r20)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst30)*(((((IkReal(-1.00000000000000))*(cj4)*(r21)*(sj5)))+(((cj4)*(cj5)*(r20)))+(((IkReal(-1.00000000000000))*(r22)*(sj4))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst30)*(((((cj5)*(r21)))+(((r20)*(sj5)))))), ((gconst30)*(((((IkReal(-1.00000000000000))*(cj4)*(r21)*(sj5)))+(((cj4)*(cj5)*(r20)))+(((IkReal(-1.00000000000000))*(r22)*(sj4)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1237=IKsin(j3);
IkReal x1238=IKcos(j3);
IkReal x1239=((IkReal(1.00000000000000))*(sj0));
IkReal x1240=((r12)*(sj4));
IkReal x1241=((r10)*(sj5));
IkReal x1242=((r00)*(sj5));
IkReal x1243=((cj5)*(r01));
IkReal x1244=((IkReal(1.00000000000000))*(sj5));
IkReal x1245=((cj4)*(r01));
IkReal x1246=((cj5)*(r11));
IkReal x1247=((IkReal(1.00000000000000))*(cj0));
IkReal x1248=((cj1)*(sj2));
IkReal x1249=((cj1)*(cj2));
IkReal x1250=((r02)*(sj4));
IkReal x1251=((sj1)*(x1237));
IkReal x1252=((IkReal(1.00000000000000))*(x1238));
IkReal x1253=((cj4)*(cj5)*(r00));
IkReal x1254=((cj4)*(r11)*(sj5));
IkReal x1255=((cj4)*(cj5)*(r10));
evalcond[0]=((((IkReal(-1.00000000000000))*(r20)*(x1244)))+(((IkReal(-1.00000000000000))*(cj5)*(r21)))+(((IkReal(-1.00000000000000))*(x1237)*(x1249)))+(((sj2)*(x1251))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1239)*(x1243)))+(((IkReal(-1.00000000000000))*(x1239)*(x1242)))+(x1238)+(((cj0)*(x1246)))+(((cj0)*(x1241))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj4)*(r21)*(x1244)))+(((cj4)*(cj5)*(r20)))+(((x1238)*(x1249)))+(((IkReal(-1.00000000000000))*(r22)*(sj4)))+(((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x1252))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1239)*(x1241)))+(((IkReal(-1.00000000000000))*(x1239)*(x1246)))+(((cj2)*(x1251)))+(((IkReal(-1.00000000000000))*(x1243)*(x1247)))+(((IkReal(-1.00000000000000))*(x1242)*(x1247)))+(((x1237)*(x1248))));
evalcond[4]=((x1237)+(((cj0)*(x1254)))+(((sj0)*(x1253)))+(((IkReal(-1.00000000000000))*(x1239)*(x1250)))+(((IkReal(-1.00000000000000))*(x1247)*(x1255)))+(((IkReal(-1.00000000000000))*(sj5)*(x1239)*(x1245)))+(((cj0)*(x1240))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj0)*(x1244)*(x1245)))+(((IkReal(-1.00000000000000))*(x1239)*(x1240)))+(((cj0)*(x1253)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x1252)))+(((IkReal(-1.00000000000000))*(x1248)*(x1252)))+(((sj0)*(x1255)))+(((IkReal(-1.00000000000000))*(x1239)*(x1254)))+(((IkReal(-1.00000000000000))*(x1247)*(x1250))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}
    }
}
return solutions.GetNumSolutions()>0;
}

static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    IkReal tol = 1e-5*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        if( IKabs(wi[i]) < tol*100 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:genericrobot - KR60 (49d803bf39f02c235df075b71d89bf29)>"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
